{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:51",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "7196c081905debfebfcb98984492571ef0a48c44033af0803587e890a13582dc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:34",
        "version": {
          "withMetadata": "2e1e0a3dbf36041b5bb56b722c0bfd3e16a75203140f666424ae038335cb33a2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:12",
        "version": {
          "withMetadata": "5f40b68aef87911d35e1e6e0a3153a004fc8bceb555db130ff2d649bd9e55627",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:SignedMathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "331969a09ef92335e1a22092588d9d502fb27a7c07f4c8e5add6828dbdfaa5f5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:SignedMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:9",
        "version": {
          "withMetadata": "c31681bcb1cc9df71eebd674c6eaee5ed4c761db473b5728003859c6b766faa7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Strategy.sol:Strategy": {
        "src": "contracts/Strategy.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/libraries/TokenMath.sol:OvnMath"
        ],
        "methods": [
          "setPortfolioManager(address)",
          "setSlippages(uint256,uint256,uint256)",
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:ChainlinkLibrary": {
        "src": "contracts/connectors/Chainlink.sol:50",
        "version": {
          "withMetadata": "7cccaa7fd76280b78d7c678aa45479ba8298436b1f2bc65c0bd4edb78190d9a8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:IPriceFeed": {
        "src": "contracts/connectors/Chainlink.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "latestAnswer()",
          "latestTimestamp()",
          "latestRound()",
          "getAnswer(uint256)",
          "getTimestamp(uint256)",
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakePair": {
        "src": "contracts/connectors/PancakeV2.sol:149",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter01": {
        "src": "contracts/connectors/PancakeV2.sol:202",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter02": {
        "src": "contracts/connectors/PancakeV2.sol:296",
        "inherit": [
          "contracts/connectors/PancakeV2.sol:IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary": {
        "src": "contracts/connectors/PancakeV2.sol:6",
        "version": {
          "withMetadata": "93a705864afc69ee9c6bef9efadc642303de0cdd9efe661cc6dbf3cf164640a2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IMasterWombatV2": {
        "src": "contracts/connectors/Wombat.sol:105",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(uint256,address)",
          "getAssetPid(address)",
          "poolLength()",
          "pendingTokens(uint256,address)",
          "rewarderBonusTokenInfo(uint256)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "multiClaim(uint256[])",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "migrate(uint256[])",
          "depositFor(uint256,uint256,address)",
          "updateFactor(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatAsset": {
        "src": "contracts/connectors/Wombat.sol:72",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlyingToken()",
          "pool()",
          "cash()",
          "liability()",
          "decimals()",
          "underlyingTokenDecimals()",
          "setPool(address)",
          "underlyingTokenBalance()",
          "transferUnderlyingToken(address,uint256)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "addCash(uint256)",
          "removeCash(uint256)",
          "addLiability(uint256)",
          "removeLiability(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatPool": {
        "src": "contracts/connectors/Wombat.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokens()",
          "addressOfAsset(address)",
          "deposit(address,uint256,uint256,address,uint256,bool)",
          "withdraw(address,uint256,uint256,address,uint256)",
          "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)",
          "swap(address,address,uint256,uint256,address,uint256)",
          "quotePotentialDeposit(address,uint256)",
          "quotePotentialSwap(address,address,int256)",
          "quotePotentialWithdraw(address,uint256)",
          "quoteAmountIn(address,address,int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatRouter": {
        "src": "contracts/connectors/Wombat.sol:157",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountOut(address[],address[],int256)",
          "getAmountIn(address[],address[],uint256)",
          "swapExactTokensForTokens(address[],address[],uint256,uint256,address,uint256)",
          "swapExactNativeForTokens(address[],address[],uint256,address,uint256)",
          "swapExactTokensForNative(address[],address[],uint256,uint256,address,uint256)",
          "addLiquidityNative(address,uint256,address,uint256,bool)",
          "removeLiquidityNative(address,uint256,uint256,address,uint256)",
          "removeLiquidityFromOtherAssetAsNative(address,address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:WombatLibrary": {
        "src": "contracts/connectors/Wombat.sol:229",
        "version": {
          "withMetadata": "fa0a8666f1f10251b8bab2364b2096590ad583b0d2ff6882fbb2485225eb6c1c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBaseRewardPool": {
        "src": "contracts/connectors/Wombex.sol:21",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "totalAssets()",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "maxMint(address)",
          "previewMint(uint256)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "lastTimeRewardApplicable(address)",
          "rewardPerToken(address)",
          "earned(address,address)",
          "claimableRewards(address)",
          "stake(uint256)",
          "stakeAll()",
          "stakeFor(address,uint256)",
          "withdraw(uint256,bool)",
          "withdrawAll(bool)",
          "withdrawAndUnwrap(uint256,bool)",
          "withdrawAllAndUnwrap(bool)",
          "getReward(address,bool)",
          "getReward()",
          "donate(address,uint256)",
          "processIdleRewards()",
          "rewardTokensLen()",
          "rewardTokensList()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBooster": {
        "src": "contracts/connectors/Wombex.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexPoolDepositor": {
        "src": "contracts/connectors/Wombex.sol:188",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256,bool)",
          "withdraw(address,uint256,uint256,address)",
          "getDepositAmountOut(address,uint256)",
          "getWithdrawAmountOut(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexVault": {
        "src": "contracts/connectors/Wombex.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "withdrawAndUnwrap(uint256,bool)",
          "getReward(address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IControlRole.sol:IControlRole": {
        "src": "contracts/interfaces/IControlRole.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/interfaces/IStrategy.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "netAssetValue()",
          "liquidationValue()",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/libraries/TokenMath.sol:OvnMath": {
        "src": "contracts/libraries/TokenMath.sol:4",
        "version": {
          "withMetadata": "c334a4703093078355fb94af80b3406193a520514b7ca3965d70f13389a62103",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyWombexUsdt.sol:StrategyWombexUsdt": {
        "src": "contracts/strategies/StrategyWombexUsdt.sol:11",
        "version": {
          "withMetadata": "393f6bf87a9968b53f8230d3d35ee57c19a2d8c6a361f5360198a1f938a07b76",
          "withoutMetadata": "255d5ffddf80a0208d26fde2a2bfb7032c4ab7c4d73fac34b4110b065e14ed46",
          "linkedWithoutMetadata": "255d5ffddf80a0208d26fde2a2bfb7032c4ab7c4d73fac34b4110b065e14ed46"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/libraries/TokenMath.sol:OvnMath",
          "hardhat/console.sol:console",
          "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address,address,address,string))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)2894",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:32"
            },
            {
              "label": "wom",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)2894",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:34"
            },
            {
              "label": "wmx",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)2894",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:35"
            },
            {
              "label": "lpUsdt",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IWombatAsset)4827",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:37"
            },
            {
              "label": "wmxLpUsdt",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IWombexBaseRewardPool)5966",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:38"
            },
            {
              "label": "poolDepositor",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IWombexPoolDepositor)6011",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:39"
            },
            {
              "label": "pool",
              "offset": 0,
              "slot": "307",
              "type": "t_address",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:40"
            },
            {
              "label": "pancakeRouter",
              "offset": 0,
              "slot": "308",
              "type": "t_contract(IPancakeRouter02)4610",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:41"
            },
            {
              "label": "wombatRouter",
              "offset": 0,
              "slot": "309",
              "type": "t_contract(IWombatRouter)5099",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:42"
            },
            {
              "label": "oracleBusd",
              "offset": 0,
              "slot": "310",
              "type": "t_contract(IPriceFeed)3398",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:43"
            },
            {
              "label": "oracleUsdt",
              "offset": 0,
              "slot": "311",
              "type": "t_contract(IPriceFeed)3398",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:44"
            },
            {
              "label": "usdtDm",
              "offset": 0,
              "slot": "312",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:45"
            },
            {
              "label": "lpUsdtDm",
              "offset": 0,
              "slot": "313",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:46"
            },
            {
              "label": "busd",
              "offset": 0,
              "slot": "314",
              "type": "t_contract(IERC20)2894",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:48"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "315",
              "type": "t_string_storage",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)2894": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IPancakeRouter02)4610": {
              "label": "contract IPancakeRouter02",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)3398": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatAsset)4827": {
              "label": "contract IWombatAsset",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatRouter)5099": {
              "label": "contract IWombatRouter",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexBaseRewardPool)5966": {
              "label": "contract IWombexBaseRewardPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexPoolDepositor)6011": {
              "label": "contract IWombexPoolDepositor",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "11dd6dc76097d36a942a70d2c126eb47bfe7dddb77078c805502f622dcf91b57",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:51",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "7196c081905debfebfcb98984492571ef0a48c44033af0803587e890a13582dc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:34",
        "version": {
          "withMetadata": "2e1e0a3dbf36041b5bb56b722c0bfd3e16a75203140f666424ae038335cb33a2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:12",
        "version": {
          "withMetadata": "5f40b68aef87911d35e1e6e0a3153a004fc8bceb555db130ff2d649bd9e55627",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:SignedMathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "331969a09ef92335e1a22092588d9d502fb27a7c07f4c8e5add6828dbdfaa5f5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:SignedMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:9",
        "version": {
          "withMetadata": "c31681bcb1cc9df71eebd674c6eaee5ed4c761db473b5728003859c6b766faa7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Strategy.sol:Strategy": {
        "src": "contracts/Strategy.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/libraries/TokenMath.sol:OvnMath"
        ],
        "methods": [
          "setPortfolioManager(address)",
          "setSlippages(uint256,uint256,uint256)",
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:ChainlinkLibrary": {
        "src": "contracts/connectors/Chainlink.sol:50",
        "version": {
          "withMetadata": "7cccaa7fd76280b78d7c678aa45479ba8298436b1f2bc65c0bd4edb78190d9a8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:IPriceFeed": {
        "src": "contracts/connectors/Chainlink.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "latestAnswer()",
          "latestTimestamp()",
          "latestRound()",
          "getAnswer(uint256)",
          "getTimestamp(uint256)",
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakePair": {
        "src": "contracts/connectors/PancakeV2.sol:149",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter01": {
        "src": "contracts/connectors/PancakeV2.sol:202",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter02": {
        "src": "contracts/connectors/PancakeV2.sol:296",
        "inherit": [
          "contracts/connectors/PancakeV2.sol:IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary": {
        "src": "contracts/connectors/PancakeV2.sol:6",
        "version": {
          "withMetadata": "93a705864afc69ee9c6bef9efadc642303de0cdd9efe661cc6dbf3cf164640a2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IMasterWombatV2": {
        "src": "contracts/connectors/Wombat.sol:105",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(uint256,address)",
          "getAssetPid(address)",
          "poolLength()",
          "pendingTokens(uint256,address)",
          "rewarderBonusTokenInfo(uint256)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "multiClaim(uint256[])",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "migrate(uint256[])",
          "depositFor(uint256,uint256,address)",
          "updateFactor(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatAsset": {
        "src": "contracts/connectors/Wombat.sol:72",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlyingToken()",
          "pool()",
          "cash()",
          "liability()",
          "decimals()",
          "underlyingTokenDecimals()",
          "setPool(address)",
          "underlyingTokenBalance()",
          "transferUnderlyingToken(address,uint256)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "addCash(uint256)",
          "removeCash(uint256)",
          "addLiability(uint256)",
          "removeLiability(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatPool": {
        "src": "contracts/connectors/Wombat.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokens()",
          "addressOfAsset(address)",
          "deposit(address,uint256,uint256,address,uint256,bool)",
          "withdraw(address,uint256,uint256,address,uint256)",
          "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)",
          "swap(address,address,uint256,uint256,address,uint256)",
          "quotePotentialDeposit(address,uint256)",
          "quotePotentialSwap(address,address,int256)",
          "quotePotentialWithdraw(address,uint256)",
          "quoteAmountIn(address,address,int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatRouter": {
        "src": "contracts/connectors/Wombat.sol:157",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountOut(address[],address[],int256)",
          "getAmountIn(address[],address[],uint256)",
          "swapExactTokensForTokens(address[],address[],uint256,uint256,address,uint256)",
          "swapExactNativeForTokens(address[],address[],uint256,address,uint256)",
          "swapExactTokensForNative(address[],address[],uint256,uint256,address,uint256)",
          "addLiquidityNative(address,uint256,address,uint256,bool)",
          "removeLiquidityNative(address,uint256,uint256,address,uint256)",
          "removeLiquidityFromOtherAssetAsNative(address,address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:WombatLibrary": {
        "src": "contracts/connectors/Wombat.sol:229",
        "version": {
          "withMetadata": "fa0a8666f1f10251b8bab2364b2096590ad583b0d2ff6882fbb2485225eb6c1c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBaseRewardPool": {
        "src": "contracts/connectors/Wombex.sol:21",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "totalAssets()",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "maxMint(address)",
          "previewMint(uint256)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "lastTimeRewardApplicable(address)",
          "rewardPerToken(address)",
          "earned(address,address)",
          "claimableRewards(address)",
          "stake(uint256)",
          "stakeAll()",
          "stakeFor(address,uint256)",
          "withdraw(uint256,bool)",
          "withdrawAll(bool)",
          "withdrawAndUnwrap(uint256,bool)",
          "withdrawAllAndUnwrap(bool)",
          "getReward(address,bool)",
          "getReward()",
          "donate(address,uint256)",
          "processIdleRewards()",
          "rewardTokensLen()",
          "rewardTokensList()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBooster": {
        "src": "contracts/connectors/Wombex.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexPoolDepositor": {
        "src": "contracts/connectors/Wombex.sol:188",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256,bool)",
          "withdraw(address,uint256,uint256,address)",
          "getDepositAmountOut(address,uint256)",
          "getWithdrawAmountOut(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexVault": {
        "src": "contracts/connectors/Wombex.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "withdrawAndUnwrap(uint256,bool)",
          "getReward(address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IControlRole.sol:IControlRole": {
        "src": "contracts/interfaces/IControlRole.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/interfaces/IStrategy.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "netAssetValue()",
          "liquidationValue()",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/libraries/TokenMath.sol:OvnMath": {
        "src": "contracts/libraries/TokenMath.sol:4",
        "version": {
          "withMetadata": "c334a4703093078355fb94af80b3406193a520514b7ca3965d70f13389a62103",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyWombexUsdt+.sol:StrategyWombexUsdtPlus": {
        "src": "contracts/strategies/StrategyWombexUsdt+.sol:11",
        "version": {
          "withMetadata": "407e2758f37cc297094823f951daa5c2cf9fdc8ed142856a108554b61559991e",
          "withoutMetadata": "543b6598e8bb2f545845a4227db83994ffb32be06c960a776ff3b5341e55d021",
          "linkedWithoutMetadata": "543b6598e8bb2f545845a4227db83994ffb32be06c960a776ff3b5341e55d021"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "hardhat/console.sol:console",
          "contracts/connectors/Wombat.sol:WombatLibrary",
          "contracts/libraries/TokenMath.sol:OvnMath",
          "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary",
          "contracts/connectors/Chainlink.sol:ChainlinkLibrary"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address,address,address,address,string))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)2894",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:33"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)2894",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:34"
            },
            {
              "label": "usdtPlus",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)2894",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:35"
            },
            {
              "label": "wom",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IERC20)2894",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:36"
            },
            {
              "label": "wmx",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IERC20)2894",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:37"
            },
            {
              "label": "lpUsdtPlus",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IWombatAsset)4827",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:39"
            },
            {
              "label": "wmxLpUsdtPlus",
              "offset": 0,
              "slot": "307",
              "type": "t_contract(IWombexBaseRewardPool)5966",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:40"
            },
            {
              "label": "poolDepositor",
              "offset": 0,
              "slot": "308",
              "type": "t_contract(IWombexPoolDepositor)6011",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:41"
            },
            {
              "label": "pool",
              "offset": 0,
              "slot": "309",
              "type": "t_address",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:42"
            },
            {
              "label": "pancakeRouter",
              "offset": 0,
              "slot": "310",
              "type": "t_contract(IPancakeRouter02)4610",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:44"
            },
            {
              "label": "lpUsdtDm",
              "offset": 0,
              "slot": "311",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:46"
            },
            {
              "label": "wombatRouter",
              "offset": 0,
              "slot": "312",
              "type": "t_contract(IWombatRouter)5099",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:49"
            },
            {
              "label": "oracleUsdt",
              "offset": 0,
              "slot": "313",
              "type": "t_contract(IPriceFeed)3398",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:51"
            },
            {
              "label": "usdtDm",
              "offset": 0,
              "slot": "314",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:53"
            },
            {
              "label": "usdtPlusDm",
              "offset": 0,
              "slot": "315",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:54"
            },
            {
              "label": "lpUsdtPlusDm",
              "offset": 0,
              "slot": "316",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:55"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "317",
              "type": "t_string_storage",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)2894": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IPancakeRouter02)4610": {
              "label": "contract IPancakeRouter02",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)3398": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatAsset)4827": {
              "label": "contract IWombatAsset",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatRouter)5099": {
              "label": "contract IWombatRouter",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexBaseRewardPool)5966": {
              "label": "contract IWombexBaseRewardPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexPoolDepositor)6011": {
              "label": "contract IWombexPoolDepositor",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "11dd6dc76097d36a942a70d2c126eb47bfe7dddb77078c805502f622dcf91b57",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:51",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "7196c081905debfebfcb98984492571ef0a48c44033af0803587e890a13582dc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:34",
        "version": {
          "withMetadata": "2e1e0a3dbf36041b5bb56b722c0bfd3e16a75203140f666424ae038335cb33a2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:12",
        "version": {
          "withMetadata": "5f40b68aef87911d35e1e6e0a3153a004fc8bceb555db130ff2d649bd9e55627",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:SignedMathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "331969a09ef92335e1a22092588d9d502fb27a7c07f4c8e5add6828dbdfaa5f5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:SignedMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:9",
        "version": {
          "withMetadata": "c31681bcb1cc9df71eebd674c6eaee5ed4c761db473b5728003859c6b766faa7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Strategy.sol:Strategy": {
        "src": "contracts/Strategy.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/libraries/TokenMath.sol:OvnMath"
        ],
        "methods": [
          "setPortfolioManager(address)",
          "setSlippages(uint256,uint256,uint256)",
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:ChainlinkLibrary": {
        "src": "contracts/connectors/Chainlink.sol:50",
        "version": {
          "withMetadata": "7cccaa7fd76280b78d7c678aa45479ba8298436b1f2bc65c0bd4edb78190d9a8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:IPriceFeed": {
        "src": "contracts/connectors/Chainlink.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "latestAnswer()",
          "latestTimestamp()",
          "latestRound()",
          "getAnswer(uint256)",
          "getTimestamp(uint256)",
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakePair": {
        "src": "contracts/connectors/PancakeV2.sol:149",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter01": {
        "src": "contracts/connectors/PancakeV2.sol:202",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter02": {
        "src": "contracts/connectors/PancakeV2.sol:296",
        "inherit": [
          "contracts/connectors/PancakeV2.sol:IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary": {
        "src": "contracts/connectors/PancakeV2.sol:6",
        "version": {
          "withMetadata": "93a705864afc69ee9c6bef9efadc642303de0cdd9efe661cc6dbf3cf164640a2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IMasterWombatV2": {
        "src": "contracts/connectors/Wombat.sol:105",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(uint256,address)",
          "getAssetPid(address)",
          "poolLength()",
          "pendingTokens(uint256,address)",
          "rewarderBonusTokenInfo(uint256)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "multiClaim(uint256[])",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "migrate(uint256[])",
          "depositFor(uint256,uint256,address)",
          "updateFactor(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatAsset": {
        "src": "contracts/connectors/Wombat.sol:72",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlyingToken()",
          "pool()",
          "cash()",
          "liability()",
          "decimals()",
          "underlyingTokenDecimals()",
          "setPool(address)",
          "underlyingTokenBalance()",
          "transferUnderlyingToken(address,uint256)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "addCash(uint256)",
          "removeCash(uint256)",
          "addLiability(uint256)",
          "removeLiability(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatPool": {
        "src": "contracts/connectors/Wombat.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokens()",
          "addressOfAsset(address)",
          "deposit(address,uint256,uint256,address,uint256,bool)",
          "withdraw(address,uint256,uint256,address,uint256)",
          "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)",
          "swap(address,address,uint256,uint256,address,uint256)",
          "quotePotentialDeposit(address,uint256)",
          "quotePotentialSwap(address,address,int256)",
          "quotePotentialWithdraw(address,uint256)",
          "quoteAmountIn(address,address,int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatRouter": {
        "src": "contracts/connectors/Wombat.sol:157",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountOut(address[],address[],int256)",
          "getAmountIn(address[],address[],uint256)",
          "swapExactTokensForTokens(address[],address[],uint256,uint256,address,uint256)",
          "swapExactNativeForTokens(address[],address[],uint256,address,uint256)",
          "swapExactTokensForNative(address[],address[],uint256,uint256,address,uint256)",
          "addLiquidityNative(address,uint256,address,uint256,bool)",
          "removeLiquidityNative(address,uint256,uint256,address,uint256)",
          "removeLiquidityFromOtherAssetAsNative(address,address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:WombatLibrary": {
        "src": "contracts/connectors/Wombat.sol:229",
        "version": {
          "withMetadata": "fa0a8666f1f10251b8bab2364b2096590ad583b0d2ff6882fbb2485225eb6c1c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBaseRewardPool": {
        "src": "contracts/connectors/Wombex.sol:21",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "totalAssets()",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "maxMint(address)",
          "previewMint(uint256)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "lastTimeRewardApplicable(address)",
          "rewardPerToken(address)",
          "earned(address,address)",
          "claimableRewards(address)",
          "stake(uint256)",
          "stakeAll()",
          "stakeFor(address,uint256)",
          "withdraw(uint256,bool)",
          "withdrawAll(bool)",
          "withdrawAndUnwrap(uint256,bool)",
          "withdrawAllAndUnwrap(bool)",
          "getReward(address,bool)",
          "getReward()",
          "donate(address,uint256)",
          "processIdleRewards()",
          "rewardTokensLen()",
          "rewardTokensList()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBooster": {
        "src": "contracts/connectors/Wombex.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexPoolDepositor": {
        "src": "contracts/connectors/Wombex.sol:188",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256,bool)",
          "withdraw(address,uint256,uint256,address)",
          "getDepositAmountOut(address,uint256)",
          "getWithdrawAmountOut(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexVault": {
        "src": "contracts/connectors/Wombex.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "withdrawAndUnwrap(uint256,bool)",
          "getReward(address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IControlRole.sol:IControlRole": {
        "src": "contracts/interfaces/IControlRole.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/interfaces/IStrategy.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "netAssetValue()",
          "liquidationValue()",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/libraries/TokenMath.sol:OvnMath": {
        "src": "contracts/libraries/TokenMath.sol:4",
        "version": {
          "withMetadata": "c334a4703093078355fb94af80b3406193a520514b7ca3965d70f13389a62103",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyWombexUsdt+.sol:StrategyWombexUsdtPlus": {
        "src": "contracts/strategies/StrategyWombexUsdt+.sol:11",
        "version": {
          "withMetadata": "a31342d10a3c63b655cbe2d93a31564c14dee3513036a4007474ee2092a16ddd",
          "withoutMetadata": "dfa727c14eb0f8a4bca1a6dfc9768c7f05bbfcedb8d4cdce8f1d4371611590c9",
          "linkedWithoutMetadata": "dfa727c14eb0f8a4bca1a6dfc9768c7f05bbfcedb8d4cdce8f1d4371611590c9"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "hardhat/console.sol:console",
          "contracts/connectors/Wombat.sol:WombatLibrary",
          "contracts/libraries/TokenMath.sol:OvnMath",
          "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary",
          "contracts/connectors/Chainlink.sol:ChainlinkLibrary"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address,address,address,address,string))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)2894",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:33"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)2894",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:34"
            },
            {
              "label": "usdtPlus",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)2894",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:35"
            },
            {
              "label": "wom",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IERC20)2894",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:36"
            },
            {
              "label": "wmx",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IERC20)2894",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:37"
            },
            {
              "label": "lpUsdtPlus",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IWombatAsset)4827",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:39"
            },
            {
              "label": "wmxLpUsdtPlus",
              "offset": 0,
              "slot": "307",
              "type": "t_contract(IWombexBaseRewardPool)5966",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:40"
            },
            {
              "label": "poolDepositor",
              "offset": 0,
              "slot": "308",
              "type": "t_contract(IWombexPoolDepositor)6011",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:41"
            },
            {
              "label": "pool",
              "offset": 0,
              "slot": "309",
              "type": "t_address",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:42"
            },
            {
              "label": "pancakeRouter",
              "offset": 0,
              "slot": "310",
              "type": "t_contract(IPancakeRouter02)4610",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:44"
            },
            {
              "label": "lpUsdtDm",
              "offset": 0,
              "slot": "311",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:46"
            },
            {
              "label": "wombatRouter",
              "offset": 0,
              "slot": "312",
              "type": "t_contract(IWombatRouter)5099",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:49"
            },
            {
              "label": "oracleUsdt",
              "offset": 0,
              "slot": "313",
              "type": "t_contract(IPriceFeed)3398",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:51"
            },
            {
              "label": "usdtDm",
              "offset": 0,
              "slot": "314",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:53"
            },
            {
              "label": "usdtPlusDm",
              "offset": 0,
              "slot": "315",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:54"
            },
            {
              "label": "lpUsdtPlusDm",
              "offset": 0,
              "slot": "316",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:55"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "317",
              "type": "t_string_storage",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)2894": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IPancakeRouter02)4610": {
              "label": "contract IPancakeRouter02",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)3398": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatAsset)4827": {
              "label": "contract IWombatAsset",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatRouter)5099": {
              "label": "contract IWombatRouter",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexBaseRewardPool)5966": {
              "label": "contract IWombexBaseRewardPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexPoolDepositor)6011": {
              "label": "contract IWombexPoolDepositor",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "11dd6dc76097d36a942a70d2c126eb47bfe7dddb77078c805502f622dcf91b57",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:51",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "7196c081905debfebfcb98984492571ef0a48c44033af0803587e890a13582dc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:34",
        "version": {
          "withMetadata": "2e1e0a3dbf36041b5bb56b722c0bfd3e16a75203140f666424ae038335cb33a2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:12",
        "version": {
          "withMetadata": "5f40b68aef87911d35e1e6e0a3153a004fc8bceb555db130ff2d649bd9e55627",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:SignedMathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "331969a09ef92335e1a22092588d9d502fb27a7c07f4c8e5add6828dbdfaa5f5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:SignedMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:9",
        "version": {
          "withMetadata": "c31681bcb1cc9df71eebd674c6eaee5ed4c761db473b5728003859c6b766faa7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "844f7568c6bb7310b5607db8b03b05928e81e0c4c051e73d9259c10d04597cb5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "b7c74cfdf5359cb24e1bb611c1b820e939a59fa9f683ed0b69d8a611fca94001",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "1c776510e3c0e90f90fa1dd26e16fd34af665f18cce2d67ab86f4cead8858726",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:41",
        "version": {
          "withMetadata": "0fee7a1e6c89f0595f87101a3ec655052c18c0da7d7be779aee1103fa168d328",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Exchange.sol:Exchange": {
        "src": "contracts/Exchange.sol:19",
        "version": {
          "withMetadata": "d4ebc04a01c2f2550f8600cb8f2c7c63cc401eeafb72030838229293bb9d6da5",
          "withoutMetadata": "601a70a28ba6f515e5a427a00e77615d5e20590eaa07b3f3fee41c33e82700be",
          "linkedWithoutMetadata": "601a70a28ba6f515e5a427a00e77615d5e20590eaa07b3f3fee41c33e82700be"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/WadRayMath.sol:WadRayMath",
          "hardhat/console.sol:console"
        ],
        "methods": [
          "()",
          "initialize()",
          "changeAdminRoles()",
          "setTokens(address,address)",
          "setPortfolioManager(address)",
          "setMark2Market(address)",
          "setPayoutListener(address)",
          "setInsurance(address)",
          "setBlockGetter(address)",
          "setProfitRecipient(address)",
          "setBuyFee(uint256,uint256)",
          "setRedeemFee(uint256,uint256)",
          "setOracleLoss(uint256,uint256)",
          "setCompensateLoss(uint256,uint256)",
          "setAbroad(uint256,uint256)",
          "setPayoutTimes(uint256,uint256,uint256)",
          "pause()",
          "unpause()",
          "mint((address,uint256,string))",
          "buy(address,uint256)",
          "redeem(address,uint256)",
          "payout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "251",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "252",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "usdPlus",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(SionToken)9763",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:31"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)3124",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:32"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IPortfolioManager)14794",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:34"
            },
            {
              "label": "mark2market",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IMark2Market)14726",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:35"
            },
            {
              "label": "buyFee",
              "offset": 0,
              "slot": "305",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:37"
            },
            {
              "label": "buyFeeDenominator",
              "offset": 0,
              "slot": "306",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:38"
            },
            {
              "label": "redeemFee",
              "offset": 0,
              "slot": "307",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:40"
            },
            {
              "label": "redeemFeeDenominator",
              "offset": 0,
              "slot": "308",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:41"
            },
            {
              "label": "nextPayoutTime",
              "offset": 0,
              "slot": "309",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:44"
            },
            {
              "label": "payoutPeriod",
              "offset": 0,
              "slot": "310",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:47"
            },
            {
              "label": "payoutTimeRange",
              "offset": 0,
              "slot": "311",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:54"
            },
            {
              "label": "payoutListener",
              "offset": 0,
              "slot": "312",
              "type": "t_contract(IPayoutListener)14732",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:56"
            },
            {
              "label": "lastBlockNumber",
              "offset": 0,
              "slot": "313",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:59"
            },
            {
              "label": "abroadMin",
              "offset": 0,
              "slot": "314",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:61"
            },
            {
              "label": "abroadMax",
              "offset": 0,
              "slot": "315",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:62"
            },
            {
              "label": "insurance",
              "offset": 0,
              "slot": "316",
              "type": "t_address",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:64"
            },
            {
              "label": "oracleLoss",
              "offset": 0,
              "slot": "317",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:66"
            },
            {
              "label": "oracleLossDenominator",
              "offset": 0,
              "slot": "318",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:67"
            },
            {
              "label": "compensateLoss",
              "offset": 0,
              "slot": "319",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:69"
            },
            {
              "label": "compensateLossDenominator",
              "offset": 0,
              "slot": "320",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:70"
            },
            {
              "label": "profitRecipient",
              "offset": 0,
              "slot": "321",
              "type": "t_address",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:72"
            },
            {
              "label": "blockGetter",
              "offset": 0,
              "slot": "322",
              "type": "t_address",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:74"
            },
            {
              "label": "sionToken",
              "offset": 0,
              "slot": "323",
              "type": "t_contract(SionToken)9763",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:76"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "324",
              "type": "t_contract(IERC20)3124",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)3124": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IMark2Market)14726": {
              "label": "contract IMark2Market",
              "numberOfBytes": "20"
            },
            "t_contract(IPayoutListener)14732": {
              "label": "contract IPayoutListener",
              "numberOfBytes": "20"
            },
            "t_contract(IPortfolioManager)14794": {
              "label": "contract IPortfolioManager",
              "numberOfBytes": "20"
            },
            "t_contract(SionToken)9763": {
              "label": "contract SionToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Mark2Market.sol:Mark2Market": {
        "src": "contracts/Mark2Market.sol:14",
        "version": {
          "withMetadata": "10c038033460c66d89bf270e3dd0551ca1c71c1b80b0e11665cde1909bc63291",
          "withoutMetadata": "bc75125fa1e3bca62f20a874a351a9d864d5f7588b8508916fd5dcb599d982de",
          "linkedWithoutMetadata": "bc75125fa1e3bca62f20a874a351a9d864d5f7588b8508916fd5dcb599d982de"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IMark2Market.sol:IMark2Market"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()",
          "setPortfolioManager(address)",
          "strategyAssets()",
          "totalNetAssets()",
          "totalLiquidationAssets()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_contract(IPortfolioManager)14794",
              "contract": "Mark2Market",
              "src": "contracts/Mark2Market.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IPortfolioManager)14794": {
              "label": "contract IPortfolioManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/PayoutListener.sol:PayoutListener": {
        "src": "contracts/PayoutListener.sol:12",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IPayoutListener.sol:IPayoutListener"
        ],
        "libraries": [],
        "methods": [
          "setExchanger(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "exchange",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "PayoutListener",
              "src": "contracts/PayoutListener.sol:15"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "252",
              "type": "t_array(t_uint256)50_storage",
              "contract": "PayoutListener",
              "src": "contracts/PayoutListener.sol:58"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/PortfolioManager.sol:PortfolioManager": {
        "src": "contracts/PortfolioManager.sol:19",
        "version": {
          "withMetadata": "fb1327c0c215a2ed7715447b7975551d773e8193d2bbad816a0ddb48f0c50a8c",
          "withoutMetadata": "6c60398087cf3477685e976148b621097f1eb0cc39875fb655b74463d4730750",
          "linkedWithoutMetadata": "6c60398087cf3477685e976148b621097f1eb0cc39875fb655b74463d4730750"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IPortfolioManager.sol:IPortfolioManager"
        ],
        "libraries": [
          "hardhat/console.sol:console",
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "contracts/libraries/TokenMath.sol:OvnMath"
        ],
        "methods": [
          "()",
          "initialize()",
          "setExchanger(address)",
          "setMark2Market(address)",
          "setAsset(address)",
          "setCashStrategy(address)",
          "deposit()",
          "withdraw(uint256)",
          "claimAndBalance()",
          "balance()",
          "setStrategyWeights(struct IPortfolioManager.StrategyWeight[])",
          "addStrategy(address)",
          "removeStrategy(address)",
          "getStrategyWeight(address)",
          "getAllStrategyWeights()",
          "getTotalRiskFactor()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "exchanger",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "PortfolioManager",
              "src": "contracts/PortfolioManager.sol:26"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "252",
              "type": "t_contract(IERC20)3124",
              "contract": "PortfolioManager",
              "src": "contracts/PortfolioManager.sol:27"
            },
            {
              "label": "strategyWeightPositions",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "PortfolioManager",
              "src": "contracts/PortfolioManager.sol:28"
            },
            {
              "label": "strategyWeights",
              "offset": 0,
              "slot": "254",
              "type": "t_array(t_struct(StrategyWeight)14757_storage)dyn_storage",
              "contract": "PortfolioManager",
              "src": "contracts/PortfolioManager.sol:29"
            },
            {
              "label": "cashStrategy",
              "offset": 0,
              "slot": "255",
              "type": "t_contract(IStrategy)14861",
              "contract": "PortfolioManager",
              "src": "contracts/PortfolioManager.sol:30"
            },
            {
              "label": "m2m",
              "offset": 0,
              "slot": "256",
              "type": "t_contract(IMark2Market)14726",
              "contract": "PortfolioManager",
              "src": "contracts/PortfolioManager.sol:31"
            },
            {
              "label": "totalRiskFactor",
              "offset": 0,
              "slot": "257",
              "type": "t_uint256",
              "contract": "PortfolioManager",
              "src": "contracts/PortfolioManager.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(StrategyWeight)14757_storage)dyn_storage": {
              "label": "struct IPortfolioManager.StrategyWeight[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)3124": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IMark2Market)14726": {
              "label": "contract IMark2Market",
              "numberOfBytes": "20"
            },
            "t_contract(IStrategy)14861": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(StrategyWeight)14757_storage": {
              "label": "struct IPortfolioManager.StrategyWeight",
              "members": [
                {
                  "label": "strategy",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "minWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "targetWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "maxWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "riskFactor",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "enabled",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "enabledReward",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/SionToken.sol:SionToken": {
        "src": "contracts/SionToken.sol:12",
        "version": {
          "withMetadata": "2b7394fd478e7e14010836a78ac2d49b1f84d07352895c85a5817ac2c6cb330b",
          "withoutMetadata": "6800019b8857797dd27c1fec573a0e997a7b00f08a26e5c884a3a436e4728a4b",
          "linkedWithoutMetadata": "6800019b8857797dd27c1fec573a0e997a7b00f08a26e5c884a3a436e4728a4b"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/WadRayMath.sol:WadRayMath",
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet"
        ],
        "methods": [
          "setExchanger(address)",
          "setLiquidityIndex(uint256)",
          "()",
          "initialize(string,string,uint8)",
          "setDecimals(uint8)",
          "setName(string)",
          "setSymbol(string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "balanceOf(address)",
          "scaledBalanceOf(address)",
          "totalSupply()",
          "totalMint()",
          "totalBurn()",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "scaledTotalSupply()",
          "ownerLength()",
          "ownerAt(uint256)",
          "ownerBalanceAt(uint256)",
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:21"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:23"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:25"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "254",
              "type": "t_string_storage",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:27"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "255",
              "type": "t_string_storage",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:28"
            },
            {
              "label": "_totalMint",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:34"
            },
            {
              "label": "_totalBurn",
              "offset": 0,
              "slot": "257",
              "type": "t_uint256",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:35"
            },
            {
              "label": "liquidityIndexChangeTime",
              "offset": 0,
              "slot": "258",
              "type": "t_uint256",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:37"
            },
            {
              "label": "liquidityIndex",
              "offset": 0,
              "slot": "259",
              "type": "t_uint256",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:38"
            },
            {
              "label": "liquidityIndexDenominator",
              "offset": 0,
              "slot": "260",
              "type": "t_uint256",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:39"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "261",
              "type": "t_struct(AddressSet)4675_storage",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:41"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "263",
              "type": "t_array(t_uint256)50_storage",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:43"
            },
            {
              "label": "exchange",
              "offset": 0,
              "slot": "313",
              "type": "t_address",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:45"
            },
            {
              "label": "_decimals",
              "offset": 20,
              "slot": "313",
              "type": "t_uint8",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)4675_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4360_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)4360_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Strategy.sol:Strategy": {
        "src": "contracts/Strategy.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/libraries/TokenMath.sol:OvnMath"
        ],
        "methods": [
          "setPortfolioManager(address)",
          "setSlippages(uint256,uint256,uint256)",
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:ChainlinkLibrary": {
        "src": "contracts/connectors/Chainlink.sol:50",
        "version": {
          "withMetadata": "7cccaa7fd76280b78d7c678aa45479ba8298436b1f2bc65c0bd4edb78190d9a8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:IPriceFeed": {
        "src": "contracts/connectors/Chainlink.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "latestAnswer()",
          "latestTimestamp()",
          "latestRound()",
          "getAnswer(uint256)",
          "getTimestamp(uint256)",
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakePair": {
        "src": "contracts/connectors/PancakeV2.sol:149",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter01": {
        "src": "contracts/connectors/PancakeV2.sol:202",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter02": {
        "src": "contracts/connectors/PancakeV2.sol:296",
        "inherit": [
          "contracts/connectors/PancakeV2.sol:IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary": {
        "src": "contracts/connectors/PancakeV2.sol:6",
        "version": {
          "withMetadata": "93a705864afc69ee9c6bef9efadc642303de0cdd9efe661cc6dbf3cf164640a2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Thena.sol:IBribe": {
        "src": "contracts/connectors/Thena.sol:343",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_deposit(uint256,uint256)",
          "_withdraw(uint256,uint256)",
          "getRewardForOwner(uint256,address[])",
          "notifyRewardAmount(address,uint256)",
          "left(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Thena.sol:IGaugeV2": {
        "src": "contracts/connectors/Thena.sol:258",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isForPair()",
          "rewardToken()",
          "_VE()",
          "TOKEN()",
          "DISTRIBUTION()",
          "gaugeRewarder()",
          "internal_bribe()",
          "external_bribe()",
          "rewarderPid()",
          "DURATION()",
          "periodFinish()",
          "rewardRate()",
          "lastUpdateTime()",
          "rewardPerTokenStored()",
          "fees0()",
          "fees1()",
          "userRewardPerTokenPaid(address)",
          "rewards(address)",
          "_totalSupply()",
          "_balances(address)",
          "totalSupply()",
          "balanceOf(address)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "rewardForDuration()",
          "depositAll()",
          "deposit(uint256)",
          "withdrawAll()",
          "withdraw(uint256)",
          "withdrawAllAndHarvest()",
          "getReward()",
          "_periodFinish()",
          "claimFees()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Thena.sol:IPair": {
        "src": "contracts/connectors/Thena.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "stable()",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "factory()",
          "token0()",
          "token1()",
          "fees()",
          "reserve0()",
          "reserve1()",
          "blockTimestampLast()",
          "reserve0CumulativeLast()",
          "reserve1CumulativeLast()",
          "observationLength()",
          "lastObservation()",
          "metadata()",
          "tokens()",
          "isStable()",
          "claimFees()",
          "claimStakingFees()",
          "getReserves()",
          "currentCumulativePrices()",
          "current(address,uint256)",
          "quote(address,uint256,uint256)",
          "prices(address,uint256,uint256)",
          "sample(address,uint256,uint256,uint256)",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "getAmountOut(uint256,address)",
          "approve(address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Thena.sol:IRouter": {
        "src": "contracts/connectors/Thena.sol:116",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "weth()",
          "pairCodeHash()",
          "sortTokens(address,address)",
          "pairFor(address,address,bool)",
          "getReserves(address,address,bool)",
          "getAmountOut(uint256,address,address)",
          "getAmountsOut(uint256,struct IRouter.route[])",
          "isPair(address)",
          "quoteAddLiquidity(address,address,bool,uint256,uint256)",
          "quoteRemoveLiquidity(address,address,bool,uint256)",
          "addLiquidity(address,address,bool,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,bool,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,bool,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,bool,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,bool,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,bool,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSimple(uint256,uint256,address,address,bool,address,uint256)",
          "swapExactTokensForTokens(uint256,uint256,struct IRouter.route[],address,uint256)",
          "swapExactETHForTokens(uint256,struct IRouter.route[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,struct IRouter.route[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Thena.sol:ThenaLibrary": {
        "src": "contracts/connectors/Thena.sol:352",
        "version": {
          "withMetadata": "566944a8fa736286dce1afd0bb2319736e03a8bdedc788630373cb1518de28d5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "hardhat/console.sol:console"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Venus.sol:IWbnb": {
        "src": "contracts/connectors/Venus.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Venus.sol:InterestRateModel": {
        "src": "contracts/connectors/Venus.sol:23",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBorrowRate(uint256,uint256,uint256)",
          "getSupplyRate(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Venus.sol:Maximillion": {
        "src": "contracts/connectors/Venus.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "repayBehalfExplicit(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Venus.sol:Unitroller": {
        "src": "contracts/connectors/Venus.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enterMarkets(address[])",
          "claimVenus(address,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Venus.sol:VBep20Interface": {
        "src": "contracts/connectors/Venus.sol:48",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint(uint256)",
          "mintBehalf(address,uint256)",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow(uint256)",
          "repayBorrowBehalf(address,uint256)",
          "liquidateBorrow(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "underlying",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "VBep20Interface",
              "src": "contracts/connectors/Venus.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Venus.sol:VTokenInterface": {
        "src": "contracts/connectors/Venus.sol:66",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)",
          "balanceOf(address)",
          "balanceOfUnderlying(address)",
          "getAccountSnapshot(address)",
          "borrowRatePerBlock()",
          "supplyRatePerBlock()",
          "totalBorrowsCurrent()",
          "borrowBalanceCurrent(address)",
          "borrowBalanceStored(address)",
          "exchangeRateCurrent()",
          "exchangeRateStored()",
          "getCash()",
          "accrueInterest()",
          "seize(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_notEntered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:70"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:75"
            },
            {
              "label": "symbol",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:80"
            },
            {
              "label": "decimals",
              "offset": 0,
              "slot": "3",
              "type": "t_uint8",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:85"
            },
            {
              "label": "admin",
              "offset": 1,
              "slot": "3",
              "type": "t_address_payable",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:101"
            },
            {
              "label": "pendingAdmin",
              "offset": 0,
              "slot": "4",
              "type": "t_address_payable",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:106"
            },
            {
              "label": "interestRateModel",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(InterestRateModel)12898",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:111"
            },
            {
              "label": "initialExchangeRateMantissa",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:116"
            },
            {
              "label": "reserveFactorMantissa",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:121"
            },
            {
              "label": "accrualBlockNumber",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:126"
            },
            {
              "label": "borrowIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:131"
            },
            {
              "label": "totalBorrows",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:136"
            },
            {
              "label": "totalReserves",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:141"
            },
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:146"
            },
            {
              "label": "accountTokens",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:151"
            },
            {
              "label": "transferAllowances",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:156"
            },
            {
              "label": "accountBorrows",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(BorrowSnapshot)13035_storage)",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:171"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(InterestRateModel)12898": {
              "label": "contract InterestRateModel",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(BorrowSnapshot)13035_storage)": {
              "label": "mapping(address => struct VTokenInterface.BorrowSnapshot)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(BorrowSnapshot)13035_storage": {
              "label": "struct VTokenInterface.BorrowSnapshot",
              "members": [
                {
                  "label": "principal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "interestIndex",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Venus.sol:VenusInterface": {
        "src": "contracts/connectors/Venus.sol:194",
        "inherit": [
          "contracts/connectors/Venus.sol:VTokenInterface",
          "contracts/connectors/Venus.sol:VBep20Interface"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "underlying",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "VBep20Interface",
              "src": "contracts/connectors/Venus.sol:53"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:70"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:75"
            },
            {
              "label": "symbol",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:80"
            },
            {
              "label": "decimals",
              "offset": 0,
              "slot": "3",
              "type": "t_uint8",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:85"
            },
            {
              "label": "admin",
              "offset": 1,
              "slot": "3",
              "type": "t_address_payable",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:101"
            },
            {
              "label": "pendingAdmin",
              "offset": 0,
              "slot": "4",
              "type": "t_address_payable",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:106"
            },
            {
              "label": "interestRateModel",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(InterestRateModel)12898",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:111"
            },
            {
              "label": "initialExchangeRateMantissa",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:116"
            },
            {
              "label": "reserveFactorMantissa",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:121"
            },
            {
              "label": "accrualBlockNumber",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:126"
            },
            {
              "label": "borrowIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:131"
            },
            {
              "label": "totalBorrows",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:136"
            },
            {
              "label": "totalReserves",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:141"
            },
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:146"
            },
            {
              "label": "accountTokens",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:151"
            },
            {
              "label": "transferAllowances",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:156"
            },
            {
              "label": "accountBorrows",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(BorrowSnapshot)13035_storage)",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:171"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(InterestRateModel)12898": {
              "label": "contract InterestRateModel",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(BorrowSnapshot)13035_storage)": {
              "label": "mapping(address => struct VTokenInterface.BorrowSnapshot)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(BorrowSnapshot)13035_storage": {
              "label": "struct VTokenInterface.BorrowSnapshot",
              "members": [
                {
                  "label": "principal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "interestIndex",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IMasterWombatV2": {
        "src": "contracts/connectors/Wombat.sol:105",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(uint256,address)",
          "getAssetPid(address)",
          "poolLength()",
          "pendingTokens(uint256,address)",
          "rewarderBonusTokenInfo(uint256)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "multiClaim(uint256[])",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "migrate(uint256[])",
          "depositFor(uint256,uint256,address)",
          "updateFactor(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatAsset": {
        "src": "contracts/connectors/Wombat.sol:72",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlyingToken()",
          "pool()",
          "cash()",
          "liability()",
          "decimals()",
          "underlyingTokenDecimals()",
          "setPool(address)",
          "underlyingTokenBalance()",
          "transferUnderlyingToken(address,uint256)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "addCash(uint256)",
          "removeCash(uint256)",
          "addLiability(uint256)",
          "removeLiability(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatPool": {
        "src": "contracts/connectors/Wombat.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokens()",
          "addressOfAsset(address)",
          "deposit(address,uint256,uint256,address,uint256,bool)",
          "withdraw(address,uint256,uint256,address,uint256)",
          "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)",
          "swap(address,address,uint256,uint256,address,uint256)",
          "quotePotentialDeposit(address,uint256)",
          "quotePotentialSwap(address,address,int256)",
          "quotePotentialWithdraw(address,uint256)",
          "quoteAmountIn(address,address,int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatRouter": {
        "src": "contracts/connectors/Wombat.sol:157",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountOut(address[],address[],int256)",
          "getAmountIn(address[],address[],uint256)",
          "swapExactTokensForTokens(address[],address[],uint256,uint256,address,uint256)",
          "swapExactNativeForTokens(address[],address[],uint256,address,uint256)",
          "swapExactTokensForNative(address[],address[],uint256,uint256,address,uint256)",
          "addLiquidityNative(address,uint256,address,uint256,bool)",
          "removeLiquidityNative(address,uint256,uint256,address,uint256)",
          "removeLiquidityFromOtherAssetAsNative(address,address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:WombatLibrary": {
        "src": "contracts/connectors/Wombat.sol:229",
        "version": {
          "withMetadata": "fa0a8666f1f10251b8bab2364b2096590ad583b0d2ff6882fbb2485225eb6c1c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBaseRewardPool": {
        "src": "contracts/connectors/Wombex.sol:21",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "totalAssets()",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "maxMint(address)",
          "previewMint(uint256)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "lastTimeRewardApplicable(address)",
          "rewardPerToken(address)",
          "earned(address,address)",
          "claimableRewards(address)",
          "stake(uint256)",
          "stakeAll()",
          "stakeFor(address,uint256)",
          "withdraw(uint256,bool)",
          "withdrawAll(bool)",
          "withdrawAndUnwrap(uint256,bool)",
          "withdrawAllAndUnwrap(bool)",
          "getReward(address,bool)",
          "getReward()",
          "donate(address,uint256)",
          "processIdleRewards()",
          "rewardTokensLen()",
          "rewardTokensList()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBooster": {
        "src": "contracts/connectors/Wombex.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexPoolDepositor": {
        "src": "contracts/connectors/Wombex.sol:188",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256,bool)",
          "withdraw(address,uint256,uint256,address)",
          "getDepositAmountOut(address,uint256)",
          "getWithdrawAmountOut(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexVault": {
        "src": "contracts/connectors/Wombex.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "withdrawAndUnwrap(uint256,bool)",
          "getReward(address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IBlockGetter.sol:IBlockGetter": {
        "src": "contracts/interfaces/IBlockGetter.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getNumber()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IControlRole.sol:IControlRole": {
        "src": "contracts/interfaces/IControlRole.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IHedgeStrategy.sol:IHedgeStrategy": {
        "src": "contracts/interfaces/IHedgeStrategy.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(uint256)",
          "unstake(uint256,address)",
          "netAssetValue()",
          "claimRewards(address)",
          "balance(uint256)",
          "balancePosition()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IInsuranceExchange.sol:IInsuranceExchange": {
        "src": "contracts/interfaces/IInsuranceExchange.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint((uint256))",
          "redeem((uint256))",
          "payout()",
          "premium(uint256)",
          "compensate(uint256,address)",
          "requestWithdraw()",
          "checkWithdraw()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IMark2Market.sol:IMark2Market": {
        "src": "contracts/interfaces/IMark2Market.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "strategyAssets()",
          "totalNetAssets()",
          "totalLiquidationAssets()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IPayoutListener.sol:IPayoutListener": {
        "src": "contracts/interfaces/IPayoutListener.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "payoutDone()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IPortfolioManager.sol:IPortfolioManager": {
        "src": "contracts/interfaces/IPortfolioManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)",
          "getStrategyWeight(address)",
          "getAllStrategyWeights()",
          "claimAndBalance()",
          "balance()",
          "getTotalRiskFactor()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/interfaces/IStrategy.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "netAssetValue()",
          "liquidationValue()",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/libraries/TokenMath.sol:OvnMath": {
        "src": "contracts/libraries/TokenMath.sol:4",
        "version": {
          "withMetadata": "c334a4703093078355fb94af80b3406193a520514b7ca3965d70f13389a62103",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/libraries/WadRayMath.sol:WadRayMath": {
        "src": "contracts/libraries/WadRayMath.sol:9",
        "version": {
          "withMetadata": "b1f82aba0e7223a490bb5463f72ec0abec6d741e0cf425f34a7d740960f69cba",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:StrategyThenaUsdtUsdPlus": {
        "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:10",
        "version": {
          "withMetadata": "abcd9e1dbac1f4594b3b1a6b07c2849aeb562606934ea2695e10f6e0920be1eb",
          "withoutMetadata": "44cdad4b1cb16df42b1afa5ca898a2e3b8a13a1dceddf80e14727522cbf6a53e",
          "linkedWithoutMetadata": "44cdad4b1cb16df42b1afa5ca898a2e3b8a13a1dceddf80e14727522cbf6a53e"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "hardhat/console.sol:console",
          "contracts/connectors/Thena.sol:ThenaLibrary",
          "contracts/libraries/TokenMath.sol:OvnMath",
          "contracts/connectors/Wombat.sol:WombatLibrary"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address,address,address))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "busd",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:29"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:30"
            },
            {
              "label": "usdPlus",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:31"
            },
            {
              "label": "the",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:32"
            },
            {
              "label": "pair",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IPair)11773",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:34"
            },
            {
              "label": "router",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IRouter)12123",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:35"
            },
            {
              "label": "gauge",
              "offset": 0,
              "slot": "307",
              "type": "t_contract(IGaugeV2)12310",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:36"
            },
            {
              "label": "wombatPool",
              "offset": 0,
              "slot": "308",
              "type": "t_address",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:37"
            },
            {
              "label": "wombatRouter",
              "offset": 0,
              "slot": "309",
              "type": "t_contract(IWombatRouter)13661",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:39"
            },
            {
              "label": "oracleBusd",
              "offset": 0,
              "slot": "310",
              "type": "t_contract(IPriceFeed)10242",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:41"
            },
            {
              "label": "oracleUsdt",
              "offset": 0,
              "slot": "311",
              "type": "t_contract(IPriceFeed)10242",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:42"
            },
            {
              "label": "busdDm",
              "offset": 0,
              "slot": "312",
              "type": "t_uint256",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:44"
            },
            {
              "label": "usdtDm",
              "offset": 0,
              "slot": "313",
              "type": "t_uint256",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:45"
            },
            {
              "label": "hay",
              "offset": 0,
              "slot": "314",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:47"
            },
            {
              "label": "usdPlusDm",
              "offset": 0,
              "slot": "315",
              "type": "t_uint256",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:48"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)3124": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IGaugeV2)12310": {
              "label": "contract IGaugeV2",
              "numberOfBytes": "20"
            },
            "t_contract(IPair)11773": {
              "label": "contract IPair",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)10242": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_contract(IRouter)12123": {
              "label": "contract IRouter",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatRouter)13661": {
              "label": "contract IWombatRouter",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyThenawUsdrUsdc.sol:StrategyThenawUsdrUsdc": {
        "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:11",
        "version": {
          "withMetadata": "acde0db3a70dbb202f4995e8020240a1242163a2dbfcbab8f2b47d90a46a6981",
          "withoutMetadata": "c6b4557929474120f6b3aae61873ea2ecb08d8295448f92259a5ab3e178307a8",
          "linkedWithoutMetadata": "c6b4557929474120f6b3aae61873ea2ecb08d8295448f92259a5ab3e178307a8"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/connectors/Chainlink.sol:ChainlinkLibrary",
          "contracts/libraries/TokenMath.sol:OvnMath",
          "contracts/connectors/Wombat.sol:WombatLibrary",
          "contracts/connectors/Thena.sol:ThenaLibrary",
          "hardhat/console.sol:console"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address,address,address,address,address,string))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "busd",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:33"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:34"
            },
            {
              "label": "wUsdr",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:35"
            },
            {
              "label": "the",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:36"
            },
            {
              "label": "pair",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IPair)11773",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:39"
            },
            {
              "label": "router",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IRouter)12123",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:40"
            },
            {
              "label": "gauge",
              "offset": 0,
              "slot": "307",
              "type": "t_contract(IGaugeV2)12310",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:41"
            },
            {
              "label": "wombatPool",
              "offset": 0,
              "slot": "308",
              "type": "t_address",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:42"
            },
            {
              "label": "wombatRouter",
              "offset": 0,
              "slot": "309",
              "type": "t_contract(IWombatRouter)13661",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:44"
            },
            {
              "label": "oracleBusd",
              "offset": 0,
              "slot": "310",
              "type": "t_contract(IPriceFeed)10242",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:46"
            },
            {
              "label": "oracleUsdc",
              "offset": 0,
              "slot": "311",
              "type": "t_contract(IPriceFeed)10242",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:47"
            },
            {
              "label": "busdDm",
              "offset": 0,
              "slot": "312",
              "type": "t_uint256",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:49"
            },
            {
              "label": "usdcDm",
              "offset": 0,
              "slot": "313",
              "type": "t_uint256",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:50"
            },
            {
              "label": "wUsdrDm",
              "offset": 0,
              "slot": "314",
              "type": "t_uint256",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:52"
            },
            {
              "label": "usdtDm",
              "offset": 0,
              "slot": "315",
              "type": "t_uint256",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:53"
            },
            {
              "label": "oracleUsdt",
              "offset": 0,
              "slot": "316",
              "type": "t_contract(IPriceFeed)10242",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:55"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "317",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:56"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "318",
              "type": "t_string_storage",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:57"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)3124": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IGaugeV2)12310": {
              "label": "contract IGaugeV2",
              "numberOfBytes": "20"
            },
            "t_contract(IPair)11773": {
              "label": "contract IPair",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)10242": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_contract(IRouter)12123": {
              "label": "contract IRouter",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatRouter)13661": {
              "label": "contract IWombatRouter",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyVenusBusd.sol:StrategyVenusBusd": {
        "src": "contracts/strategies/StrategyVenusBusd.sol:9",
        "version": {
          "withMetadata": "44297430813d85f23978df154727871fbbe0bab8e7f2dca487bf4a09cc5155e7",
          "withoutMetadata": "a72c08fdb277ec85545f419c6520e97f81b24d756605ee7403438ba1cfe38843",
          "linkedWithoutMetadata": "a72c08fdb277ec85545f419c6520e97f81b24d756605ee7403438ba1cfe38843"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "hardhat/console.sol:console",
          "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "busdToken",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyVenusBusd",
              "src": "contracts/strategies/StrategyVenusBusd.sol:25"
            },
            {
              "label": "vBusdToken",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(VenusInterface)13172",
              "contract": "StrategyVenusBusd",
              "src": "contracts/strategies/StrategyVenusBusd.sol:26"
            },
            {
              "label": "unitroller",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(Unitroller)12849",
              "contract": "StrategyVenusBusd",
              "src": "contracts/strategies/StrategyVenusBusd.sol:27"
            },
            {
              "label": "pancakeRouter",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IPancakeRouter02)11454",
              "contract": "StrategyVenusBusd",
              "src": "contracts/strategies/StrategyVenusBusd.sol:28"
            },
            {
              "label": "xvsToken",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyVenusBusd",
              "src": "contracts/strategies/StrategyVenusBusd.sol:29"
            },
            {
              "label": "wbnbToken",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyVenusBusd",
              "src": "contracts/strategies/StrategyVenusBusd.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)3124": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IPancakeRouter02)11454": {
              "label": "contract IPancakeRouter02",
              "numberOfBytes": "20"
            },
            "t_contract(Unitroller)12849": {
              "label": "contract Unitroller",
              "numberOfBytes": "20"
            },
            "t_contract(VenusInterface)13172": {
              "label": "contract VenusInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyWombexBusd.sol:StrategyWombexBusd": {
        "src": "contracts/strategies/StrategyWombexBusd.sol:11",
        "version": {
          "withMetadata": "92016eeb58f28944d13aa08ef574eaea51017f14cc6a1e70cc18c1d6fcb3811a",
          "withoutMetadata": "181108071b45d485d8d53652b725d65fc7e6c4aa15a271e9209c4e74333fc399",
          "linkedWithoutMetadata": "181108071b45d485d8d53652b725d65fc7e6c4aa15a271e9209c4e74333fc399"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/libraries/TokenMath.sol:OvnMath",
          "contracts/connectors/Wombat.sol:WombatLibrary",
          "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary",
          "hardhat/console.sol:console",
          "contracts/connectors/Chainlink.sol:ChainlinkLibrary"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address,address,address,address,address))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "busd",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:33"
            },
            {
              "label": "wom",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:34"
            },
            {
              "label": "wmx",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:35"
            },
            {
              "label": "lpBusd",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IWombatAsset)13389",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:37"
            },
            {
              "label": "wmxLpBusd",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IWombexBaseRewardPool)14528",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:38"
            },
            {
              "label": "poolDepositor",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IWombexPoolDepositor)14573",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:39"
            },
            {
              "label": "pool",
              "offset": 0,
              "slot": "307",
              "type": "t_address",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:40"
            },
            {
              "label": "pancakeRouter",
              "offset": 0,
              "slot": "308",
              "type": "t_contract(IPancakeRouter02)11454",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:42"
            },
            {
              "label": "lpBusdDm",
              "offset": 0,
              "slot": "309",
              "type": "t_uint256",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:44"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "310",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:46"
            },
            {
              "label": "wombatRouter",
              "offset": 0,
              "slot": "311",
              "type": "t_contract(IWombatRouter)13661",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:48"
            },
            {
              "label": "oracleUsdc",
              "offset": 0,
              "slot": "312",
              "type": "t_contract(IPriceFeed)10242",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:50"
            },
            {
              "label": "oracleBusd",
              "offset": 0,
              "slot": "313",
              "type": "t_contract(IPriceFeed)10242",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:51"
            },
            {
              "label": "usdcDm",
              "offset": 0,
              "slot": "314",
              "type": "t_uint256",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:53"
            },
            {
              "label": "busdDm",
              "offset": 0,
              "slot": "315",
              "type": "t_uint256",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:54"
            },
            {
              "label": "usdtDm",
              "offset": 0,
              "slot": "316",
              "type": "t_uint256",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:55"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "317",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:57"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)3124": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IPancakeRouter02)11454": {
              "label": "contract IPancakeRouter02",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)10242": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatAsset)13389": {
              "label": "contract IWombatAsset",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatRouter)13661": {
              "label": "contract IWombatRouter",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexBaseRewardPool)14528": {
              "label": "contract IWombexBaseRewardPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexPoolDepositor)14573": {
              "label": "contract IWombexPoolDepositor",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyWombexUsdt+.sol:StrategyWombexUsdtPlus": {
        "src": "contracts/strategies/StrategyWombexUsdt+.sol:11",
        "version": {
          "withMetadata": "647689b9247250384f2ab785a0eaf941ee51d76757e238a4dbb85770c6f6e1e8",
          "withoutMetadata": "6c4aa535861d059044b66b974e1a84734612cb1519a9e84e917d4e9f26b4cbd6",
          "linkedWithoutMetadata": "6c4aa535861d059044b66b974e1a84734612cb1519a9e84e917d4e9f26b4cbd6"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "hardhat/console.sol:console",
          "contracts/connectors/Wombat.sol:WombatLibrary",
          "contracts/libraries/TokenMath.sol:OvnMath",
          "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary",
          "contracts/connectors/Chainlink.sol:ChainlinkLibrary"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address,address,address,address,string))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:33"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:34"
            },
            {
              "label": "usdtPlus",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:35"
            },
            {
              "label": "wom",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:36"
            },
            {
              "label": "wmx",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:37"
            },
            {
              "label": "lpUsdtPlus",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IWombatAsset)13389",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:39"
            },
            {
              "label": "wmxLpUsdtPlus",
              "offset": 0,
              "slot": "307",
              "type": "t_contract(IWombexBaseRewardPool)14528",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:40"
            },
            {
              "label": "poolDepositor",
              "offset": 0,
              "slot": "308",
              "type": "t_contract(IWombexPoolDepositor)14573",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:41"
            },
            {
              "label": "pool",
              "offset": 0,
              "slot": "309",
              "type": "t_address",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:42"
            },
            {
              "label": "pancakeRouter",
              "offset": 0,
              "slot": "310",
              "type": "t_contract(IPancakeRouter02)11454",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:44"
            },
            {
              "label": "lpUsdtDm",
              "offset": 0,
              "slot": "311",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:46"
            },
            {
              "label": "wombatRouter",
              "offset": 0,
              "slot": "312",
              "type": "t_contract(IWombatRouter)13661",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:49"
            },
            {
              "label": "oracleUsdt",
              "offset": 0,
              "slot": "313",
              "type": "t_contract(IPriceFeed)10242",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:51"
            },
            {
              "label": "usdtDm",
              "offset": 0,
              "slot": "314",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:53"
            },
            {
              "label": "usdtPlusDm",
              "offset": 0,
              "slot": "315",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:54"
            },
            {
              "label": "lpUsdtPlusDm",
              "offset": 0,
              "slot": "316",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:55"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "317",
              "type": "t_string_storage",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)3124": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IPancakeRouter02)11454": {
              "label": "contract IPancakeRouter02",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)10242": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatAsset)13389": {
              "label": "contract IWombatAsset",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatRouter)13661": {
              "label": "contract IWombatRouter",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexBaseRewardPool)14528": {
              "label": "contract IWombexBaseRewardPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexPoolDepositor)14573": {
              "label": "contract IWombexPoolDepositor",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyWombexUsdt.sol:StrategyWombexUsdt": {
        "src": "contracts/strategies/StrategyWombexUsdt.sol:11",
        "version": {
          "withMetadata": "373e190757444679169c1dc6d99d691d7e0f6f6e370fd5375853a4127de14ffa",
          "withoutMetadata": "0b45e744bcf376406bb63e776db7d78a0ca59e95282c0c4e2f01019f074022ea",
          "linkedWithoutMetadata": "0b45e744bcf376406bb63e776db7d78a0ca59e95282c0c4e2f01019f074022ea"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/libraries/TokenMath.sol:OvnMath",
          "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address,address,address,string))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:32"
            },
            {
              "label": "wom",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:34"
            },
            {
              "label": "wmx",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:35"
            },
            {
              "label": "lpUsdt",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IWombatAsset)13389",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:37"
            },
            {
              "label": "wmxLpUsdt",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IWombexBaseRewardPool)14528",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:38"
            },
            {
              "label": "poolDepositor",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IWombexPoolDepositor)14573",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:39"
            },
            {
              "label": "pool",
              "offset": 0,
              "slot": "307",
              "type": "t_address",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:40"
            },
            {
              "label": "pancakeRouter",
              "offset": 0,
              "slot": "308",
              "type": "t_contract(IPancakeRouter02)11454",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:41"
            },
            {
              "label": "wombatRouter",
              "offset": 0,
              "slot": "309",
              "type": "t_contract(IWombatRouter)13661",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:42"
            },
            {
              "label": "oracleBusd",
              "offset": 0,
              "slot": "310",
              "type": "t_contract(IPriceFeed)10242",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:43"
            },
            {
              "label": "oracleUsdt",
              "offset": 0,
              "slot": "311",
              "type": "t_contract(IPriceFeed)10242",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:44"
            },
            {
              "label": "usdtDm",
              "offset": 0,
              "slot": "312",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:45"
            },
            {
              "label": "lpUsdtDm",
              "offset": 0,
              "slot": "313",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:46"
            },
            {
              "label": "busd",
              "offset": 0,
              "slot": "314",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:48"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "315",
              "type": "t_string_storage",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)3124": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IPancakeRouter02)11454": {
              "label": "contract IPancakeRouter02",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)10242": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatAsset)13389": {
              "label": "contract IWombatAsset",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatRouter)13661": {
              "label": "contract IWombatRouter",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexBaseRewardPool)14528": {
              "label": "contract IWombexBaseRewardPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexPoolDepositor)14573": {
              "label": "contract IWombexPoolDepositor",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyWombexUsdtMim.sol:StrategyWombexUsdtMim": {
        "src": "contracts/strategies/StrategyWombexUsdtMim.sol:10",
        "version": {
          "withMetadata": "a19e33dd19deaf1e03d0ed075edb6101ba39992dd1da911f72074766785ad99d",
          "withoutMetadata": "dd795541f24001af279be6807a24a5d957d0f54b8f1e73a275a1999d2fe5c888",
          "linkedWithoutMetadata": "dd795541f24001af279be6807a24a5d957d0f54b8f1e73a275a1999d2fe5c888"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/libraries/TokenMath.sol:OvnMath",
          "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyWombexUsdtMim",
              "src": "contracts/strategies/StrategyWombexUsdtMim.sol:28"
            },
            {
              "label": "busd",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyWombexUsdtMim",
              "src": "contracts/strategies/StrategyWombexUsdtMim.sol:29"
            },
            {
              "label": "wom",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyWombexUsdtMim",
              "src": "contracts/strategies/StrategyWombexUsdtMim.sol:30"
            },
            {
              "label": "wmx",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyWombexUsdtMim",
              "src": "contracts/strategies/StrategyWombexUsdtMim.sol:31"
            },
            {
              "label": "lpUsdt",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IWombatAsset)13389",
              "contract": "StrategyWombexUsdtMim",
              "src": "contracts/strategies/StrategyWombexUsdtMim.sol:33"
            },
            {
              "label": "wmxLpUsdt",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IWombexBaseRewardPool)14528",
              "contract": "StrategyWombexUsdtMim",
              "src": "contracts/strategies/StrategyWombexUsdtMim.sol:34"
            },
            {
              "label": "poolDepositor",
              "offset": 0,
              "slot": "307",
              "type": "t_contract(IWombexPoolDepositor)14573",
              "contract": "StrategyWombexUsdtMim",
              "src": "contracts/strategies/StrategyWombexUsdtMim.sol:35"
            },
            {
              "label": "pool",
              "offset": 0,
              "slot": "308",
              "type": "t_address",
              "contract": "StrategyWombexUsdtMim",
              "src": "contracts/strategies/StrategyWombexUsdtMim.sol:36"
            },
            {
              "label": "pancakeRouter",
              "offset": 0,
              "slot": "309",
              "type": "t_contract(IPancakeRouter02)11454",
              "contract": "StrategyWombexUsdtMim",
              "src": "contracts/strategies/StrategyWombexUsdtMim.sol:38"
            },
            {
              "label": "lpUsdtDm",
              "offset": 0,
              "slot": "310",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtMim",
              "src": "contracts/strategies/StrategyWombexUsdtMim.sol:40"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)3124": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IPancakeRouter02)11454": {
              "label": "contract IPancakeRouter02",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatAsset)13389": {
              "label": "contract IWombatAsset",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexBaseRewardPool)14528": {
              "label": "contract IWombexBaseRewardPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexPoolDepositor)14573": {
              "label": "contract IWombexPoolDepositor",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "11dd6dc76097d36a942a70d2c126eb47bfe7dddb77078c805502f622dcf91b57",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:51",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "7196c081905debfebfcb98984492571ef0a48c44033af0803587e890a13582dc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:34",
        "version": {
          "withMetadata": "2e1e0a3dbf36041b5bb56b722c0bfd3e16a75203140f666424ae038335cb33a2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:12",
        "version": {
          "withMetadata": "5f40b68aef87911d35e1e6e0a3153a004fc8bceb555db130ff2d649bd9e55627",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:SignedMathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "331969a09ef92335e1a22092588d9d502fb27a7c07f4c8e5add6828dbdfaa5f5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:SignedMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:9",
        "version": {
          "withMetadata": "c31681bcb1cc9df71eebd674c6eaee5ed4c761db473b5728003859c6b766faa7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "6ac6ec1e2660e8d790cca925f59f9c3d3eca8fc5b4945232144f26c2a97067d8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:30",
        "version": {
          "withMetadata": "5e14668159c3bedba850818ddc1905a72906ea0d98b7655547bfcc460e067e0a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Exchange.sol:Exchange": {
        "src": "contracts/Exchange.sol:19",
        "version": {
          "withMetadata": "6e5a3d2fffa2e47f480ab01ecc3d90c007dd0e4a241a6b0657920ee83ba0fba3",
          "withoutMetadata": "601a70a28ba6f515e5a427a00e77615d5e20590eaa07b3f3fee41c33e82700be",
          "linkedWithoutMetadata": "601a70a28ba6f515e5a427a00e77615d5e20590eaa07b3f3fee41c33e82700be"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/WadRayMath.sol:WadRayMath",
          "hardhat/console.sol:console"
        ],
        "methods": [
          "()",
          "initialize()",
          "changeAdminRoles()",
          "setTokens(address,address)",
          "setPortfolioManager(address)",
          "setMark2Market(address)",
          "setPayoutListener(address)",
          "setInsurance(address)",
          "setBlockGetter(address)",
          "setProfitRecipient(address)",
          "setBuyFee(uint256,uint256)",
          "setRedeemFee(uint256,uint256)",
          "setOracleLoss(uint256,uint256)",
          "setCompensateLoss(uint256,uint256)",
          "setAbroad(uint256,uint256)",
          "setPayoutTimes(uint256,uint256,uint256)",
          "pause()",
          "unpause()",
          "mint((address,uint256,string))",
          "buy(address,uint256)",
          "redeem(address,uint256)",
          "payout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "251",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "252",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "usdPlus",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(SionToken)8752",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:31"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)3124",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:32"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IPortfolioManager)13869",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:34"
            },
            {
              "label": "mark2market",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IMark2Market)13801",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:35"
            },
            {
              "label": "buyFee",
              "offset": 0,
              "slot": "305",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:37"
            },
            {
              "label": "buyFeeDenominator",
              "offset": 0,
              "slot": "306",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:38"
            },
            {
              "label": "redeemFee",
              "offset": 0,
              "slot": "307",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:40"
            },
            {
              "label": "redeemFeeDenominator",
              "offset": 0,
              "slot": "308",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:41"
            },
            {
              "label": "nextPayoutTime",
              "offset": 0,
              "slot": "309",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:44"
            },
            {
              "label": "payoutPeriod",
              "offset": 0,
              "slot": "310",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:47"
            },
            {
              "label": "payoutTimeRange",
              "offset": 0,
              "slot": "311",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:54"
            },
            {
              "label": "payoutListener",
              "offset": 0,
              "slot": "312",
              "type": "t_contract(IPayoutListener)13807",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:56"
            },
            {
              "label": "lastBlockNumber",
              "offset": 0,
              "slot": "313",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:59"
            },
            {
              "label": "abroadMin",
              "offset": 0,
              "slot": "314",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:61"
            },
            {
              "label": "abroadMax",
              "offset": 0,
              "slot": "315",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:62"
            },
            {
              "label": "insurance",
              "offset": 0,
              "slot": "316",
              "type": "t_address",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:64"
            },
            {
              "label": "oracleLoss",
              "offset": 0,
              "slot": "317",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:66"
            },
            {
              "label": "oracleLossDenominator",
              "offset": 0,
              "slot": "318",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:67"
            },
            {
              "label": "compensateLoss",
              "offset": 0,
              "slot": "319",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:69"
            },
            {
              "label": "compensateLossDenominator",
              "offset": 0,
              "slot": "320",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:70"
            },
            {
              "label": "profitRecipient",
              "offset": 0,
              "slot": "321",
              "type": "t_address",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:72"
            },
            {
              "label": "blockGetter",
              "offset": 0,
              "slot": "322",
              "type": "t_address",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:74"
            },
            {
              "label": "sionToken",
              "offset": 0,
              "slot": "323",
              "type": "t_contract(SionToken)8752",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:76"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "324",
              "type": "t_contract(IERC20)3124",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)3124": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IMark2Market)13801": {
              "label": "contract IMark2Market",
              "numberOfBytes": "20"
            },
            "t_contract(IPayoutListener)13807": {
              "label": "contract IPayoutListener",
              "numberOfBytes": "20"
            },
            "t_contract(IPortfolioManager)13869": {
              "label": "contract IPortfolioManager",
              "numberOfBytes": "20"
            },
            "t_contract(SionToken)8752": {
              "label": "contract SionToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Mark2Market.sol:Mark2Market": {
        "src": "contracts/Mark2Market.sol:14",
        "version": {
          "withMetadata": "722f29ff411d99ddd04157d84f3e3abe3b308672b7eb392ae96dc8f04cb061f5",
          "withoutMetadata": "bc75125fa1e3bca62f20a874a351a9d864d5f7588b8508916fd5dcb599d982de",
          "linkedWithoutMetadata": "bc75125fa1e3bca62f20a874a351a9d864d5f7588b8508916fd5dcb599d982de"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IMark2Market.sol:IMark2Market"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()",
          "setPortfolioManager(address)",
          "strategyAssets()",
          "totalNetAssets()",
          "totalLiquidationAssets()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_contract(IPortfolioManager)13869",
              "contract": "Mark2Market",
              "src": "contracts/Mark2Market.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IPortfolioManager)13869": {
              "label": "contract IPortfolioManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/PayoutListener.sol:PayoutListener": {
        "src": "contracts/PayoutListener.sol:12",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IPayoutListener.sol:IPayoutListener"
        ],
        "libraries": [],
        "methods": [
          "setExchanger(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "exchange",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "PayoutListener",
              "src": "contracts/PayoutListener.sol:15"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "252",
              "type": "t_array(t_uint256)50_storage",
              "contract": "PayoutListener",
              "src": "contracts/PayoutListener.sol:58"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/PortfolioManager.sol:PortfolioManager": {
        "src": "contracts/PortfolioManager.sol:19",
        "version": {
          "withMetadata": "963679de05a815a1810022a10ea3d6cf9ff45c8a12015d2cffc555cc980a97f7",
          "withoutMetadata": "5e86e95803617f49a007ad8d0660d0aa483a7554e7c72e1cbfb1b3b5e03f124d",
          "linkedWithoutMetadata": "5e86e95803617f49a007ad8d0660d0aa483a7554e7c72e1cbfb1b3b5e03f124d"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IPortfolioManager.sol:IPortfolioManager"
        ],
        "libraries": [
          "hardhat/console.sol:console",
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "contracts/libraries/TokenMath.sol:OvnMath"
        ],
        "methods": [
          "()",
          "initialize()",
          "setExchanger(address)",
          "setMark2Market(address)",
          "setAsset(address)",
          "setCashStrategy(address)",
          "deposit()",
          "withdraw(uint256)",
          "claimAndBalance()",
          "balance()",
          "setStrategyWeights(struct IPortfolioManager.StrategyWeight[])",
          "addStrategy(address)",
          "removeStrategy(address)",
          "getStrategyWeight(address)",
          "getAllStrategyWeights()",
          "getTotalRiskFactor()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "exchanger",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "PortfolioManager",
              "src": "contracts/PortfolioManager.sol:26"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "252",
              "type": "t_contract(IERC20)3124",
              "contract": "PortfolioManager",
              "src": "contracts/PortfolioManager.sol:27"
            },
            {
              "label": "strategyWeightPositions",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "PortfolioManager",
              "src": "contracts/PortfolioManager.sol:28"
            },
            {
              "label": "strategyWeights",
              "offset": 0,
              "slot": "254",
              "type": "t_array(t_struct(StrategyWeight)13832_storage)dyn_storage",
              "contract": "PortfolioManager",
              "src": "contracts/PortfolioManager.sol:29"
            },
            {
              "label": "cashStrategy",
              "offset": 0,
              "slot": "255",
              "type": "t_contract(IStrategy)14099",
              "contract": "PortfolioManager",
              "src": "contracts/PortfolioManager.sol:30"
            },
            {
              "label": "m2m",
              "offset": 0,
              "slot": "256",
              "type": "t_contract(IMark2Market)13801",
              "contract": "PortfolioManager",
              "src": "contracts/PortfolioManager.sol:31"
            },
            {
              "label": "totalRiskFactor",
              "offset": 0,
              "slot": "257",
              "type": "t_uint256",
              "contract": "PortfolioManager",
              "src": "contracts/PortfolioManager.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(StrategyWeight)13832_storage)dyn_storage": {
              "label": "struct IPortfolioManager.StrategyWeight[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)3124": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IMark2Market)13801": {
              "label": "contract IMark2Market",
              "numberOfBytes": "20"
            },
            "t_contract(IStrategy)14099": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(StrategyWeight)13832_storage": {
              "label": "struct IPortfolioManager.StrategyWeight",
              "members": [
                {
                  "label": "strategy",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "minWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "targetWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "maxWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "riskFactor",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "enabled",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "enabledReward",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/SionToken.sol:SionToken": {
        "src": "contracts/SionToken.sol:12",
        "version": {
          "withMetadata": "2e34d0cf95a694cdc5718779c4db7f38ebffe15f9b0d38e2866c7f51a861cfbf",
          "withoutMetadata": "6800019b8857797dd27c1fec573a0e997a7b00f08a26e5c884a3a436e4728a4b",
          "linkedWithoutMetadata": "6800019b8857797dd27c1fec573a0e997a7b00f08a26e5c884a3a436e4728a4b"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/WadRayMath.sol:WadRayMath",
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet"
        ],
        "methods": [
          "setExchanger(address)",
          "setLiquidityIndex(uint256)",
          "()",
          "initialize(string,string,uint8)",
          "setDecimals(uint8)",
          "setName(string)",
          "setSymbol(string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "balanceOf(address)",
          "scaledBalanceOf(address)",
          "totalSupply()",
          "totalMint()",
          "totalBurn()",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "scaledTotalSupply()",
          "ownerLength()",
          "ownerAt(uint256)",
          "ownerBalanceAt(uint256)",
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:21"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:23"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:25"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "254",
              "type": "t_string_storage",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:27"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "255",
              "type": "t_string_storage",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:28"
            },
            {
              "label": "_totalMint",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:34"
            },
            {
              "label": "_totalBurn",
              "offset": 0,
              "slot": "257",
              "type": "t_uint256",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:35"
            },
            {
              "label": "liquidityIndexChangeTime",
              "offset": 0,
              "slot": "258",
              "type": "t_uint256",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:37"
            },
            {
              "label": "liquidityIndex",
              "offset": 0,
              "slot": "259",
              "type": "t_uint256",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:38"
            },
            {
              "label": "liquidityIndexDenominator",
              "offset": 0,
              "slot": "260",
              "type": "t_uint256",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:39"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "261",
              "type": "t_struct(AddressSet)3664_storage",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:41"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "263",
              "type": "t_array(t_uint256)50_storage",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:43"
            },
            {
              "label": "exchange",
              "offset": 0,
              "slot": "313",
              "type": "t_address",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:45"
            },
            {
              "label": "_decimals",
              "offset": 20,
              "slot": "313",
              "type": "t_uint8",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)3664_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)3363_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)3363_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Strategy.sol:Strategy": {
        "src": "contracts/Strategy.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/libraries/TokenMath.sol:OvnMath"
        ],
        "methods": [
          "setPortfolioManager(address)",
          "setSlippages(uint256,uint256,uint256)",
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:ChainlinkLibrary": {
        "src": "contracts/connectors/Chainlink.sol:50",
        "version": {
          "withMetadata": "7cccaa7fd76280b78d7c678aa45479ba8298436b1f2bc65c0bd4edb78190d9a8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:IPriceFeed": {
        "src": "contracts/connectors/Chainlink.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "latestAnswer()",
          "latestTimestamp()",
          "latestRound()",
          "getAnswer(uint256)",
          "getTimestamp(uint256)",
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakePair": {
        "src": "contracts/connectors/PancakeV2.sol:149",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter01": {
        "src": "contracts/connectors/PancakeV2.sol:202",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter02": {
        "src": "contracts/connectors/PancakeV2.sol:296",
        "inherit": [
          "contracts/connectors/PancakeV2.sol:IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary": {
        "src": "contracts/connectors/PancakeV2.sol:6",
        "version": {
          "withMetadata": "3000d0a52084e9944ef4af7fc97727063b52aeda5b2db5f345162e60802a0006",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Thena.sol:IBribe": {
        "src": "contracts/connectors/Thena.sol:343",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_deposit(uint256,uint256)",
          "_withdraw(uint256,uint256)",
          "getRewardForOwner(uint256,address[])",
          "notifyRewardAmount(address,uint256)",
          "left(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Thena.sol:IGaugeV2": {
        "src": "contracts/connectors/Thena.sol:258",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isForPair()",
          "rewardToken()",
          "_VE()",
          "TOKEN()",
          "DISTRIBUTION()",
          "gaugeRewarder()",
          "internal_bribe()",
          "external_bribe()",
          "rewarderPid()",
          "DURATION()",
          "periodFinish()",
          "rewardRate()",
          "lastUpdateTime()",
          "rewardPerTokenStored()",
          "fees0()",
          "fees1()",
          "userRewardPerTokenPaid(address)",
          "rewards(address)",
          "_totalSupply()",
          "_balances(address)",
          "totalSupply()",
          "balanceOf(address)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "rewardForDuration()",
          "depositAll()",
          "deposit(uint256)",
          "withdrawAll()",
          "withdraw(uint256)",
          "withdrawAllAndHarvest()",
          "getReward()",
          "_periodFinish()",
          "claimFees()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Thena.sol:IPair": {
        "src": "contracts/connectors/Thena.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "stable()",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "factory()",
          "token0()",
          "token1()",
          "fees()",
          "reserve0()",
          "reserve1()",
          "blockTimestampLast()",
          "reserve0CumulativeLast()",
          "reserve1CumulativeLast()",
          "observationLength()",
          "lastObservation()",
          "metadata()",
          "tokens()",
          "isStable()",
          "claimFees()",
          "claimStakingFees()",
          "getReserves()",
          "currentCumulativePrices()",
          "current(address,uint256)",
          "quote(address,uint256,uint256)",
          "prices(address,uint256,uint256)",
          "sample(address,uint256,uint256,uint256)",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "getAmountOut(uint256,address)",
          "approve(address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Thena.sol:IRouter": {
        "src": "contracts/connectors/Thena.sol:116",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "weth()",
          "pairCodeHash()",
          "sortTokens(address,address)",
          "pairFor(address,address,bool)",
          "getReserves(address,address,bool)",
          "getAmountOut(uint256,address,address)",
          "getAmountsOut(uint256,struct IRouter.route[])",
          "isPair(address)",
          "quoteAddLiquidity(address,address,bool,uint256,uint256)",
          "quoteRemoveLiquidity(address,address,bool,uint256)",
          "addLiquidity(address,address,bool,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,bool,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,bool,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,bool,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,bool,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,bool,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSimple(uint256,uint256,address,address,bool,address,uint256)",
          "swapExactTokensForTokens(uint256,uint256,struct IRouter.route[],address,uint256)",
          "swapExactETHForTokens(uint256,struct IRouter.route[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,struct IRouter.route[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Thena.sol:ThenaLibrary": {
        "src": "contracts/connectors/Thena.sol:352",
        "version": {
          "withMetadata": "78a7d94e05a882510ba82494b072a097d429879183e53ed7d9bf513708738065",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "hardhat/console.sol:console"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Venus.sol:IWbnb": {
        "src": "contracts/connectors/Venus.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Venus.sol:InterestRateModel": {
        "src": "contracts/connectors/Venus.sol:23",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBorrowRate(uint256,uint256,uint256)",
          "getSupplyRate(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Venus.sol:Maximillion": {
        "src": "contracts/connectors/Venus.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "repayBehalfExplicit(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Venus.sol:Unitroller": {
        "src": "contracts/connectors/Venus.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enterMarkets(address[])",
          "claimVenus(address,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Venus.sol:VBep20Interface": {
        "src": "contracts/connectors/Venus.sol:48",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint(uint256)",
          "mintBehalf(address,uint256)",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow(uint256)",
          "repayBorrowBehalf(address,uint256)",
          "liquidateBorrow(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "underlying",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "VBep20Interface",
              "src": "contracts/connectors/Venus.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Venus.sol:VTokenInterface": {
        "src": "contracts/connectors/Venus.sol:66",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)",
          "balanceOf(address)",
          "balanceOfUnderlying(address)",
          "getAccountSnapshot(address)",
          "borrowRatePerBlock()",
          "supplyRatePerBlock()",
          "totalBorrowsCurrent()",
          "borrowBalanceCurrent(address)",
          "borrowBalanceStored(address)",
          "exchangeRateCurrent()",
          "exchangeRateStored()",
          "getCash()",
          "accrueInterest()",
          "seize(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_notEntered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:70"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:75"
            },
            {
              "label": "symbol",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:80"
            },
            {
              "label": "decimals",
              "offset": 0,
              "slot": "3",
              "type": "t_uint8",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:85"
            },
            {
              "label": "admin",
              "offset": 1,
              "slot": "3",
              "type": "t_address_payable",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:101"
            },
            {
              "label": "pendingAdmin",
              "offset": 0,
              "slot": "4",
              "type": "t_address_payable",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:106"
            },
            {
              "label": "interestRateModel",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(InterestRateModel)11887",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:111"
            },
            {
              "label": "initialExchangeRateMantissa",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:116"
            },
            {
              "label": "reserveFactorMantissa",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:121"
            },
            {
              "label": "accrualBlockNumber",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:126"
            },
            {
              "label": "borrowIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:131"
            },
            {
              "label": "totalBorrows",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:136"
            },
            {
              "label": "totalReserves",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:141"
            },
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:146"
            },
            {
              "label": "accountTokens",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:151"
            },
            {
              "label": "transferAllowances",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:156"
            },
            {
              "label": "accountBorrows",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(BorrowSnapshot)12024_storage)",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:171"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(InterestRateModel)11887": {
              "label": "contract InterestRateModel",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(BorrowSnapshot)12024_storage)": {
              "label": "mapping(address => struct VTokenInterface.BorrowSnapshot)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(BorrowSnapshot)12024_storage": {
              "label": "struct VTokenInterface.BorrowSnapshot",
              "members": [
                {
                  "label": "principal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "interestIndex",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Venus.sol:VenusInterface": {
        "src": "contracts/connectors/Venus.sol:194",
        "inherit": [
          "contracts/connectors/Venus.sol:VTokenInterface",
          "contracts/connectors/Venus.sol:VBep20Interface"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "underlying",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "VBep20Interface",
              "src": "contracts/connectors/Venus.sol:53"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:70"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:75"
            },
            {
              "label": "symbol",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:80"
            },
            {
              "label": "decimals",
              "offset": 0,
              "slot": "3",
              "type": "t_uint8",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:85"
            },
            {
              "label": "admin",
              "offset": 1,
              "slot": "3",
              "type": "t_address_payable",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:101"
            },
            {
              "label": "pendingAdmin",
              "offset": 0,
              "slot": "4",
              "type": "t_address_payable",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:106"
            },
            {
              "label": "interestRateModel",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(InterestRateModel)11887",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:111"
            },
            {
              "label": "initialExchangeRateMantissa",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:116"
            },
            {
              "label": "reserveFactorMantissa",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:121"
            },
            {
              "label": "accrualBlockNumber",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:126"
            },
            {
              "label": "borrowIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:131"
            },
            {
              "label": "totalBorrows",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:136"
            },
            {
              "label": "totalReserves",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:141"
            },
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:146"
            },
            {
              "label": "accountTokens",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:151"
            },
            {
              "label": "transferAllowances",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:156"
            },
            {
              "label": "accountBorrows",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(BorrowSnapshot)12024_storage)",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:171"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(InterestRateModel)11887": {
              "label": "contract InterestRateModel",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(BorrowSnapshot)12024_storage)": {
              "label": "mapping(address => struct VTokenInterface.BorrowSnapshot)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(BorrowSnapshot)12024_storage": {
              "label": "struct VTokenInterface.BorrowSnapshot",
              "members": [
                {
                  "label": "principal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "interestIndex",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IMasterWombatV2": {
        "src": "contracts/connectors/Wombat.sol:105",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(uint256,address)",
          "getAssetPid(address)",
          "poolLength()",
          "pendingTokens(uint256,address)",
          "rewarderBonusTokenInfo(uint256)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "multiClaim(uint256[])",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "migrate(uint256[])",
          "depositFor(uint256,uint256,address)",
          "updateFactor(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatAsset": {
        "src": "contracts/connectors/Wombat.sol:72",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlyingToken()",
          "pool()",
          "cash()",
          "liability()",
          "decimals()",
          "underlyingTokenDecimals()",
          "setPool(address)",
          "underlyingTokenBalance()",
          "transferUnderlyingToken(address,uint256)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "addCash(uint256)",
          "removeCash(uint256)",
          "addLiability(uint256)",
          "removeLiability(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatPool": {
        "src": "contracts/connectors/Wombat.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokens()",
          "addressOfAsset(address)",
          "deposit(address,uint256,uint256,address,uint256,bool)",
          "withdraw(address,uint256,uint256,address,uint256)",
          "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)",
          "swap(address,address,uint256,uint256,address,uint256)",
          "quotePotentialDeposit(address,uint256)",
          "quotePotentialSwap(address,address,int256)",
          "quotePotentialWithdraw(address,uint256)",
          "quoteAmountIn(address,address,int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatRouter": {
        "src": "contracts/connectors/Wombat.sol:157",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountOut(address[],address[],int256)",
          "getAmountIn(address[],address[],uint256)",
          "swapExactTokensForTokens(address[],address[],uint256,uint256,address,uint256)",
          "swapExactNativeForTokens(address[],address[],uint256,address,uint256)",
          "swapExactTokensForNative(address[],address[],uint256,uint256,address,uint256)",
          "addLiquidityNative(address,uint256,address,uint256,bool)",
          "removeLiquidityNative(address,uint256,uint256,address,uint256)",
          "removeLiquidityFromOtherAssetAsNative(address,address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:WombatLibrary": {
        "src": "contracts/connectors/Wombat.sol:229",
        "version": {
          "withMetadata": "fded46865ae65c4a512ed814b08160c4d331ea14d354d194aa759a5d567106b1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBaseRewardPool": {
        "src": "contracts/connectors/Wombex.sol:21",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "totalAssets()",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "maxMint(address)",
          "previewMint(uint256)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "lastTimeRewardApplicable(address)",
          "rewardPerToken(address)",
          "earned(address,address)",
          "claimableRewards(address)",
          "stake(uint256)",
          "stakeAll()",
          "stakeFor(address,uint256)",
          "withdraw(uint256,bool)",
          "withdrawAll(bool)",
          "withdrawAndUnwrap(uint256,bool)",
          "withdrawAllAndUnwrap(bool)",
          "getReward(address,bool)",
          "getReward()",
          "donate(address,uint256)",
          "processIdleRewards()",
          "rewardTokensLen()",
          "rewardTokensList()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBooster": {
        "src": "contracts/connectors/Wombex.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexPoolDepositor": {
        "src": "contracts/connectors/Wombex.sol:188",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256,bool)",
          "withdraw(address,uint256,uint256,address)",
          "getDepositAmountOut(address,uint256)",
          "getWithdrawAmountOut(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexVault": {
        "src": "contracts/connectors/Wombex.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "withdrawAndUnwrap(uint256,bool)",
          "getReward(address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IBlockGetter.sol:IBlockGetter": {
        "src": "contracts/interfaces/IBlockGetter.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getNumber()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IControlRole.sol:IControlRole": {
        "src": "contracts/interfaces/IControlRole.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IExchange.sol:IExchange": {
        "src": "contracts/interfaces/IExchange.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyFee()",
          "buyFeeDenominator()",
          "redeemFee()",
          "redeemFeeDenominator()",
          "balance()",
          "mint((address,uint256,string))",
          "buy(address,uint256)",
          "redeem(address,uint256)",
          "payout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IHedgeExchanger.sol:IHedgeExchanger": {
        "src": "contracts/interfaces/IHedgeExchanger.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buy(uint256,string)",
          "redeem(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IHedgeStrategy.sol:IHedgeStrategy": {
        "src": "contracts/interfaces/IHedgeStrategy.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(uint256)",
          "unstake(uint256,address)",
          "netAssetValue()",
          "claimRewards(address)",
          "balance(uint256)",
          "balancePosition()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IInsuranceExchange.sol:IInsuranceExchange": {
        "src": "contracts/interfaces/IInsuranceExchange.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint((uint256))",
          "redeem((uint256))",
          "payout()",
          "premium(uint256)",
          "compensate(uint256,address)",
          "requestWithdraw()",
          "checkWithdraw()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IMark2Market.sol:IMark2Market": {
        "src": "contracts/interfaces/IMark2Market.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "strategyAssets()",
          "totalNetAssets()",
          "totalLiquidationAssets()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IPayoutListener.sol:IPayoutListener": {
        "src": "contracts/interfaces/IPayoutListener.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "payoutDone()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IPortfolioManager.sol:IPortfolioManager": {
        "src": "contracts/interfaces/IPortfolioManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)",
          "getStrategyWeight(address)",
          "getAllStrategyWeights()",
          "claimAndBalance()",
          "balance()",
          "getTotalRiskFactor()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IRebaseToken.sol:IRebaseToken": {
        "src": "contracts/interfaces/IRebaseToken.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "liquidityIndex()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "balanceOf(address)",
          "scaledBalanceOf(address)",
          "totalSupply()",
          "totalMint()",
          "totalBurn()",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "scaledTotalSupply()",
          "ownerLength()",
          "ownerAt(uint256)",
          "ownerBalanceAt(uint256)",
          "setLiquidityIndex(uint256)",
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/interfaces/IStrategy.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "netAssetValue()",
          "liquidationValue()",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IUsdPlusToken.sol:IUsdPlusToken": {
        "src": "contracts/interfaces/IUsdPlusToken.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "liquidityIndex()",
          "exchange()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "balanceOf(address)",
          "scaledBalanceOf(address)",
          "totalSupply()",
          "totalMint()",
          "totalBurn()",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "scaledTotalSupply()",
          "ownerLength()",
          "ownerAt(uint256)",
          "ownerBalanceAt(uint256)",
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IWETH.sol:IWETH": {
        "src": "contracts/interfaces/IWETH.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/libraries/Babylonian.sol:Babylonian": {
        "src": "contracts/libraries/Babylonian.sol:8",
        "version": {
          "withMetadata": "0033338df56ab6e808597cb000d981b9ab259d06b8a3035c7cbf5731a8aea87c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/libraries/TokenMath.sol:OvnMath": {
        "src": "contracts/libraries/TokenMath.sol:4",
        "version": {
          "withMetadata": "c334a4703093078355fb94af80b3406193a520514b7ca3965d70f13389a62103",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/libraries/WadRayMath.sol:WadRayMath": {
        "src": "contracts/libraries/WadRayMath.sol:9",
        "version": {
          "withMetadata": "b1f82aba0e7223a490bb5463f72ec0abec6d741e0cf425f34a7d740960f69cba",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:StrategyThenaUsdtUsdPlus": {
        "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:10",
        "version": {
          "withMetadata": "5f4d211235e9ada98ebde4a0a5f713e6462fcb90ab1b5d3dc9feeb376fc8a53a",
          "withoutMetadata": "44cdad4b1cb16df42b1afa5ca898a2e3b8a13a1dceddf80e14727522cbf6a53e",
          "linkedWithoutMetadata": "44cdad4b1cb16df42b1afa5ca898a2e3b8a13a1dceddf80e14727522cbf6a53e"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "hardhat/console.sol:console",
          "contracts/connectors/Thena.sol:ThenaLibrary",
          "contracts/libraries/TokenMath.sol:OvnMath",
          "contracts/connectors/Wombat.sol:WombatLibrary"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address,address,address))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "busd",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:29"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:30"
            },
            {
              "label": "usdPlus",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:31"
            },
            {
              "label": "the",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:32"
            },
            {
              "label": "pair",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IPair)10762",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:34"
            },
            {
              "label": "router",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IRouter)11112",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:35"
            },
            {
              "label": "gauge",
              "offset": 0,
              "slot": "307",
              "type": "t_contract(IGaugeV2)11299",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:36"
            },
            {
              "label": "wombatPool",
              "offset": 0,
              "slot": "308",
              "type": "t_address",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:37"
            },
            {
              "label": "wombatRouter",
              "offset": 0,
              "slot": "309",
              "type": "t_contract(IWombatRouter)12650",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:39"
            },
            {
              "label": "oracleBusd",
              "offset": 0,
              "slot": "310",
              "type": "t_contract(IPriceFeed)9231",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:41"
            },
            {
              "label": "oracleUsdt",
              "offset": 0,
              "slot": "311",
              "type": "t_contract(IPriceFeed)9231",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:42"
            },
            {
              "label": "busdDm",
              "offset": 0,
              "slot": "312",
              "type": "t_uint256",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:44"
            },
            {
              "label": "usdtDm",
              "offset": 0,
              "slot": "313",
              "type": "t_uint256",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:45"
            },
            {
              "label": "hay",
              "offset": 0,
              "slot": "314",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:47"
            },
            {
              "label": "usdPlusDm",
              "offset": 0,
              "slot": "315",
              "type": "t_uint256",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:48"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)3124": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IGaugeV2)11299": {
              "label": "contract IGaugeV2",
              "numberOfBytes": "20"
            },
            "t_contract(IPair)10762": {
              "label": "contract IPair",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)9231": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_contract(IRouter)11112": {
              "label": "contract IRouter",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatRouter)12650": {
              "label": "contract IWombatRouter",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyThenawUsdrUsdc.sol:StrategyThenawUsdrUsdc": {
        "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:11",
        "version": {
          "withMetadata": "a3a0f0f40336d72a1a66121ef0c9196fbdbed1b02b1afc1be37778b670499276",
          "withoutMetadata": "c6b4557929474120f6b3aae61873ea2ecb08d8295448f92259a5ab3e178307a8",
          "linkedWithoutMetadata": "c6b4557929474120f6b3aae61873ea2ecb08d8295448f92259a5ab3e178307a8"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/connectors/Chainlink.sol:ChainlinkLibrary",
          "contracts/libraries/TokenMath.sol:OvnMath",
          "contracts/connectors/Wombat.sol:WombatLibrary",
          "contracts/connectors/Thena.sol:ThenaLibrary",
          "hardhat/console.sol:console"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address,address,address,address,address,string))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "busd",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:33"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:34"
            },
            {
              "label": "wUsdr",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:35"
            },
            {
              "label": "the",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:36"
            },
            {
              "label": "pair",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IPair)10762",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:39"
            },
            {
              "label": "router",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IRouter)11112",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:40"
            },
            {
              "label": "gauge",
              "offset": 0,
              "slot": "307",
              "type": "t_contract(IGaugeV2)11299",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:41"
            },
            {
              "label": "wombatPool",
              "offset": 0,
              "slot": "308",
              "type": "t_address",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:42"
            },
            {
              "label": "wombatRouter",
              "offset": 0,
              "slot": "309",
              "type": "t_contract(IWombatRouter)12650",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:44"
            },
            {
              "label": "oracleBusd",
              "offset": 0,
              "slot": "310",
              "type": "t_contract(IPriceFeed)9231",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:46"
            },
            {
              "label": "oracleUsdc",
              "offset": 0,
              "slot": "311",
              "type": "t_contract(IPriceFeed)9231",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:47"
            },
            {
              "label": "busdDm",
              "offset": 0,
              "slot": "312",
              "type": "t_uint256",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:49"
            },
            {
              "label": "usdcDm",
              "offset": 0,
              "slot": "313",
              "type": "t_uint256",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:50"
            },
            {
              "label": "wUsdrDm",
              "offset": 0,
              "slot": "314",
              "type": "t_uint256",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:52"
            },
            {
              "label": "usdtDm",
              "offset": 0,
              "slot": "315",
              "type": "t_uint256",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:53"
            },
            {
              "label": "oracleUsdt",
              "offset": 0,
              "slot": "316",
              "type": "t_contract(IPriceFeed)9231",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:55"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "317",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:56"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "318",
              "type": "t_string_storage",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:57"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)3124": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IGaugeV2)11299": {
              "label": "contract IGaugeV2",
              "numberOfBytes": "20"
            },
            "t_contract(IPair)10762": {
              "label": "contract IPair",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)9231": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_contract(IRouter)11112": {
              "label": "contract IRouter",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatRouter)12650": {
              "label": "contract IWombatRouter",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyVenusBusd.sol:StrategyVenusBusd": {
        "src": "contracts/strategies/StrategyVenusBusd.sol:9",
        "version": {
          "withMetadata": "786a62b44e0259651d1d1f35922655c050867041d154aeb8046470f4f144b239",
          "withoutMetadata": "a72c08fdb277ec85545f419c6520e97f81b24d756605ee7403438ba1cfe38843",
          "linkedWithoutMetadata": "a72c08fdb277ec85545f419c6520e97f81b24d756605ee7403438ba1cfe38843"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "hardhat/console.sol:console",
          "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "busdToken",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyVenusBusd",
              "src": "contracts/strategies/StrategyVenusBusd.sol:25"
            },
            {
              "label": "vBusdToken",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(VenusInterface)12161",
              "contract": "StrategyVenusBusd",
              "src": "contracts/strategies/StrategyVenusBusd.sol:26"
            },
            {
              "label": "unitroller",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(Unitroller)11838",
              "contract": "StrategyVenusBusd",
              "src": "contracts/strategies/StrategyVenusBusd.sol:27"
            },
            {
              "label": "pancakeRouter",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IPancakeRouter02)10443",
              "contract": "StrategyVenusBusd",
              "src": "contracts/strategies/StrategyVenusBusd.sol:28"
            },
            {
              "label": "xvsToken",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyVenusBusd",
              "src": "contracts/strategies/StrategyVenusBusd.sol:29"
            },
            {
              "label": "wbnbToken",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyVenusBusd",
              "src": "contracts/strategies/StrategyVenusBusd.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)3124": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IPancakeRouter02)10443": {
              "label": "contract IPancakeRouter02",
              "numberOfBytes": "20"
            },
            "t_contract(Unitroller)11838": {
              "label": "contract Unitroller",
              "numberOfBytes": "20"
            },
            "t_contract(VenusInterface)12161": {
              "label": "contract VenusInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyWombexBusd.sol:StrategyWombexBusd": {
        "src": "contracts/strategies/StrategyWombexBusd.sol:11",
        "version": {
          "withMetadata": "4988e63f8b68d0f53044c4ff7cf1c9bd9a026961ca2957349ad2fb776a9f63c4",
          "withoutMetadata": "181108071b45d485d8d53652b725d65fc7e6c4aa15a271e9209c4e74333fc399",
          "linkedWithoutMetadata": "181108071b45d485d8d53652b725d65fc7e6c4aa15a271e9209c4e74333fc399"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/libraries/TokenMath.sol:OvnMath",
          "contracts/connectors/Wombat.sol:WombatLibrary",
          "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary",
          "hardhat/console.sol:console",
          "contracts/connectors/Chainlink.sol:ChainlinkLibrary"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address,address,address,address,address))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "busd",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:33"
            },
            {
              "label": "wom",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:34"
            },
            {
              "label": "wmx",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:35"
            },
            {
              "label": "lpBusd",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IWombatAsset)12378",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:37"
            },
            {
              "label": "wmxLpBusd",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IWombexBaseRewardPool)13517",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:38"
            },
            {
              "label": "poolDepositor",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IWombexPoolDepositor)13562",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:39"
            },
            {
              "label": "pool",
              "offset": 0,
              "slot": "307",
              "type": "t_address",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:40"
            },
            {
              "label": "pancakeRouter",
              "offset": 0,
              "slot": "308",
              "type": "t_contract(IPancakeRouter02)10443",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:42"
            },
            {
              "label": "lpBusdDm",
              "offset": 0,
              "slot": "309",
              "type": "t_uint256",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:44"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "310",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:46"
            },
            {
              "label": "wombatRouter",
              "offset": 0,
              "slot": "311",
              "type": "t_contract(IWombatRouter)12650",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:48"
            },
            {
              "label": "oracleUsdc",
              "offset": 0,
              "slot": "312",
              "type": "t_contract(IPriceFeed)9231",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:50"
            },
            {
              "label": "oracleBusd",
              "offset": 0,
              "slot": "313",
              "type": "t_contract(IPriceFeed)9231",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:51"
            },
            {
              "label": "usdcDm",
              "offset": 0,
              "slot": "314",
              "type": "t_uint256",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:53"
            },
            {
              "label": "busdDm",
              "offset": 0,
              "slot": "315",
              "type": "t_uint256",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:54"
            },
            {
              "label": "usdtDm",
              "offset": 0,
              "slot": "316",
              "type": "t_uint256",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:55"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "317",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:57"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)3124": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IPancakeRouter02)10443": {
              "label": "contract IPancakeRouter02",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)9231": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatAsset)12378": {
              "label": "contract IWombatAsset",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatRouter)12650": {
              "label": "contract IWombatRouter",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexBaseRewardPool)13517": {
              "label": "contract IWombexBaseRewardPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexPoolDepositor)13562": {
              "label": "contract IWombexPoolDepositor",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyWombexUsdt+.sol:StrategyWombexUsdtPlus": {
        "src": "contracts/strategies/StrategyWombexUsdt+.sol:11",
        "version": {
          "withMetadata": "f49ded3e854c286721ddf29706edffce63265cf91badcc952ae03e8f4007bf5b",
          "withoutMetadata": "6c4aa535861d059044b66b974e1a84734612cb1519a9e84e917d4e9f26b4cbd6",
          "linkedWithoutMetadata": "6c4aa535861d059044b66b974e1a84734612cb1519a9e84e917d4e9f26b4cbd6"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "hardhat/console.sol:console",
          "contracts/connectors/Wombat.sol:WombatLibrary",
          "contracts/libraries/TokenMath.sol:OvnMath",
          "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary",
          "contracts/connectors/Chainlink.sol:ChainlinkLibrary"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address,address,address,address,string))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:33"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:34"
            },
            {
              "label": "usdtPlus",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:35"
            },
            {
              "label": "wom",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:36"
            },
            {
              "label": "wmx",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:37"
            },
            {
              "label": "lpUsdtPlus",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IWombatAsset)12378",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:39"
            },
            {
              "label": "wmxLpUsdtPlus",
              "offset": 0,
              "slot": "307",
              "type": "t_contract(IWombexBaseRewardPool)13517",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:40"
            },
            {
              "label": "poolDepositor",
              "offset": 0,
              "slot": "308",
              "type": "t_contract(IWombexPoolDepositor)13562",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:41"
            },
            {
              "label": "pool",
              "offset": 0,
              "slot": "309",
              "type": "t_address",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:42"
            },
            {
              "label": "pancakeRouter",
              "offset": 0,
              "slot": "310",
              "type": "t_contract(IPancakeRouter02)10443",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:44"
            },
            {
              "label": "lpUsdtDm",
              "offset": 0,
              "slot": "311",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:46"
            },
            {
              "label": "wombatRouter",
              "offset": 0,
              "slot": "312",
              "type": "t_contract(IWombatRouter)12650",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:49"
            },
            {
              "label": "oracleUsdt",
              "offset": 0,
              "slot": "313",
              "type": "t_contract(IPriceFeed)9231",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:51"
            },
            {
              "label": "usdtDm",
              "offset": 0,
              "slot": "314",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:53"
            },
            {
              "label": "usdtPlusDm",
              "offset": 0,
              "slot": "315",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:54"
            },
            {
              "label": "lpUsdtPlusDm",
              "offset": 0,
              "slot": "316",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:55"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "317",
              "type": "t_string_storage",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)3124": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IPancakeRouter02)10443": {
              "label": "contract IPancakeRouter02",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)9231": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatAsset)12378": {
              "label": "contract IWombatAsset",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatRouter)12650": {
              "label": "contract IWombatRouter",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexBaseRewardPool)13517": {
              "label": "contract IWombexBaseRewardPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexPoolDepositor)13562": {
              "label": "contract IWombexPoolDepositor",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyWombexUsdt.sol:StrategyWombexUsdt": {
        "src": "contracts/strategies/StrategyWombexUsdt.sol:11",
        "version": {
          "withMetadata": "96784a92dedcc9e6a92c3c1493dd8ab64a341e33101fca1c6153d13414c26812",
          "withoutMetadata": "0b45e744bcf376406bb63e776db7d78a0ca59e95282c0c4e2f01019f074022ea",
          "linkedWithoutMetadata": "0b45e744bcf376406bb63e776db7d78a0ca59e95282c0c4e2f01019f074022ea"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/libraries/TokenMath.sol:OvnMath",
          "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address,address,address,string))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:32"
            },
            {
              "label": "wom",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:34"
            },
            {
              "label": "wmx",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:35"
            },
            {
              "label": "lpUsdt",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IWombatAsset)12378",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:37"
            },
            {
              "label": "wmxLpUsdt",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IWombexBaseRewardPool)13517",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:38"
            },
            {
              "label": "poolDepositor",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IWombexPoolDepositor)13562",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:39"
            },
            {
              "label": "pool",
              "offset": 0,
              "slot": "307",
              "type": "t_address",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:40"
            },
            {
              "label": "pancakeRouter",
              "offset": 0,
              "slot": "308",
              "type": "t_contract(IPancakeRouter02)10443",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:41"
            },
            {
              "label": "wombatRouter",
              "offset": 0,
              "slot": "309",
              "type": "t_contract(IWombatRouter)12650",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:42"
            },
            {
              "label": "oracleBusd",
              "offset": 0,
              "slot": "310",
              "type": "t_contract(IPriceFeed)9231",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:43"
            },
            {
              "label": "oracleUsdt",
              "offset": 0,
              "slot": "311",
              "type": "t_contract(IPriceFeed)9231",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:44"
            },
            {
              "label": "usdtDm",
              "offset": 0,
              "slot": "312",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:45"
            },
            {
              "label": "lpUsdtDm",
              "offset": 0,
              "slot": "313",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:46"
            },
            {
              "label": "busd",
              "offset": 0,
              "slot": "314",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:48"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "315",
              "type": "t_string_storage",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)3124": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IPancakeRouter02)10443": {
              "label": "contract IPancakeRouter02",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)9231": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatAsset)12378": {
              "label": "contract IWombatAsset",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatRouter)12650": {
              "label": "contract IWombatRouter",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexBaseRewardPool)13517": {
              "label": "contract IWombexBaseRewardPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexPoolDepositor)13562": {
              "label": "contract IWombexPoolDepositor",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyWombexUsdtMim.sol:StrategyWombexUsdtMim": {
        "src": "contracts/strategies/StrategyWombexUsdtMim.sol:10",
        "version": {
          "withMetadata": "a0d34c3698a7e8e873bd0b89d18ccddb54c55a9431f26c94358f4100923fe6ca",
          "withoutMetadata": "dd795541f24001af279be6807a24a5d957d0f54b8f1e73a275a1999d2fe5c888",
          "linkedWithoutMetadata": "dd795541f24001af279be6807a24a5d957d0f54b8f1e73a275a1999d2fe5c888"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/libraries/TokenMath.sol:OvnMath",
          "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyWombexUsdtMim",
              "src": "contracts/strategies/StrategyWombexUsdtMim.sol:28"
            },
            {
              "label": "busd",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyWombexUsdtMim",
              "src": "contracts/strategies/StrategyWombexUsdtMim.sol:29"
            },
            {
              "label": "wom",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyWombexUsdtMim",
              "src": "contracts/strategies/StrategyWombexUsdtMim.sol:30"
            },
            {
              "label": "wmx",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IERC20)3124",
              "contract": "StrategyWombexUsdtMim",
              "src": "contracts/strategies/StrategyWombexUsdtMim.sol:31"
            },
            {
              "label": "lpUsdt",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IWombatAsset)12378",
              "contract": "StrategyWombexUsdtMim",
              "src": "contracts/strategies/StrategyWombexUsdtMim.sol:33"
            },
            {
              "label": "wmxLpUsdt",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IWombexBaseRewardPool)13517",
              "contract": "StrategyWombexUsdtMim",
              "src": "contracts/strategies/StrategyWombexUsdtMim.sol:34"
            },
            {
              "label": "poolDepositor",
              "offset": 0,
              "slot": "307",
              "type": "t_contract(IWombexPoolDepositor)13562",
              "contract": "StrategyWombexUsdtMim",
              "src": "contracts/strategies/StrategyWombexUsdtMim.sol:35"
            },
            {
              "label": "pool",
              "offset": 0,
              "slot": "308",
              "type": "t_address",
              "contract": "StrategyWombexUsdtMim",
              "src": "contracts/strategies/StrategyWombexUsdtMim.sol:36"
            },
            {
              "label": "pancakeRouter",
              "offset": 0,
              "slot": "309",
              "type": "t_contract(IPancakeRouter02)10443",
              "contract": "StrategyWombexUsdtMim",
              "src": "contracts/strategies/StrategyWombexUsdtMim.sol:38"
            },
            {
              "label": "lpUsdtDm",
              "offset": 0,
              "slot": "310",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtMim",
              "src": "contracts/strategies/StrategyWombexUsdtMim.sol:40"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)3124": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IPancakeRouter02)10443": {
              "label": "contract IPancakeRouter02",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatAsset)12378": {
              "label": "contract IWombatAsset",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexBaseRewardPool)13517": {
              "label": "contract IWombexBaseRewardPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexPoolDepositor)13562": {
              "label": "contract IWombexPoolDepositor",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "11dd6dc76097d36a942a70d2c126eb47bfe7dddb77078c805502f622dcf91b57",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "97ff9e065964bce249812dcca274af1d22161a47c8f083420e66690ceec47cde",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "57b0ff8e0b23b60b733c18a8d52fd2be04db1e06a971e4ac1e51bc7d70228fa9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "c105f9515d64744a1b37b5b09a5d5adfc3cc8c95f0c92b9cb23f1ff8e9e66927",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "9ddb95611794df92ed7f51febd0169b9cdd934bc35cdacd27e0ec2429297c49e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Strategy.sol:Strategy": {
        "src": "contracts/Strategy.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/libraries/TokenMath.sol:OvnMath"
        ],
        "methods": [
          "setPortfolioManager(address)",
          "setSlippages(uint256,uint256,uint256)",
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:ChainlinkLibrary": {
        "src": "contracts/connectors/Chainlink.sol:50",
        "version": {
          "withMetadata": "7cccaa7fd76280b78d7c678aa45479ba8298436b1f2bc65c0bd4edb78190d9a8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:IPriceFeed": {
        "src": "contracts/connectors/Chainlink.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "latestAnswer()",
          "latestTimestamp()",
          "latestRound()",
          "getAnswer(uint256)",
          "getTimestamp(uint256)",
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakePair": {
        "src": "contracts/connectors/PancakeV2.sol:149",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter01": {
        "src": "contracts/connectors/PancakeV2.sol:202",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter02": {
        "src": "contracts/connectors/PancakeV2.sol:296",
        "inherit": [
          "contracts/connectors/PancakeV2.sol:IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary": {
        "src": "contracts/connectors/PancakeV2.sol:6",
        "version": {
          "withMetadata": "3000d0a52084e9944ef4af7fc97727063b52aeda5b2db5f345162e60802a0006",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IMasterWombatV2": {
        "src": "contracts/connectors/Wombat.sol:105",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(uint256,address)",
          "getAssetPid(address)",
          "poolLength()",
          "pendingTokens(uint256,address)",
          "rewarderBonusTokenInfo(uint256)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "multiClaim(uint256[])",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "migrate(uint256[])",
          "depositFor(uint256,uint256,address)",
          "updateFactor(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatAsset": {
        "src": "contracts/connectors/Wombat.sol:72",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlyingToken()",
          "pool()",
          "cash()",
          "liability()",
          "decimals()",
          "underlyingTokenDecimals()",
          "setPool(address)",
          "underlyingTokenBalance()",
          "transferUnderlyingToken(address,uint256)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "addCash(uint256)",
          "removeCash(uint256)",
          "addLiability(uint256)",
          "removeLiability(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatPool": {
        "src": "contracts/connectors/Wombat.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokens()",
          "addressOfAsset(address)",
          "deposit(address,uint256,uint256,address,uint256,bool)",
          "withdraw(address,uint256,uint256,address,uint256)",
          "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)",
          "swap(address,address,uint256,uint256,address,uint256)",
          "quotePotentialDeposit(address,uint256)",
          "quotePotentialSwap(address,address,int256)",
          "quotePotentialWithdraw(address,uint256)",
          "quoteAmountIn(address,address,int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatRouter": {
        "src": "contracts/connectors/Wombat.sol:157",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountOut(address[],address[],int256)",
          "getAmountIn(address[],address[],uint256)",
          "swapExactTokensForTokens(address[],address[],uint256,uint256,address,uint256)",
          "swapExactNativeForTokens(address[],address[],uint256,address,uint256)",
          "swapExactTokensForNative(address[],address[],uint256,uint256,address,uint256)",
          "addLiquidityNative(address,uint256,address,uint256,bool)",
          "removeLiquidityNative(address,uint256,uint256,address,uint256)",
          "removeLiquidityFromOtherAssetAsNative(address,address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:WombatLibrary": {
        "src": "contracts/connectors/Wombat.sol:229",
        "version": {
          "withMetadata": "fded46865ae65c4a512ed814b08160c4d331ea14d354d194aa759a5d567106b1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBaseRewardPool": {
        "src": "contracts/connectors/Wombex.sol:21",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "totalAssets()",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "maxMint(address)",
          "previewMint(uint256)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "lastTimeRewardApplicable(address)",
          "rewardPerToken(address)",
          "earned(address,address)",
          "claimableRewards(address)",
          "stake(uint256)",
          "stakeAll()",
          "stakeFor(address,uint256)",
          "withdraw(uint256,bool)",
          "withdrawAll(bool)",
          "withdrawAndUnwrap(uint256,bool)",
          "withdrawAllAndUnwrap(bool)",
          "getReward(address,bool)",
          "getReward()",
          "donate(address,uint256)",
          "processIdleRewards()",
          "rewardTokensLen()",
          "rewardTokensList()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBooster": {
        "src": "contracts/connectors/Wombex.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexPoolDepositor": {
        "src": "contracts/connectors/Wombex.sol:188",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256,bool)",
          "withdraw(address,uint256,uint256,address)",
          "getDepositAmountOut(address,uint256)",
          "getWithdrawAmountOut(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexVault": {
        "src": "contracts/connectors/Wombex.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "withdrawAndUnwrap(uint256,bool)",
          "getReward(address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IControlRole.sol:IControlRole": {
        "src": "contracts/interfaces/IControlRole.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/interfaces/IStrategy.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "netAssetValue()",
          "liquidationValue()",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/libraries/TokenMath.sol:OvnMath": {
        "src": "contracts/libraries/TokenMath.sol:4",
        "version": {
          "withMetadata": "c334a4703093078355fb94af80b3406193a520514b7ca3965d70f13389a62103",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyWombexUsdt+.sol:StrategyWombexUsdtPlus": {
        "src": "contracts/strategies/StrategyWombexUsdt+.sol:11",
        "version": {
          "withMetadata": "184d1d29905926c7d60bafe4e14dff5b2e8ec3681d46df948567abafa9618b27",
          "withoutMetadata": "1f80c832e8436a5995704d7a41db9290b92ff7da2ab860172bc6eb1f0f97440f",
          "linkedWithoutMetadata": "1f80c832e8436a5995704d7a41db9290b92ff7da2ab860172bc6eb1f0f97440f"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "hardhat/console.sol:console",
          "contracts/connectors/Wombat.sol:WombatLibrary",
          "contracts/libraries/TokenMath.sol:OvnMath",
          "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary",
          "contracts/connectors/Chainlink.sol:ChainlinkLibrary"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address,address,address,address,string))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:33"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:34"
            },
            {
              "label": "usdtPlus",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:35"
            },
            {
              "label": "wom",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:36"
            },
            {
              "label": "wmx",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:37"
            },
            {
              "label": "lpUsdtPlus",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IWombatAsset)4595",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:39"
            },
            {
              "label": "wmxLpUsdtPlus",
              "offset": 0,
              "slot": "307",
              "type": "t_contract(IWombexBaseRewardPool)5734",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:40"
            },
            {
              "label": "poolDepositor",
              "offset": 0,
              "slot": "308",
              "type": "t_contract(IWombexPoolDepositor)5779",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:41"
            },
            {
              "label": "pool",
              "offset": 0,
              "slot": "309",
              "type": "t_address",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:42"
            },
            {
              "label": "pancakeRouter",
              "offset": 0,
              "slot": "310",
              "type": "t_contract(IPancakeRouter02)4378",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:44"
            },
            {
              "label": "lpUsdtDm",
              "offset": 0,
              "slot": "311",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:46"
            },
            {
              "label": "wombatRouter",
              "offset": 0,
              "slot": "312",
              "type": "t_contract(IWombatRouter)4867",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:49"
            },
            {
              "label": "oracleUsdt",
              "offset": 0,
              "slot": "313",
              "type": "t_contract(IPriceFeed)3166",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:51"
            },
            {
              "label": "usdtDm",
              "offset": 0,
              "slot": "314",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:53"
            },
            {
              "label": "usdtPlusDm",
              "offset": 0,
              "slot": "315",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:54"
            },
            {
              "label": "lpUsdtPlusDm",
              "offset": 0,
              "slot": "316",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:55"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "317",
              "type": "t_string_storage",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)2662": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IPancakeRouter02)4378": {
              "label": "contract IPancakeRouter02",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)3166": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatAsset)4595": {
              "label": "contract IWombatAsset",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatRouter)4867": {
              "label": "contract IWombatRouter",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexBaseRewardPool)5734": {
              "label": "contract IWombexBaseRewardPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexPoolDepositor)5779": {
              "label": "contract IWombexPoolDepositor",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "11dd6dc76097d36a942a70d2c126eb47bfe7dddb77078c805502f622dcf91b57",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "97ff9e065964bce249812dcca274af1d22161a47c8f083420e66690ceec47cde",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "57b0ff8e0b23b60b733c18a8d52fd2be04db1e06a971e4ac1e51bc7d70228fa9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "c105f9515d64744a1b37b5b09a5d5adfc3cc8c95f0c92b9cb23f1ff8e9e66927",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "9ddb95611794df92ed7f51febd0169b9cdd934bc35cdacd27e0ec2429297c49e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Strategy.sol:Strategy": {
        "src": "contracts/Strategy.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/libraries/TokenMath.sol:OvnMath"
        ],
        "methods": [
          "setPortfolioManager(address)",
          "setSlippages(uint256,uint256,uint256)",
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:ChainlinkLibrary": {
        "src": "contracts/connectors/Chainlink.sol:50",
        "version": {
          "withMetadata": "7cccaa7fd76280b78d7c678aa45479ba8298436b1f2bc65c0bd4edb78190d9a8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:IPriceFeed": {
        "src": "contracts/connectors/Chainlink.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "latestAnswer()",
          "latestTimestamp()",
          "latestRound()",
          "getAnswer(uint256)",
          "getTimestamp(uint256)",
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakePair": {
        "src": "contracts/connectors/PancakeV2.sol:149",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter01": {
        "src": "contracts/connectors/PancakeV2.sol:202",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter02": {
        "src": "contracts/connectors/PancakeV2.sol:296",
        "inherit": [
          "contracts/connectors/PancakeV2.sol:IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary": {
        "src": "contracts/connectors/PancakeV2.sol:6",
        "version": {
          "withMetadata": "3000d0a52084e9944ef4af7fc97727063b52aeda5b2db5f345162e60802a0006",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IMasterWombatV2": {
        "src": "contracts/connectors/Wombat.sol:105",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(uint256,address)",
          "getAssetPid(address)",
          "poolLength()",
          "pendingTokens(uint256,address)",
          "rewarderBonusTokenInfo(uint256)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "multiClaim(uint256[])",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "migrate(uint256[])",
          "depositFor(uint256,uint256,address)",
          "updateFactor(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatAsset": {
        "src": "contracts/connectors/Wombat.sol:72",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlyingToken()",
          "pool()",
          "cash()",
          "liability()",
          "decimals()",
          "underlyingTokenDecimals()",
          "setPool(address)",
          "underlyingTokenBalance()",
          "transferUnderlyingToken(address,uint256)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "addCash(uint256)",
          "removeCash(uint256)",
          "addLiability(uint256)",
          "removeLiability(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatPool": {
        "src": "contracts/connectors/Wombat.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokens()",
          "addressOfAsset(address)",
          "deposit(address,uint256,uint256,address,uint256,bool)",
          "withdraw(address,uint256,uint256,address,uint256)",
          "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)",
          "swap(address,address,uint256,uint256,address,uint256)",
          "quotePotentialDeposit(address,uint256)",
          "quotePotentialSwap(address,address,int256)",
          "quotePotentialWithdraw(address,uint256)",
          "quoteAmountIn(address,address,int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatRouter": {
        "src": "contracts/connectors/Wombat.sol:157",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountOut(address[],address[],int256)",
          "getAmountIn(address[],address[],uint256)",
          "swapExactTokensForTokens(address[],address[],uint256,uint256,address,uint256)",
          "swapExactNativeForTokens(address[],address[],uint256,address,uint256)",
          "swapExactTokensForNative(address[],address[],uint256,uint256,address,uint256)",
          "addLiquidityNative(address,uint256,address,uint256,bool)",
          "removeLiquidityNative(address,uint256,uint256,address,uint256)",
          "removeLiquidityFromOtherAssetAsNative(address,address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:WombatLibrary": {
        "src": "contracts/connectors/Wombat.sol:229",
        "version": {
          "withMetadata": "fded46865ae65c4a512ed814b08160c4d331ea14d354d194aa759a5d567106b1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBaseRewardPool": {
        "src": "contracts/connectors/Wombex.sol:21",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "totalAssets()",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "maxMint(address)",
          "previewMint(uint256)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "lastTimeRewardApplicable(address)",
          "rewardPerToken(address)",
          "earned(address,address)",
          "claimableRewards(address)",
          "stake(uint256)",
          "stakeAll()",
          "stakeFor(address,uint256)",
          "withdraw(uint256,bool)",
          "withdrawAll(bool)",
          "withdrawAndUnwrap(uint256,bool)",
          "withdrawAllAndUnwrap(bool)",
          "getReward(address,bool)",
          "getReward()",
          "donate(address,uint256)",
          "processIdleRewards()",
          "rewardTokensLen()",
          "rewardTokensList()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBooster": {
        "src": "contracts/connectors/Wombex.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexPoolDepositor": {
        "src": "contracts/connectors/Wombex.sol:188",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256,bool)",
          "withdraw(address,uint256,uint256,address)",
          "getDepositAmountOut(address,uint256)",
          "getWithdrawAmountOut(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexVault": {
        "src": "contracts/connectors/Wombex.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "withdrawAndUnwrap(uint256,bool)",
          "getReward(address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IControlRole.sol:IControlRole": {
        "src": "contracts/interfaces/IControlRole.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/interfaces/IStrategy.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "netAssetValue()",
          "liquidationValue()",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/libraries/TokenMath.sol:OvnMath": {
        "src": "contracts/libraries/TokenMath.sol:4",
        "version": {
          "withMetadata": "c334a4703093078355fb94af80b3406193a520514b7ca3965d70f13389a62103",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyWombexUsdt+.sol:StrategyWombexUsdtPlus": {
        "src": "contracts/strategies/StrategyWombexUsdt+.sol:11",
        "version": {
          "withMetadata": "184d1d29905926c7d60bafe4e14dff5b2e8ec3681d46df948567abafa9618b27",
          "withoutMetadata": "1f80c832e8436a5995704d7a41db9290b92ff7da2ab860172bc6eb1f0f97440f",
          "linkedWithoutMetadata": "1f80c832e8436a5995704d7a41db9290b92ff7da2ab860172bc6eb1f0f97440f"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "hardhat/console.sol:console",
          "contracts/connectors/Wombat.sol:WombatLibrary",
          "contracts/libraries/TokenMath.sol:OvnMath",
          "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary",
          "contracts/connectors/Chainlink.sol:ChainlinkLibrary"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address,address,address,address,string))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:33"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:34"
            },
            {
              "label": "usdtPlus",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:35"
            },
            {
              "label": "wom",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:36"
            },
            {
              "label": "wmx",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:37"
            },
            {
              "label": "lpUsdtPlus",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IWombatAsset)4595",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:39"
            },
            {
              "label": "wmxLpUsdtPlus",
              "offset": 0,
              "slot": "307",
              "type": "t_contract(IWombexBaseRewardPool)5734",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:40"
            },
            {
              "label": "poolDepositor",
              "offset": 0,
              "slot": "308",
              "type": "t_contract(IWombexPoolDepositor)5779",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:41"
            },
            {
              "label": "pool",
              "offset": 0,
              "slot": "309",
              "type": "t_address",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:42"
            },
            {
              "label": "pancakeRouter",
              "offset": 0,
              "slot": "310",
              "type": "t_contract(IPancakeRouter02)4378",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:44"
            },
            {
              "label": "lpUsdtDm",
              "offset": 0,
              "slot": "311",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:46"
            },
            {
              "label": "wombatRouter",
              "offset": 0,
              "slot": "312",
              "type": "t_contract(IWombatRouter)4867",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:49"
            },
            {
              "label": "oracleUsdt",
              "offset": 0,
              "slot": "313",
              "type": "t_contract(IPriceFeed)3166",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:51"
            },
            {
              "label": "usdtDm",
              "offset": 0,
              "slot": "314",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:53"
            },
            {
              "label": "usdtPlusDm",
              "offset": 0,
              "slot": "315",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:54"
            },
            {
              "label": "lpUsdtPlusDm",
              "offset": 0,
              "slot": "316",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:55"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "317",
              "type": "t_string_storage",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)2662": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IPancakeRouter02)4378": {
              "label": "contract IPancakeRouter02",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)3166": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatAsset)4595": {
              "label": "contract IWombatAsset",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatRouter)4867": {
              "label": "contract IWombatRouter",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexBaseRewardPool)5734": {
              "label": "contract IWombexBaseRewardPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexPoolDepositor)5779": {
              "label": "contract IWombexPoolDepositor",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "11dd6dc76097d36a942a70d2c126eb47bfe7dddb77078c805502f622dcf91b57",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "97ff9e065964bce249812dcca274af1d22161a47c8f083420e66690ceec47cde",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "57b0ff8e0b23b60b733c18a8d52fd2be04db1e06a971e4ac1e51bc7d70228fa9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "c105f9515d64744a1b37b5b09a5d5adfc3cc8c95f0c92b9cb23f1ff8e9e66927",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "9ddb95611794df92ed7f51febd0169b9cdd934bc35cdacd27e0ec2429297c49e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Strategy.sol:Strategy": {
        "src": "contracts/Strategy.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/libraries/TokenMath.sol:OvnMath"
        ],
        "methods": [
          "setPortfolioManager(address)",
          "setSlippages(uint256,uint256,uint256)",
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:ChainlinkLibrary": {
        "src": "contracts/connectors/Chainlink.sol:50",
        "version": {
          "withMetadata": "7cccaa7fd76280b78d7c678aa45479ba8298436b1f2bc65c0bd4edb78190d9a8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:IPriceFeed": {
        "src": "contracts/connectors/Chainlink.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "latestAnswer()",
          "latestTimestamp()",
          "latestRound()",
          "getAnswer(uint256)",
          "getTimestamp(uint256)",
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakePair": {
        "src": "contracts/connectors/PancakeV2.sol:149",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter01": {
        "src": "contracts/connectors/PancakeV2.sol:202",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter02": {
        "src": "contracts/connectors/PancakeV2.sol:296",
        "inherit": [
          "contracts/connectors/PancakeV2.sol:IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary": {
        "src": "contracts/connectors/PancakeV2.sol:6",
        "version": {
          "withMetadata": "3000d0a52084e9944ef4af7fc97727063b52aeda5b2db5f345162e60802a0006",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IMasterWombatV2": {
        "src": "contracts/connectors/Wombat.sol:105",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(uint256,address)",
          "getAssetPid(address)",
          "poolLength()",
          "pendingTokens(uint256,address)",
          "rewarderBonusTokenInfo(uint256)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "multiClaim(uint256[])",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "migrate(uint256[])",
          "depositFor(uint256,uint256,address)",
          "updateFactor(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatAsset": {
        "src": "contracts/connectors/Wombat.sol:72",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlyingToken()",
          "pool()",
          "cash()",
          "liability()",
          "decimals()",
          "underlyingTokenDecimals()",
          "setPool(address)",
          "underlyingTokenBalance()",
          "transferUnderlyingToken(address,uint256)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "addCash(uint256)",
          "removeCash(uint256)",
          "addLiability(uint256)",
          "removeLiability(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatPool": {
        "src": "contracts/connectors/Wombat.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokens()",
          "addressOfAsset(address)",
          "deposit(address,uint256,uint256,address,uint256,bool)",
          "withdraw(address,uint256,uint256,address,uint256)",
          "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)",
          "swap(address,address,uint256,uint256,address,uint256)",
          "quotePotentialDeposit(address,uint256)",
          "quotePotentialSwap(address,address,int256)",
          "quotePotentialWithdraw(address,uint256)",
          "quoteAmountIn(address,address,int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatRouter": {
        "src": "contracts/connectors/Wombat.sol:157",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountOut(address[],address[],int256)",
          "getAmountIn(address[],address[],uint256)",
          "swapExactTokensForTokens(address[],address[],uint256,uint256,address,uint256)",
          "swapExactNativeForTokens(address[],address[],uint256,address,uint256)",
          "swapExactTokensForNative(address[],address[],uint256,uint256,address,uint256)",
          "addLiquidityNative(address,uint256,address,uint256,bool)",
          "removeLiquidityNative(address,uint256,uint256,address,uint256)",
          "removeLiquidityFromOtherAssetAsNative(address,address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:WombatLibrary": {
        "src": "contracts/connectors/Wombat.sol:229",
        "version": {
          "withMetadata": "fded46865ae65c4a512ed814b08160c4d331ea14d354d194aa759a5d567106b1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBaseRewardPool": {
        "src": "contracts/connectors/Wombex.sol:21",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "totalAssets()",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "maxMint(address)",
          "previewMint(uint256)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "lastTimeRewardApplicable(address)",
          "rewardPerToken(address)",
          "earned(address,address)",
          "claimableRewards(address)",
          "stake(uint256)",
          "stakeAll()",
          "stakeFor(address,uint256)",
          "withdraw(uint256,bool)",
          "withdrawAll(bool)",
          "withdrawAndUnwrap(uint256,bool)",
          "withdrawAllAndUnwrap(bool)",
          "getReward(address,bool)",
          "getReward()",
          "donate(address,uint256)",
          "processIdleRewards()",
          "rewardTokensLen()",
          "rewardTokensList()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBooster": {
        "src": "contracts/connectors/Wombex.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexPoolDepositor": {
        "src": "contracts/connectors/Wombex.sol:188",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256,bool)",
          "withdraw(address,uint256,uint256,address)",
          "getDepositAmountOut(address,uint256)",
          "getWithdrawAmountOut(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexVault": {
        "src": "contracts/connectors/Wombex.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "withdrawAndUnwrap(uint256,bool)",
          "getReward(address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IControlRole.sol:IControlRole": {
        "src": "contracts/interfaces/IControlRole.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/interfaces/IStrategy.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "netAssetValue()",
          "liquidationValue()",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/libraries/TokenMath.sol:OvnMath": {
        "src": "contracts/libraries/TokenMath.sol:4",
        "version": {
          "withMetadata": "c334a4703093078355fb94af80b3406193a520514b7ca3965d70f13389a62103",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyWombexUsdt+.sol:StrategyWombexUsdtPlus": {
        "src": "contracts/strategies/StrategyWombexUsdt+.sol:11",
        "version": {
          "withMetadata": "b81adadbafeae952cfb069bf66086cd2f5359adc08f4b0201f6b0ff994f48369",
          "withoutMetadata": "83066cf12bd757e8013712492c5425934275733a8110ca7230ae9d564d2ae7b6",
          "linkedWithoutMetadata": "83066cf12bd757e8013712492c5425934275733a8110ca7230ae9d564d2ae7b6"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "hardhat/console.sol:console",
          "contracts/connectors/Wombat.sol:WombatLibrary",
          "contracts/libraries/TokenMath.sol:OvnMath",
          "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary",
          "contracts/connectors/Chainlink.sol:ChainlinkLibrary"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address,address,address,address,string))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:33"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:34"
            },
            {
              "label": "usdtPlus",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:35"
            },
            {
              "label": "wom",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:36"
            },
            {
              "label": "wmx",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:37"
            },
            {
              "label": "lpUsdtPlus",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IWombatAsset)4595",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:39"
            },
            {
              "label": "wmxLpUsdtPlus",
              "offset": 0,
              "slot": "307",
              "type": "t_contract(IWombexBaseRewardPool)5734",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:40"
            },
            {
              "label": "poolDepositor",
              "offset": 0,
              "slot": "308",
              "type": "t_contract(IWombexPoolDepositor)5779",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:41"
            },
            {
              "label": "pool",
              "offset": 0,
              "slot": "309",
              "type": "t_address",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:42"
            },
            {
              "label": "pancakeRouter",
              "offset": 0,
              "slot": "310",
              "type": "t_contract(IPancakeRouter02)4378",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:44"
            },
            {
              "label": "lpUsdtDm",
              "offset": 0,
              "slot": "311",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:46"
            },
            {
              "label": "wombatRouter",
              "offset": 0,
              "slot": "312",
              "type": "t_contract(IWombatRouter)4867",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:49"
            },
            {
              "label": "oracleUsdt",
              "offset": 0,
              "slot": "313",
              "type": "t_contract(IPriceFeed)3166",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:51"
            },
            {
              "label": "usdtDm",
              "offset": 0,
              "slot": "314",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:53"
            },
            {
              "label": "usdtPlusDm",
              "offset": 0,
              "slot": "315",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:54"
            },
            {
              "label": "lpUsdtPlusDm",
              "offset": 0,
              "slot": "316",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:55"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "317",
              "type": "t_string_storage",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)2662": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IPancakeRouter02)4378": {
              "label": "contract IPancakeRouter02",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)3166": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatAsset)4595": {
              "label": "contract IWombatAsset",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatRouter)4867": {
              "label": "contract IWombatRouter",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexBaseRewardPool)5734": {
              "label": "contract IWombexBaseRewardPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexPoolDepositor)5779": {
              "label": "contract IWombexPoolDepositor",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "11dd6dc76097d36a942a70d2c126eb47bfe7dddb77078c805502f622dcf91b57",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "97ff9e065964bce249812dcca274af1d22161a47c8f083420e66690ceec47cde",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "57b0ff8e0b23b60b733c18a8d52fd2be04db1e06a971e4ac1e51bc7d70228fa9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "c105f9515d64744a1b37b5b09a5d5adfc3cc8c95f0c92b9cb23f1ff8e9e66927",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "9ddb95611794df92ed7f51febd0169b9cdd934bc35cdacd27e0ec2429297c49e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Strategy.sol:Strategy": {
        "src": "contracts/Strategy.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/libraries/TokenMath.sol:OvnMath"
        ],
        "methods": [
          "setPortfolioManager(address)",
          "setSlippages(uint256,uint256,uint256)",
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:ChainlinkLibrary": {
        "src": "contracts/connectors/Chainlink.sol:50",
        "version": {
          "withMetadata": "7cccaa7fd76280b78d7c678aa45479ba8298436b1f2bc65c0bd4edb78190d9a8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:IPriceFeed": {
        "src": "contracts/connectors/Chainlink.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "latestAnswer()",
          "latestTimestamp()",
          "latestRound()",
          "getAnswer(uint256)",
          "getTimestamp(uint256)",
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakePair": {
        "src": "contracts/connectors/PancakeV2.sol:149",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter01": {
        "src": "contracts/connectors/PancakeV2.sol:202",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter02": {
        "src": "contracts/connectors/PancakeV2.sol:296",
        "inherit": [
          "contracts/connectors/PancakeV2.sol:IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary": {
        "src": "contracts/connectors/PancakeV2.sol:6",
        "version": {
          "withMetadata": "3000d0a52084e9944ef4af7fc97727063b52aeda5b2db5f345162e60802a0006",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IMasterWombatV2": {
        "src": "contracts/connectors/Wombat.sol:105",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(uint256,address)",
          "getAssetPid(address)",
          "poolLength()",
          "pendingTokens(uint256,address)",
          "rewarderBonusTokenInfo(uint256)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "multiClaim(uint256[])",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "migrate(uint256[])",
          "depositFor(uint256,uint256,address)",
          "updateFactor(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatAsset": {
        "src": "contracts/connectors/Wombat.sol:72",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlyingToken()",
          "pool()",
          "cash()",
          "liability()",
          "decimals()",
          "underlyingTokenDecimals()",
          "setPool(address)",
          "underlyingTokenBalance()",
          "transferUnderlyingToken(address,uint256)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "addCash(uint256)",
          "removeCash(uint256)",
          "addLiability(uint256)",
          "removeLiability(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatPool": {
        "src": "contracts/connectors/Wombat.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokens()",
          "addressOfAsset(address)",
          "deposit(address,uint256,uint256,address,uint256,bool)",
          "withdraw(address,uint256,uint256,address,uint256)",
          "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)",
          "swap(address,address,uint256,uint256,address,uint256)",
          "quotePotentialDeposit(address,uint256)",
          "quotePotentialSwap(address,address,int256)",
          "quotePotentialWithdraw(address,uint256)",
          "quoteAmountIn(address,address,int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatRouter": {
        "src": "contracts/connectors/Wombat.sol:157",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountOut(address[],address[],int256)",
          "getAmountIn(address[],address[],uint256)",
          "swapExactTokensForTokens(address[],address[],uint256,uint256,address,uint256)",
          "swapExactNativeForTokens(address[],address[],uint256,address,uint256)",
          "swapExactTokensForNative(address[],address[],uint256,uint256,address,uint256)",
          "addLiquidityNative(address,uint256,address,uint256,bool)",
          "removeLiquidityNative(address,uint256,uint256,address,uint256)",
          "removeLiquidityFromOtherAssetAsNative(address,address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:WombatLibrary": {
        "src": "contracts/connectors/Wombat.sol:229",
        "version": {
          "withMetadata": "fded46865ae65c4a512ed814b08160c4d331ea14d354d194aa759a5d567106b1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBaseRewardPool": {
        "src": "contracts/connectors/Wombex.sol:21",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "totalAssets()",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "maxMint(address)",
          "previewMint(uint256)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "lastTimeRewardApplicable(address)",
          "rewardPerToken(address)",
          "earned(address,address)",
          "claimableRewards(address)",
          "stake(uint256)",
          "stakeAll()",
          "stakeFor(address,uint256)",
          "withdraw(uint256,bool)",
          "withdrawAll(bool)",
          "withdrawAndUnwrap(uint256,bool)",
          "withdrawAllAndUnwrap(bool)",
          "getReward(address,bool)",
          "getReward()",
          "donate(address,uint256)",
          "processIdleRewards()",
          "rewardTokensLen()",
          "rewardTokensList()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBooster": {
        "src": "contracts/connectors/Wombex.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexPoolDepositor": {
        "src": "contracts/connectors/Wombex.sol:188",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256,bool)",
          "withdraw(address,uint256,uint256,address)",
          "getDepositAmountOut(address,uint256)",
          "getWithdrawAmountOut(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexVault": {
        "src": "contracts/connectors/Wombex.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "withdrawAndUnwrap(uint256,bool)",
          "getReward(address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IControlRole.sol:IControlRole": {
        "src": "contracts/interfaces/IControlRole.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/interfaces/IStrategy.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "netAssetValue()",
          "liquidationValue()",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/libraries/TokenMath.sol:OvnMath": {
        "src": "contracts/libraries/TokenMath.sol:4",
        "version": {
          "withMetadata": "c334a4703093078355fb94af80b3406193a520514b7ca3965d70f13389a62103",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyWombexUsdt+.sol:StrategyWombexUsdtPlus": {
        "src": "contracts/strategies/StrategyWombexUsdt+.sol:11",
        "version": {
          "withMetadata": "554691508232be4a39f48b3670516aba5c033b72dd16dfa2eee8d71c8771fe08",
          "withoutMetadata": "8ba466ee6f95ad2f7ee6618993c32a466d7514ddde1969f8c7e8a72e590d9b5a",
          "linkedWithoutMetadata": "8ba466ee6f95ad2f7ee6618993c32a466d7514ddde1969f8c7e8a72e590d9b5a"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "hardhat/console.sol:console",
          "contracts/connectors/Wombat.sol:WombatLibrary",
          "contracts/libraries/TokenMath.sol:OvnMath",
          "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary",
          "contracts/connectors/Chainlink.sol:ChainlinkLibrary"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address,address,address,address,string))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:33"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:34"
            },
            {
              "label": "usdtPlus",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:35"
            },
            {
              "label": "wom",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:36"
            },
            {
              "label": "wmx",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:37"
            },
            {
              "label": "lpUsdtPlus",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IWombatAsset)4595",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:39"
            },
            {
              "label": "wmxLpUsdtPlus",
              "offset": 0,
              "slot": "307",
              "type": "t_contract(IWombexBaseRewardPool)5734",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:40"
            },
            {
              "label": "poolDepositor",
              "offset": 0,
              "slot": "308",
              "type": "t_contract(IWombexPoolDepositor)5779",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:41"
            },
            {
              "label": "pool",
              "offset": 0,
              "slot": "309",
              "type": "t_address",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:42"
            },
            {
              "label": "pancakeRouter",
              "offset": 0,
              "slot": "310",
              "type": "t_contract(IPancakeRouter02)4378",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:44"
            },
            {
              "label": "lpUsdtDm",
              "offset": 0,
              "slot": "311",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:46"
            },
            {
              "label": "wombatRouter",
              "offset": 0,
              "slot": "312",
              "type": "t_contract(IWombatRouter)4867",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:49"
            },
            {
              "label": "oracleUsdt",
              "offset": 0,
              "slot": "313",
              "type": "t_contract(IPriceFeed)3166",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:51"
            },
            {
              "label": "usdtDm",
              "offset": 0,
              "slot": "314",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:53"
            },
            {
              "label": "usdtPlusDm",
              "offset": 0,
              "slot": "315",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:54"
            },
            {
              "label": "lpUsdtPlusDm",
              "offset": 0,
              "slot": "316",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:55"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "317",
              "type": "t_string_storage",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)2662": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IPancakeRouter02)4378": {
              "label": "contract IPancakeRouter02",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)3166": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatAsset)4595": {
              "label": "contract IWombatAsset",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatRouter)4867": {
              "label": "contract IWombatRouter",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexBaseRewardPool)5734": {
              "label": "contract IWombexBaseRewardPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexPoolDepositor)5779": {
              "label": "contract IWombexPoolDepositor",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "11dd6dc76097d36a942a70d2c126eb47bfe7dddb77078c805502f622dcf91b57",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "97ff9e065964bce249812dcca274af1d22161a47c8f083420e66690ceec47cde",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "57b0ff8e0b23b60b733c18a8d52fd2be04db1e06a971e4ac1e51bc7d70228fa9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "c105f9515d64744a1b37b5b09a5d5adfc3cc8c95f0c92b9cb23f1ff8e9e66927",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "9ddb95611794df92ed7f51febd0169b9cdd934bc35cdacd27e0ec2429297c49e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Strategy.sol:Strategy": {
        "src": "contracts/Strategy.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/libraries/TokenMath.sol:OvnMath"
        ],
        "methods": [
          "setPortfolioManager(address)",
          "setSlippages(uint256,uint256,uint256)",
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:ChainlinkLibrary": {
        "src": "contracts/connectors/Chainlink.sol:50",
        "version": {
          "withMetadata": "7cccaa7fd76280b78d7c678aa45479ba8298436b1f2bc65c0bd4edb78190d9a8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:IPriceFeed": {
        "src": "contracts/connectors/Chainlink.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "latestAnswer()",
          "latestTimestamp()",
          "latestRound()",
          "getAnswer(uint256)",
          "getTimestamp(uint256)",
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakePair": {
        "src": "contracts/connectors/PancakeV2.sol:149",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter01": {
        "src": "contracts/connectors/PancakeV2.sol:202",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter02": {
        "src": "contracts/connectors/PancakeV2.sol:296",
        "inherit": [
          "contracts/connectors/PancakeV2.sol:IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary": {
        "src": "contracts/connectors/PancakeV2.sol:6",
        "version": {
          "withMetadata": "3000d0a52084e9944ef4af7fc97727063b52aeda5b2db5f345162e60802a0006",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IMasterWombatV2": {
        "src": "contracts/connectors/Wombat.sol:105",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(uint256,address)",
          "getAssetPid(address)",
          "poolLength()",
          "pendingTokens(uint256,address)",
          "rewarderBonusTokenInfo(uint256)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "multiClaim(uint256[])",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "migrate(uint256[])",
          "depositFor(uint256,uint256,address)",
          "updateFactor(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatAsset": {
        "src": "contracts/connectors/Wombat.sol:72",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlyingToken()",
          "pool()",
          "cash()",
          "liability()",
          "decimals()",
          "underlyingTokenDecimals()",
          "setPool(address)",
          "underlyingTokenBalance()",
          "transferUnderlyingToken(address,uint256)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "addCash(uint256)",
          "removeCash(uint256)",
          "addLiability(uint256)",
          "removeLiability(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatPool": {
        "src": "contracts/connectors/Wombat.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokens()",
          "addressOfAsset(address)",
          "deposit(address,uint256,uint256,address,uint256,bool)",
          "withdraw(address,uint256,uint256,address,uint256)",
          "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)",
          "swap(address,address,uint256,uint256,address,uint256)",
          "quotePotentialDeposit(address,uint256)",
          "quotePotentialSwap(address,address,int256)",
          "quotePotentialWithdraw(address,uint256)",
          "quoteAmountIn(address,address,int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatRouter": {
        "src": "contracts/connectors/Wombat.sol:157",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountOut(address[],address[],int256)",
          "getAmountIn(address[],address[],uint256)",
          "swapExactTokensForTokens(address[],address[],uint256,uint256,address,uint256)",
          "swapExactNativeForTokens(address[],address[],uint256,address,uint256)",
          "swapExactTokensForNative(address[],address[],uint256,uint256,address,uint256)",
          "addLiquidityNative(address,uint256,address,uint256,bool)",
          "removeLiquidityNative(address,uint256,uint256,address,uint256)",
          "removeLiquidityFromOtherAssetAsNative(address,address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:WombatLibrary": {
        "src": "contracts/connectors/Wombat.sol:229",
        "version": {
          "withMetadata": "fded46865ae65c4a512ed814b08160c4d331ea14d354d194aa759a5d567106b1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBaseRewardPool": {
        "src": "contracts/connectors/Wombex.sol:21",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "totalAssets()",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "maxMint(address)",
          "previewMint(uint256)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "lastTimeRewardApplicable(address)",
          "rewardPerToken(address)",
          "earned(address,address)",
          "claimableRewards(address)",
          "stake(uint256)",
          "stakeAll()",
          "stakeFor(address,uint256)",
          "withdraw(uint256,bool)",
          "withdrawAll(bool)",
          "withdrawAndUnwrap(uint256,bool)",
          "withdrawAllAndUnwrap(bool)",
          "getReward(address,bool)",
          "getReward()",
          "donate(address,uint256)",
          "processIdleRewards()",
          "rewardTokensLen()",
          "rewardTokensList()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBooster": {
        "src": "contracts/connectors/Wombex.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexPoolDepositor": {
        "src": "contracts/connectors/Wombex.sol:188",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256,bool)",
          "withdraw(address,uint256,uint256,address)",
          "getDepositAmountOut(address,uint256)",
          "getWithdrawAmountOut(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexVault": {
        "src": "contracts/connectors/Wombex.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "withdrawAndUnwrap(uint256,bool)",
          "getReward(address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IControlRole.sol:IControlRole": {
        "src": "contracts/interfaces/IControlRole.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/interfaces/IStrategy.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "netAssetValue()",
          "liquidationValue()",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/libraries/TokenMath.sol:OvnMath": {
        "src": "contracts/libraries/TokenMath.sol:4",
        "version": {
          "withMetadata": "c334a4703093078355fb94af80b3406193a520514b7ca3965d70f13389a62103",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyWombexUsdt+.sol:StrategyWombexUsdtPlus": {
        "src": "contracts/strategies/StrategyWombexUsdt+.sol:11",
        "version": {
          "withMetadata": "babc935b21caa8360d0efec0f3fda0e1503b06d493d7de7f6cbf6ae27d777692",
          "withoutMetadata": "55ce8d7d92d66c3bfb470d0642790bcca48b1c32a0e5390702a8107beace405e",
          "linkedWithoutMetadata": "55ce8d7d92d66c3bfb470d0642790bcca48b1c32a0e5390702a8107beace405e"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "hardhat/console.sol:console",
          "contracts/connectors/Wombat.sol:WombatLibrary",
          "contracts/libraries/TokenMath.sol:OvnMath",
          "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary",
          "contracts/connectors/Chainlink.sol:ChainlinkLibrary"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address,address,address,address,string))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:33"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:34"
            },
            {
              "label": "usdtPlus",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:35"
            },
            {
              "label": "wom",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:36"
            },
            {
              "label": "wmx",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:37"
            },
            {
              "label": "lpUsdtPlus",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IWombatAsset)4595",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:39"
            },
            {
              "label": "wmxLpUsdtPlus",
              "offset": 0,
              "slot": "307",
              "type": "t_contract(IWombexBaseRewardPool)5734",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:40"
            },
            {
              "label": "poolDepositor",
              "offset": 0,
              "slot": "308",
              "type": "t_contract(IWombexPoolDepositor)5779",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:41"
            },
            {
              "label": "pool",
              "offset": 0,
              "slot": "309",
              "type": "t_address",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:42"
            },
            {
              "label": "pancakeRouter",
              "offset": 0,
              "slot": "310",
              "type": "t_contract(IPancakeRouter02)4378",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:44"
            },
            {
              "label": "lpUsdtDm",
              "offset": 0,
              "slot": "311",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:46"
            },
            {
              "label": "wombatRouter",
              "offset": 0,
              "slot": "312",
              "type": "t_contract(IWombatRouter)4867",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:49"
            },
            {
              "label": "oracleUsdt",
              "offset": 0,
              "slot": "313",
              "type": "t_contract(IPriceFeed)3166",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:51"
            },
            {
              "label": "usdtDm",
              "offset": 0,
              "slot": "314",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:53"
            },
            {
              "label": "usdtPlusDm",
              "offset": 0,
              "slot": "315",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:54"
            },
            {
              "label": "lpUsdtPlusDm",
              "offset": 0,
              "slot": "316",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:55"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "317",
              "type": "t_string_storage",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)2662": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IPancakeRouter02)4378": {
              "label": "contract IPancakeRouter02",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)3166": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatAsset)4595": {
              "label": "contract IWombatAsset",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatRouter)4867": {
              "label": "contract IWombatRouter",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexBaseRewardPool)5734": {
              "label": "contract IWombexBaseRewardPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexPoolDepositor)5779": {
              "label": "contract IWombexPoolDepositor",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "11dd6dc76097d36a942a70d2c126eb47bfe7dddb77078c805502f622dcf91b57",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "97ff9e065964bce249812dcca274af1d22161a47c8f083420e66690ceec47cde",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "57b0ff8e0b23b60b733c18a8d52fd2be04db1e06a971e4ac1e51bc7d70228fa9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "c105f9515d64744a1b37b5b09a5d5adfc3cc8c95f0c92b9cb23f1ff8e9e66927",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "9ddb95611794df92ed7f51febd0169b9cdd934bc35cdacd27e0ec2429297c49e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Strategy.sol:Strategy": {
        "src": "contracts/Strategy.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/libraries/TokenMath.sol:OvnMath"
        ],
        "methods": [
          "setPortfolioManager(address)",
          "setSlippages(uint256,uint256,uint256)",
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:ChainlinkLibrary": {
        "src": "contracts/connectors/Chainlink.sol:50",
        "version": {
          "withMetadata": "7cccaa7fd76280b78d7c678aa45479ba8298436b1f2bc65c0bd4edb78190d9a8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:IPriceFeed": {
        "src": "contracts/connectors/Chainlink.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "latestAnswer()",
          "latestTimestamp()",
          "latestRound()",
          "getAnswer(uint256)",
          "getTimestamp(uint256)",
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakePair": {
        "src": "contracts/connectors/PancakeV2.sol:149",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter01": {
        "src": "contracts/connectors/PancakeV2.sol:202",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter02": {
        "src": "contracts/connectors/PancakeV2.sol:296",
        "inherit": [
          "contracts/connectors/PancakeV2.sol:IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary": {
        "src": "contracts/connectors/PancakeV2.sol:6",
        "version": {
          "withMetadata": "3000d0a52084e9944ef4af7fc97727063b52aeda5b2db5f345162e60802a0006",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IMasterWombatV2": {
        "src": "contracts/connectors/Wombat.sol:105",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(uint256,address)",
          "getAssetPid(address)",
          "poolLength()",
          "pendingTokens(uint256,address)",
          "rewarderBonusTokenInfo(uint256)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "multiClaim(uint256[])",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "migrate(uint256[])",
          "depositFor(uint256,uint256,address)",
          "updateFactor(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatAsset": {
        "src": "contracts/connectors/Wombat.sol:72",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlyingToken()",
          "pool()",
          "cash()",
          "liability()",
          "decimals()",
          "underlyingTokenDecimals()",
          "setPool(address)",
          "underlyingTokenBalance()",
          "transferUnderlyingToken(address,uint256)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "addCash(uint256)",
          "removeCash(uint256)",
          "addLiability(uint256)",
          "removeLiability(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatPool": {
        "src": "contracts/connectors/Wombat.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokens()",
          "addressOfAsset(address)",
          "deposit(address,uint256,uint256,address,uint256,bool)",
          "withdraw(address,uint256,uint256,address,uint256)",
          "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)",
          "swap(address,address,uint256,uint256,address,uint256)",
          "quotePotentialDeposit(address,uint256)",
          "quotePotentialSwap(address,address,int256)",
          "quotePotentialWithdraw(address,uint256)",
          "quoteAmountIn(address,address,int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatRouter": {
        "src": "contracts/connectors/Wombat.sol:157",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountOut(address[],address[],int256)",
          "getAmountIn(address[],address[],uint256)",
          "swapExactTokensForTokens(address[],address[],uint256,uint256,address,uint256)",
          "swapExactNativeForTokens(address[],address[],uint256,address,uint256)",
          "swapExactTokensForNative(address[],address[],uint256,uint256,address,uint256)",
          "addLiquidityNative(address,uint256,address,uint256,bool)",
          "removeLiquidityNative(address,uint256,uint256,address,uint256)",
          "removeLiquidityFromOtherAssetAsNative(address,address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:WombatLibrary": {
        "src": "contracts/connectors/Wombat.sol:229",
        "version": {
          "withMetadata": "fded46865ae65c4a512ed814b08160c4d331ea14d354d194aa759a5d567106b1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBaseRewardPool": {
        "src": "contracts/connectors/Wombex.sol:21",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "totalAssets()",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "maxMint(address)",
          "previewMint(uint256)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "lastTimeRewardApplicable(address)",
          "rewardPerToken(address)",
          "earned(address,address)",
          "claimableRewards(address)",
          "stake(uint256)",
          "stakeAll()",
          "stakeFor(address,uint256)",
          "withdraw(uint256,bool)",
          "withdrawAll(bool)",
          "withdrawAndUnwrap(uint256,bool)",
          "withdrawAllAndUnwrap(bool)",
          "getReward(address,bool)",
          "getReward()",
          "donate(address,uint256)",
          "processIdleRewards()",
          "rewardTokensLen()",
          "rewardTokensList()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBooster": {
        "src": "contracts/connectors/Wombex.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexPoolDepositor": {
        "src": "contracts/connectors/Wombex.sol:188",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256,bool)",
          "withdraw(address,uint256,uint256,address)",
          "getDepositAmountOut(address,uint256)",
          "getWithdrawAmountOut(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexVault": {
        "src": "contracts/connectors/Wombex.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "withdrawAndUnwrap(uint256,bool)",
          "getReward(address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IControlRole.sol:IControlRole": {
        "src": "contracts/interfaces/IControlRole.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/interfaces/IStrategy.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "netAssetValue()",
          "liquidationValue()",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/libraries/TokenMath.sol:OvnMath": {
        "src": "contracts/libraries/TokenMath.sol:4",
        "version": {
          "withMetadata": "c334a4703093078355fb94af80b3406193a520514b7ca3965d70f13389a62103",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyWombexUsdt+.sol:StrategyWombexUsdtPlus": {
        "src": "contracts/strategies/StrategyWombexUsdt+.sol:11",
        "version": {
          "withMetadata": "ecbf5a843271959ec7ef3886f4510d4c74ff0e904227caa1a2b7db776f1e3d5c",
          "withoutMetadata": "9b8b675c62ac5c8281ee79e7b0106a28629bcb7328b5a746b9faab9f07734ada",
          "linkedWithoutMetadata": "9b8b675c62ac5c8281ee79e7b0106a28629bcb7328b5a746b9faab9f07734ada"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "hardhat/console.sol:console",
          "contracts/connectors/Wombat.sol:WombatLibrary",
          "contracts/libraries/TokenMath.sol:OvnMath",
          "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary",
          "contracts/connectors/Chainlink.sol:ChainlinkLibrary"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address,address,address,address,string))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:33"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:34"
            },
            {
              "label": "usdtPlus",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:35"
            },
            {
              "label": "wom",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:36"
            },
            {
              "label": "wmx",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:37"
            },
            {
              "label": "lpUsdtPlus",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IWombatAsset)4595",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:39"
            },
            {
              "label": "wmxLpUsdtPlus",
              "offset": 0,
              "slot": "307",
              "type": "t_contract(IWombexBaseRewardPool)5734",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:40"
            },
            {
              "label": "poolDepositor",
              "offset": 0,
              "slot": "308",
              "type": "t_contract(IWombexPoolDepositor)5779",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:41"
            },
            {
              "label": "pool",
              "offset": 0,
              "slot": "309",
              "type": "t_address",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:42"
            },
            {
              "label": "pancakeRouter",
              "offset": 0,
              "slot": "310",
              "type": "t_contract(IPancakeRouter02)4378",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:44"
            },
            {
              "label": "lpUsdtDm",
              "offset": 0,
              "slot": "311",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:46"
            },
            {
              "label": "wombatRouter",
              "offset": 0,
              "slot": "312",
              "type": "t_contract(IWombatRouter)4867",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:49"
            },
            {
              "label": "oracleUsdt",
              "offset": 0,
              "slot": "313",
              "type": "t_contract(IPriceFeed)3166",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:51"
            },
            {
              "label": "usdtDm",
              "offset": 0,
              "slot": "314",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:53"
            },
            {
              "label": "usdtPlusDm",
              "offset": 0,
              "slot": "315",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:54"
            },
            {
              "label": "lpUsdtPlusDm",
              "offset": 0,
              "slot": "316",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:55"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "317",
              "type": "t_string_storage",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)2662": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IPancakeRouter02)4378": {
              "label": "contract IPancakeRouter02",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)3166": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatAsset)4595": {
              "label": "contract IWombatAsset",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatRouter)4867": {
              "label": "contract IWombatRouter",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexBaseRewardPool)5734": {
              "label": "contract IWombexBaseRewardPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexPoolDepositor)5779": {
              "label": "contract IWombexPoolDepositor",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "11dd6dc76097d36a942a70d2c126eb47bfe7dddb77078c805502f622dcf91b57",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "97ff9e065964bce249812dcca274af1d22161a47c8f083420e66690ceec47cde",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "57b0ff8e0b23b60b733c18a8d52fd2be04db1e06a971e4ac1e51bc7d70228fa9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "c105f9515d64744a1b37b5b09a5d5adfc3cc8c95f0c92b9cb23f1ff8e9e66927",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "9ddb95611794df92ed7f51febd0169b9cdd934bc35cdacd27e0ec2429297c49e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Strategy.sol:Strategy": {
        "src": "contracts/Strategy.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/libraries/TokenMath.sol:OvnMath"
        ],
        "methods": [
          "setPortfolioManager(address)",
          "setSlippages(uint256,uint256,uint256)",
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:ChainlinkLibrary": {
        "src": "contracts/connectors/Chainlink.sol:50",
        "version": {
          "withMetadata": "7cccaa7fd76280b78d7c678aa45479ba8298436b1f2bc65c0bd4edb78190d9a8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:IPriceFeed": {
        "src": "contracts/connectors/Chainlink.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "latestAnswer()",
          "latestTimestamp()",
          "latestRound()",
          "getAnswer(uint256)",
          "getTimestamp(uint256)",
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakePair": {
        "src": "contracts/connectors/PancakeV2.sol:149",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter01": {
        "src": "contracts/connectors/PancakeV2.sol:202",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter02": {
        "src": "contracts/connectors/PancakeV2.sol:296",
        "inherit": [
          "contracts/connectors/PancakeV2.sol:IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary": {
        "src": "contracts/connectors/PancakeV2.sol:6",
        "version": {
          "withMetadata": "3000d0a52084e9944ef4af7fc97727063b52aeda5b2db5f345162e60802a0006",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IMasterWombatV2": {
        "src": "contracts/connectors/Wombat.sol:105",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(uint256,address)",
          "getAssetPid(address)",
          "poolLength()",
          "pendingTokens(uint256,address)",
          "rewarderBonusTokenInfo(uint256)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "multiClaim(uint256[])",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "migrate(uint256[])",
          "depositFor(uint256,uint256,address)",
          "updateFactor(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatAsset": {
        "src": "contracts/connectors/Wombat.sol:72",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlyingToken()",
          "pool()",
          "cash()",
          "liability()",
          "decimals()",
          "underlyingTokenDecimals()",
          "setPool(address)",
          "underlyingTokenBalance()",
          "transferUnderlyingToken(address,uint256)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "addCash(uint256)",
          "removeCash(uint256)",
          "addLiability(uint256)",
          "removeLiability(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatPool": {
        "src": "contracts/connectors/Wombat.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokens()",
          "addressOfAsset(address)",
          "deposit(address,uint256,uint256,address,uint256,bool)",
          "withdraw(address,uint256,uint256,address,uint256)",
          "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)",
          "swap(address,address,uint256,uint256,address,uint256)",
          "quotePotentialDeposit(address,uint256)",
          "quotePotentialSwap(address,address,int256)",
          "quotePotentialWithdraw(address,uint256)",
          "quoteAmountIn(address,address,int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatRouter": {
        "src": "contracts/connectors/Wombat.sol:157",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountOut(address[],address[],int256)",
          "getAmountIn(address[],address[],uint256)",
          "swapExactTokensForTokens(address[],address[],uint256,uint256,address,uint256)",
          "swapExactNativeForTokens(address[],address[],uint256,address,uint256)",
          "swapExactTokensForNative(address[],address[],uint256,uint256,address,uint256)",
          "addLiquidityNative(address,uint256,address,uint256,bool)",
          "removeLiquidityNative(address,uint256,uint256,address,uint256)",
          "removeLiquidityFromOtherAssetAsNative(address,address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:WombatLibrary": {
        "src": "contracts/connectors/Wombat.sol:229",
        "version": {
          "withMetadata": "fded46865ae65c4a512ed814b08160c4d331ea14d354d194aa759a5d567106b1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBaseRewardPool": {
        "src": "contracts/connectors/Wombex.sol:21",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "totalAssets()",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "maxMint(address)",
          "previewMint(uint256)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "lastTimeRewardApplicable(address)",
          "rewardPerToken(address)",
          "earned(address,address)",
          "claimableRewards(address)",
          "stake(uint256)",
          "stakeAll()",
          "stakeFor(address,uint256)",
          "withdraw(uint256,bool)",
          "withdrawAll(bool)",
          "withdrawAndUnwrap(uint256,bool)",
          "withdrawAllAndUnwrap(bool)",
          "getReward(address,bool)",
          "getReward()",
          "donate(address,uint256)",
          "processIdleRewards()",
          "rewardTokensLen()",
          "rewardTokensList()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBooster": {
        "src": "contracts/connectors/Wombex.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexPoolDepositor": {
        "src": "contracts/connectors/Wombex.sol:188",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256,bool)",
          "withdraw(address,uint256,uint256,address)",
          "getDepositAmountOut(address,uint256)",
          "getWithdrawAmountOut(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexVault": {
        "src": "contracts/connectors/Wombex.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "withdrawAndUnwrap(uint256,bool)",
          "getReward(address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IControlRole.sol:IControlRole": {
        "src": "contracts/interfaces/IControlRole.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/interfaces/IStrategy.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "netAssetValue()",
          "liquidationValue()",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/libraries/TokenMath.sol:OvnMath": {
        "src": "contracts/libraries/TokenMath.sol:4",
        "version": {
          "withMetadata": "c334a4703093078355fb94af80b3406193a520514b7ca3965d70f13389a62103",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyWombexUsdt+.sol:StrategyWombexUsdtPlus": {
        "src": "contracts/strategies/StrategyWombexUsdt+.sol:11",
        "version": {
          "withMetadata": "e5a07e1a6120c7b13395de78c6c61ff11ecff363b3a31e8d6b59d8b099789b47",
          "withoutMetadata": "8d945978a381de157c5a853164eb11491a9c8af5c287d5e625fcedc6eeb60752",
          "linkedWithoutMetadata": "8d945978a381de157c5a853164eb11491a9c8af5c287d5e625fcedc6eeb60752"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "hardhat/console.sol:console",
          "contracts/connectors/Wombat.sol:WombatLibrary",
          "contracts/libraries/TokenMath.sol:OvnMath",
          "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary",
          "contracts/connectors/Chainlink.sol:ChainlinkLibrary"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address,address,address,address,string))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:33"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:34"
            },
            {
              "label": "usdtPlus",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:35"
            },
            {
              "label": "wom",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:36"
            },
            {
              "label": "wmx",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:37"
            },
            {
              "label": "lpUsdtPlus",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IWombatAsset)4595",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:39"
            },
            {
              "label": "wmxLpUsdtPlus",
              "offset": 0,
              "slot": "307",
              "type": "t_contract(IWombexBaseRewardPool)5734",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:40"
            },
            {
              "label": "poolDepositor",
              "offset": 0,
              "slot": "308",
              "type": "t_contract(IWombexPoolDepositor)5779",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:41"
            },
            {
              "label": "pool",
              "offset": 0,
              "slot": "309",
              "type": "t_address",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:42"
            },
            {
              "label": "pancakeRouter",
              "offset": 0,
              "slot": "310",
              "type": "t_contract(IPancakeRouter02)4378",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:44"
            },
            {
              "label": "lpUsdtDm",
              "offset": 0,
              "slot": "311",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:46"
            },
            {
              "label": "wombatRouter",
              "offset": 0,
              "slot": "312",
              "type": "t_contract(IWombatRouter)4867",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:49"
            },
            {
              "label": "oracleUsdt",
              "offset": 0,
              "slot": "313",
              "type": "t_contract(IPriceFeed)3166",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:51"
            },
            {
              "label": "usdtDm",
              "offset": 0,
              "slot": "314",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:53"
            },
            {
              "label": "usdtPlusDm",
              "offset": 0,
              "slot": "315",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:54"
            },
            {
              "label": "lpUsdtPlusDm",
              "offset": 0,
              "slot": "316",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:55"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "317",
              "type": "t_string_storage",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)2662": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IPancakeRouter02)4378": {
              "label": "contract IPancakeRouter02",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)3166": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatAsset)4595": {
              "label": "contract IWombatAsset",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatRouter)4867": {
              "label": "contract IWombatRouter",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexBaseRewardPool)5734": {
              "label": "contract IWombexBaseRewardPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexPoolDepositor)5779": {
              "label": "contract IWombexPoolDepositor",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "11dd6dc76097d36a942a70d2c126eb47bfe7dddb77078c805502f622dcf91b57",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "97ff9e065964bce249812dcca274af1d22161a47c8f083420e66690ceec47cde",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "57b0ff8e0b23b60b733c18a8d52fd2be04db1e06a971e4ac1e51bc7d70228fa9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "c105f9515d64744a1b37b5b09a5d5adfc3cc8c95f0c92b9cb23f1ff8e9e66927",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "9ddb95611794df92ed7f51febd0169b9cdd934bc35cdacd27e0ec2429297c49e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Strategy.sol:Strategy": {
        "src": "contracts/Strategy.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/libraries/TokenMath.sol:OvnMath"
        ],
        "methods": [
          "setPortfolioManager(address)",
          "setSlippages(uint256,uint256,uint256)",
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:ChainlinkLibrary": {
        "src": "contracts/connectors/Chainlink.sol:50",
        "version": {
          "withMetadata": "7cccaa7fd76280b78d7c678aa45479ba8298436b1f2bc65c0bd4edb78190d9a8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:IPriceFeed": {
        "src": "contracts/connectors/Chainlink.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "latestAnswer()",
          "latestTimestamp()",
          "latestRound()",
          "getAnswer(uint256)",
          "getTimestamp(uint256)",
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Thena.sol:IBribe": {
        "src": "contracts/connectors/Thena.sol:343",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_deposit(uint256,uint256)",
          "_withdraw(uint256,uint256)",
          "getRewardForOwner(uint256,address[])",
          "notifyRewardAmount(address,uint256)",
          "left(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Thena.sol:IGaugeV2": {
        "src": "contracts/connectors/Thena.sol:258",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isForPair()",
          "rewardToken()",
          "_VE()",
          "TOKEN()",
          "DISTRIBUTION()",
          "gaugeRewarder()",
          "internal_bribe()",
          "external_bribe()",
          "rewarderPid()",
          "DURATION()",
          "periodFinish()",
          "rewardRate()",
          "lastUpdateTime()",
          "rewardPerTokenStored()",
          "fees0()",
          "fees1()",
          "userRewardPerTokenPaid(address)",
          "rewards(address)",
          "_totalSupply()",
          "_balances(address)",
          "totalSupply()",
          "balanceOf(address)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "rewardForDuration()",
          "depositAll()",
          "deposit(uint256)",
          "withdrawAll()",
          "withdraw(uint256)",
          "withdrawAllAndHarvest()",
          "getReward()",
          "_periodFinish()",
          "claimFees()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Thena.sol:IPair": {
        "src": "contracts/connectors/Thena.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "stable()",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "factory()",
          "token0()",
          "token1()",
          "fees()",
          "reserve0()",
          "reserve1()",
          "blockTimestampLast()",
          "reserve0CumulativeLast()",
          "reserve1CumulativeLast()",
          "observationLength()",
          "lastObservation()",
          "metadata()",
          "tokens()",
          "isStable()",
          "claimFees()",
          "claimStakingFees()",
          "getReserves()",
          "currentCumulativePrices()",
          "current(address,uint256)",
          "quote(address,uint256,uint256)",
          "prices(address,uint256,uint256)",
          "sample(address,uint256,uint256,uint256)",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "getAmountOut(uint256,address)",
          "approve(address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Thena.sol:IRouter": {
        "src": "contracts/connectors/Thena.sol:116",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "weth()",
          "pairCodeHash()",
          "sortTokens(address,address)",
          "pairFor(address,address,bool)",
          "getReserves(address,address,bool)",
          "getAmountOut(uint256,address,address)",
          "getAmountsOut(uint256,struct IRouter.route[])",
          "isPair(address)",
          "quoteAddLiquidity(address,address,bool,uint256,uint256)",
          "quoteRemoveLiquidity(address,address,bool,uint256)",
          "addLiquidity(address,address,bool,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,bool,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,bool,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,bool,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,bool,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,bool,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSimple(uint256,uint256,address,address,bool,address,uint256)",
          "swapExactTokensForTokens(uint256,uint256,struct IRouter.route[],address,uint256)",
          "swapExactETHForTokens(uint256,struct IRouter.route[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,struct IRouter.route[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Thena.sol:ThenaLibrary": {
        "src": "contracts/connectors/Thena.sol:352",
        "version": {
          "withMetadata": "78a7d94e05a882510ba82494b072a097d429879183e53ed7d9bf513708738065",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "hardhat/console.sol:console"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IMasterWombatV2": {
        "src": "contracts/connectors/Wombat.sol:105",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(uint256,address)",
          "getAssetPid(address)",
          "poolLength()",
          "pendingTokens(uint256,address)",
          "rewarderBonusTokenInfo(uint256)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "multiClaim(uint256[])",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "migrate(uint256[])",
          "depositFor(uint256,uint256,address)",
          "updateFactor(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatAsset": {
        "src": "contracts/connectors/Wombat.sol:72",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlyingToken()",
          "pool()",
          "cash()",
          "liability()",
          "decimals()",
          "underlyingTokenDecimals()",
          "setPool(address)",
          "underlyingTokenBalance()",
          "transferUnderlyingToken(address,uint256)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "addCash(uint256)",
          "removeCash(uint256)",
          "addLiability(uint256)",
          "removeLiability(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatPool": {
        "src": "contracts/connectors/Wombat.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokens()",
          "addressOfAsset(address)",
          "deposit(address,uint256,uint256,address,uint256,bool)",
          "withdraw(address,uint256,uint256,address,uint256)",
          "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)",
          "swap(address,address,uint256,uint256,address,uint256)",
          "quotePotentialDeposit(address,uint256)",
          "quotePotentialSwap(address,address,int256)",
          "quotePotentialWithdraw(address,uint256)",
          "quoteAmountIn(address,address,int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatRouter": {
        "src": "contracts/connectors/Wombat.sol:157",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountOut(address[],address[],int256)",
          "getAmountIn(address[],address[],uint256)",
          "swapExactTokensForTokens(address[],address[],uint256,uint256,address,uint256)",
          "swapExactNativeForTokens(address[],address[],uint256,address,uint256)",
          "swapExactTokensForNative(address[],address[],uint256,uint256,address,uint256)",
          "addLiquidityNative(address,uint256,address,uint256,bool)",
          "removeLiquidityNative(address,uint256,uint256,address,uint256)",
          "removeLiquidityFromOtherAssetAsNative(address,address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:WombatLibrary": {
        "src": "contracts/connectors/Wombat.sol:229",
        "version": {
          "withMetadata": "fded46865ae65c4a512ed814b08160c4d331ea14d354d194aa759a5d567106b1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IControlRole.sol:IControlRole": {
        "src": "contracts/interfaces/IControlRole.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/interfaces/IStrategy.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "netAssetValue()",
          "liquidationValue()",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/libraries/TokenMath.sol:OvnMath": {
        "src": "contracts/libraries/TokenMath.sol:4",
        "version": {
          "withMetadata": "c334a4703093078355fb94af80b3406193a520514b7ca3965d70f13389a62103",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyThenawUsdrUsdc.sol:StrategyThenawUsdrUsdc": {
        "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:11",
        "version": {
          "withMetadata": "4877b1deceeba1e6986c7ce370efaafcf5e8da839bde20fc30aaf74439a0fc55",
          "withoutMetadata": "60fa26307f18d4fbeb628fc9ff55443354248d7c1fe08c0f5a40203b9a556d82",
          "linkedWithoutMetadata": "60fa26307f18d4fbeb628fc9ff55443354248d7c1fe08c0f5a40203b9a556d82"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/connectors/Chainlink.sol:ChainlinkLibrary",
          "contracts/libraries/TokenMath.sol:OvnMath",
          "contracts/connectors/Wombat.sol:WombatLibrary",
          "contracts/connectors/Thena.sol:ThenaLibrary",
          "hardhat/console.sol:console"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address,address,address,address,address,string))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "busd",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:33"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:34"
            },
            {
              "label": "wUsdr",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:35"
            },
            {
              "label": "the",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:36"
            },
            {
              "label": "pair",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IPair)3686",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:39"
            },
            {
              "label": "router",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IRouter)4036",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:40"
            },
            {
              "label": "gauge",
              "offset": 0,
              "slot": "307",
              "type": "t_contract(IGaugeV2)4223",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:41"
            },
            {
              "label": "wombatPool",
              "offset": 0,
              "slot": "308",
              "type": "t_address",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:42"
            },
            {
              "label": "wombatRouter",
              "offset": 0,
              "slot": "309",
              "type": "t_contract(IWombatRouter)5231",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:44"
            },
            {
              "label": "oracleBusd",
              "offset": 0,
              "slot": "310",
              "type": "t_contract(IPriceFeed)3166",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:46"
            },
            {
              "label": "oracleUsdc",
              "offset": 0,
              "slot": "311",
              "type": "t_contract(IPriceFeed)3166",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:47"
            },
            {
              "label": "busdDm",
              "offset": 0,
              "slot": "312",
              "type": "t_uint256",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:49"
            },
            {
              "label": "usdcDm",
              "offset": 0,
              "slot": "313",
              "type": "t_uint256",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:50"
            },
            {
              "label": "wUsdrDm",
              "offset": 0,
              "slot": "314",
              "type": "t_uint256",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:52"
            },
            {
              "label": "usdtDm",
              "offset": 0,
              "slot": "315",
              "type": "t_uint256",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:53"
            },
            {
              "label": "oracleUsdt",
              "offset": 0,
              "slot": "316",
              "type": "t_contract(IPriceFeed)3166",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:55"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "317",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:56"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "318",
              "type": "t_string_storage",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:57"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)2662": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IGaugeV2)4223": {
              "label": "contract IGaugeV2",
              "numberOfBytes": "20"
            },
            "t_contract(IPair)3686": {
              "label": "contract IPair",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)3166": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_contract(IRouter)4036": {
              "label": "contract IRouter",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatRouter)5231": {
              "label": "contract IWombatRouter",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "11dd6dc76097d36a942a70d2c126eb47bfe7dddb77078c805502f622dcf91b57",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "97ff9e065964bce249812dcca274af1d22161a47c8f083420e66690ceec47cde",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "57b0ff8e0b23b60b733c18a8d52fd2be04db1e06a971e4ac1e51bc7d70228fa9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "c105f9515d64744a1b37b5b09a5d5adfc3cc8c95f0c92b9cb23f1ff8e9e66927",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "9ddb95611794df92ed7f51febd0169b9cdd934bc35cdacd27e0ec2429297c49e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Strategy.sol:Strategy": {
        "src": "contracts/Strategy.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/libraries/TokenMath.sol:OvnMath"
        ],
        "methods": [
          "setPortfolioManager(address)",
          "setSlippages(uint256,uint256,uint256)",
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:ChainlinkLibrary": {
        "src": "contracts/connectors/Chainlink.sol:50",
        "version": {
          "withMetadata": "7cccaa7fd76280b78d7c678aa45479ba8298436b1f2bc65c0bd4edb78190d9a8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:IPriceFeed": {
        "src": "contracts/connectors/Chainlink.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "latestAnswer()",
          "latestTimestamp()",
          "latestRound()",
          "getAnswer(uint256)",
          "getTimestamp(uint256)",
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Thena.sol:IBribe": {
        "src": "contracts/connectors/Thena.sol:343",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_deposit(uint256,uint256)",
          "_withdraw(uint256,uint256)",
          "getRewardForOwner(uint256,address[])",
          "notifyRewardAmount(address,uint256)",
          "left(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Thena.sol:IGaugeV2": {
        "src": "contracts/connectors/Thena.sol:258",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isForPair()",
          "rewardToken()",
          "_VE()",
          "TOKEN()",
          "DISTRIBUTION()",
          "gaugeRewarder()",
          "internal_bribe()",
          "external_bribe()",
          "rewarderPid()",
          "DURATION()",
          "periodFinish()",
          "rewardRate()",
          "lastUpdateTime()",
          "rewardPerTokenStored()",
          "fees0()",
          "fees1()",
          "userRewardPerTokenPaid(address)",
          "rewards(address)",
          "_totalSupply()",
          "_balances(address)",
          "totalSupply()",
          "balanceOf(address)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "rewardForDuration()",
          "depositAll()",
          "deposit(uint256)",
          "withdrawAll()",
          "withdraw(uint256)",
          "withdrawAllAndHarvest()",
          "getReward()",
          "_periodFinish()",
          "claimFees()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Thena.sol:IPair": {
        "src": "contracts/connectors/Thena.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "stable()",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "factory()",
          "token0()",
          "token1()",
          "fees()",
          "reserve0()",
          "reserve1()",
          "blockTimestampLast()",
          "reserve0CumulativeLast()",
          "reserve1CumulativeLast()",
          "observationLength()",
          "lastObservation()",
          "metadata()",
          "tokens()",
          "isStable()",
          "claimFees()",
          "claimStakingFees()",
          "getReserves()",
          "currentCumulativePrices()",
          "current(address,uint256)",
          "quote(address,uint256,uint256)",
          "prices(address,uint256,uint256)",
          "sample(address,uint256,uint256,uint256)",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "getAmountOut(uint256,address)",
          "approve(address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Thena.sol:IRouter": {
        "src": "contracts/connectors/Thena.sol:116",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "weth()",
          "pairCodeHash()",
          "sortTokens(address,address)",
          "pairFor(address,address,bool)",
          "getReserves(address,address,bool)",
          "getAmountOut(uint256,address,address)",
          "getAmountsOut(uint256,struct IRouter.route[])",
          "isPair(address)",
          "quoteAddLiquidity(address,address,bool,uint256,uint256)",
          "quoteRemoveLiquidity(address,address,bool,uint256)",
          "addLiquidity(address,address,bool,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,bool,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,bool,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,bool,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,bool,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,bool,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSimple(uint256,uint256,address,address,bool,address,uint256)",
          "swapExactTokensForTokens(uint256,uint256,struct IRouter.route[],address,uint256)",
          "swapExactETHForTokens(uint256,struct IRouter.route[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,struct IRouter.route[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Thena.sol:ThenaLibrary": {
        "src": "contracts/connectors/Thena.sol:352",
        "version": {
          "withMetadata": "78a7d94e05a882510ba82494b072a097d429879183e53ed7d9bf513708738065",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "hardhat/console.sol:console"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IMasterWombatV2": {
        "src": "contracts/connectors/Wombat.sol:105",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(uint256,address)",
          "getAssetPid(address)",
          "poolLength()",
          "pendingTokens(uint256,address)",
          "rewarderBonusTokenInfo(uint256)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "multiClaim(uint256[])",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "migrate(uint256[])",
          "depositFor(uint256,uint256,address)",
          "updateFactor(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatAsset": {
        "src": "contracts/connectors/Wombat.sol:72",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlyingToken()",
          "pool()",
          "cash()",
          "liability()",
          "decimals()",
          "underlyingTokenDecimals()",
          "setPool(address)",
          "underlyingTokenBalance()",
          "transferUnderlyingToken(address,uint256)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "addCash(uint256)",
          "removeCash(uint256)",
          "addLiability(uint256)",
          "removeLiability(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatPool": {
        "src": "contracts/connectors/Wombat.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokens()",
          "addressOfAsset(address)",
          "deposit(address,uint256,uint256,address,uint256,bool)",
          "withdraw(address,uint256,uint256,address,uint256)",
          "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)",
          "swap(address,address,uint256,uint256,address,uint256)",
          "quotePotentialDeposit(address,uint256)",
          "quotePotentialSwap(address,address,int256)",
          "quotePotentialWithdraw(address,uint256)",
          "quoteAmountIn(address,address,int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatRouter": {
        "src": "contracts/connectors/Wombat.sol:157",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountOut(address[],address[],int256)",
          "getAmountIn(address[],address[],uint256)",
          "swapExactTokensForTokens(address[],address[],uint256,uint256,address,uint256)",
          "swapExactNativeForTokens(address[],address[],uint256,address,uint256)",
          "swapExactTokensForNative(address[],address[],uint256,uint256,address,uint256)",
          "addLiquidityNative(address,uint256,address,uint256,bool)",
          "removeLiquidityNative(address,uint256,uint256,address,uint256)",
          "removeLiquidityFromOtherAssetAsNative(address,address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:WombatLibrary": {
        "src": "contracts/connectors/Wombat.sol:229",
        "version": {
          "withMetadata": "fded46865ae65c4a512ed814b08160c4d331ea14d354d194aa759a5d567106b1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IControlRole.sol:IControlRole": {
        "src": "contracts/interfaces/IControlRole.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/interfaces/IStrategy.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "netAssetValue()",
          "liquidationValue()",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/libraries/TokenMath.sol:OvnMath": {
        "src": "contracts/libraries/TokenMath.sol:4",
        "version": {
          "withMetadata": "c334a4703093078355fb94af80b3406193a520514b7ca3965d70f13389a62103",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyThenawUsdrUsdc.sol:StrategyThenawUsdrUsdc": {
        "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:11",
        "version": {
          "withMetadata": "8c93fde936ef4aaf16b36c1e298466691572d7086e0cc1b77578a265201c87a0",
          "withoutMetadata": "568a80c7d5225c794bce39c2d33ceffbd557c20d1837613adadac7f81a04730b",
          "linkedWithoutMetadata": "568a80c7d5225c794bce39c2d33ceffbd557c20d1837613adadac7f81a04730b"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/connectors/Chainlink.sol:ChainlinkLibrary",
          "contracts/libraries/TokenMath.sol:OvnMath",
          "contracts/connectors/Wombat.sol:WombatLibrary",
          "contracts/connectors/Thena.sol:ThenaLibrary",
          "hardhat/console.sol:console"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address,address,address,address,address,string))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "busd",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:33"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:34"
            },
            {
              "label": "wUsdr",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:35"
            },
            {
              "label": "the",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:36"
            },
            {
              "label": "pair",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IPair)3686",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:39"
            },
            {
              "label": "router",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IRouter)4036",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:40"
            },
            {
              "label": "gauge",
              "offset": 0,
              "slot": "307",
              "type": "t_contract(IGaugeV2)4223",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:41"
            },
            {
              "label": "wombatPool",
              "offset": 0,
              "slot": "308",
              "type": "t_address",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:42"
            },
            {
              "label": "wombatRouter",
              "offset": 0,
              "slot": "309",
              "type": "t_contract(IWombatRouter)5231",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:44"
            },
            {
              "label": "oracleBusd",
              "offset": 0,
              "slot": "310",
              "type": "t_contract(IPriceFeed)3166",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:46"
            },
            {
              "label": "oracleUsdc",
              "offset": 0,
              "slot": "311",
              "type": "t_contract(IPriceFeed)3166",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:47"
            },
            {
              "label": "busdDm",
              "offset": 0,
              "slot": "312",
              "type": "t_uint256",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:49"
            },
            {
              "label": "usdcDm",
              "offset": 0,
              "slot": "313",
              "type": "t_uint256",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:50"
            },
            {
              "label": "wUsdrDm",
              "offset": 0,
              "slot": "314",
              "type": "t_uint256",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:52"
            },
            {
              "label": "usdtDm",
              "offset": 0,
              "slot": "315",
              "type": "t_uint256",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:53"
            },
            {
              "label": "oracleUsdt",
              "offset": 0,
              "slot": "316",
              "type": "t_contract(IPriceFeed)3166",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:55"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "317",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:56"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "318",
              "type": "t_string_storage",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:57"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)2662": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IGaugeV2)4223": {
              "label": "contract IGaugeV2",
              "numberOfBytes": "20"
            },
            "t_contract(IPair)3686": {
              "label": "contract IPair",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)3166": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_contract(IRouter)4036": {
              "label": "contract IRouter",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatRouter)5231": {
              "label": "contract IWombatRouter",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "11dd6dc76097d36a942a70d2c126eb47bfe7dddb77078c805502f622dcf91b57",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "97ff9e065964bce249812dcca274af1d22161a47c8f083420e66690ceec47cde",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "57b0ff8e0b23b60b733c18a8d52fd2be04db1e06a971e4ac1e51bc7d70228fa9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "c105f9515d64744a1b37b5b09a5d5adfc3cc8c95f0c92b9cb23f1ff8e9e66927",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "9ddb95611794df92ed7f51febd0169b9cdd934bc35cdacd27e0ec2429297c49e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Strategy.sol:Strategy": {
        "src": "contracts/Strategy.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/libraries/TokenMath.sol:OvnMath"
        ],
        "methods": [
          "setPortfolioManager(address)",
          "setSlippages(uint256,uint256,uint256)",
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:ChainlinkLibrary": {
        "src": "contracts/connectors/Chainlink.sol:50",
        "version": {
          "withMetadata": "7cccaa7fd76280b78d7c678aa45479ba8298436b1f2bc65c0bd4edb78190d9a8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:IPriceFeed": {
        "src": "contracts/connectors/Chainlink.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "latestAnswer()",
          "latestTimestamp()",
          "latestRound()",
          "getAnswer(uint256)",
          "getTimestamp(uint256)",
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakePair": {
        "src": "contracts/connectors/PancakeV2.sol:149",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter01": {
        "src": "contracts/connectors/PancakeV2.sol:202",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter02": {
        "src": "contracts/connectors/PancakeV2.sol:296",
        "inherit": [
          "contracts/connectors/PancakeV2.sol:IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary": {
        "src": "contracts/connectors/PancakeV2.sol:6",
        "version": {
          "withMetadata": "3000d0a52084e9944ef4af7fc97727063b52aeda5b2db5f345162e60802a0006",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Thena.sol:IBribe": {
        "src": "contracts/connectors/Thena.sol:343",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_deposit(uint256,uint256)",
          "_withdraw(uint256,uint256)",
          "getRewardForOwner(uint256,address[])",
          "notifyRewardAmount(address,uint256)",
          "left(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Thena.sol:IGaugeV2": {
        "src": "contracts/connectors/Thena.sol:258",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isForPair()",
          "rewardToken()",
          "_VE()",
          "TOKEN()",
          "DISTRIBUTION()",
          "gaugeRewarder()",
          "internal_bribe()",
          "external_bribe()",
          "rewarderPid()",
          "DURATION()",
          "periodFinish()",
          "rewardRate()",
          "lastUpdateTime()",
          "rewardPerTokenStored()",
          "fees0()",
          "fees1()",
          "userRewardPerTokenPaid(address)",
          "rewards(address)",
          "_totalSupply()",
          "_balances(address)",
          "totalSupply()",
          "balanceOf(address)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "rewardForDuration()",
          "depositAll()",
          "deposit(uint256)",
          "withdrawAll()",
          "withdraw(uint256)",
          "withdrawAllAndHarvest()",
          "getReward()",
          "_periodFinish()",
          "claimFees()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Thena.sol:IPair": {
        "src": "contracts/connectors/Thena.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "stable()",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "factory()",
          "token0()",
          "token1()",
          "fees()",
          "reserve0()",
          "reserve1()",
          "blockTimestampLast()",
          "reserve0CumulativeLast()",
          "reserve1CumulativeLast()",
          "observationLength()",
          "lastObservation()",
          "metadata()",
          "tokens()",
          "isStable()",
          "claimFees()",
          "claimStakingFees()",
          "getReserves()",
          "currentCumulativePrices()",
          "current(address,uint256)",
          "quote(address,uint256,uint256)",
          "prices(address,uint256,uint256)",
          "sample(address,uint256,uint256,uint256)",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "getAmountOut(uint256,address)",
          "approve(address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Thena.sol:IRouter": {
        "src": "contracts/connectors/Thena.sol:116",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "weth()",
          "pairCodeHash()",
          "sortTokens(address,address)",
          "pairFor(address,address,bool)",
          "getReserves(address,address,bool)",
          "getAmountOut(uint256,address,address)",
          "getAmountsOut(uint256,struct IRouter.route[])",
          "isPair(address)",
          "quoteAddLiquidity(address,address,bool,uint256,uint256)",
          "quoteRemoveLiquidity(address,address,bool,uint256)",
          "addLiquidity(address,address,bool,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,bool,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,bool,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,bool,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,bool,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,bool,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSimple(uint256,uint256,address,address,bool,address,uint256)",
          "swapExactTokensForTokens(uint256,uint256,struct IRouter.route[],address,uint256)",
          "swapExactETHForTokens(uint256,struct IRouter.route[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,struct IRouter.route[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Thena.sol:ThenaLibrary": {
        "src": "contracts/connectors/Thena.sol:352",
        "version": {
          "withMetadata": "78a7d94e05a882510ba82494b072a097d429879183e53ed7d9bf513708738065",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "hardhat/console.sol:console"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IMasterWombatV2": {
        "src": "contracts/connectors/Wombat.sol:105",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(uint256,address)",
          "getAssetPid(address)",
          "poolLength()",
          "pendingTokens(uint256,address)",
          "rewarderBonusTokenInfo(uint256)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "multiClaim(uint256[])",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "migrate(uint256[])",
          "depositFor(uint256,uint256,address)",
          "updateFactor(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatAsset": {
        "src": "contracts/connectors/Wombat.sol:72",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlyingToken()",
          "pool()",
          "cash()",
          "liability()",
          "decimals()",
          "underlyingTokenDecimals()",
          "setPool(address)",
          "underlyingTokenBalance()",
          "transferUnderlyingToken(address,uint256)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "addCash(uint256)",
          "removeCash(uint256)",
          "addLiability(uint256)",
          "removeLiability(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatPool": {
        "src": "contracts/connectors/Wombat.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokens()",
          "addressOfAsset(address)",
          "deposit(address,uint256,uint256,address,uint256,bool)",
          "withdraw(address,uint256,uint256,address,uint256)",
          "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)",
          "swap(address,address,uint256,uint256,address,uint256)",
          "quotePotentialDeposit(address,uint256)",
          "quotePotentialSwap(address,address,int256)",
          "quotePotentialWithdraw(address,uint256)",
          "quoteAmountIn(address,address,int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatRouter": {
        "src": "contracts/connectors/Wombat.sol:157",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountOut(address[],address[],int256)",
          "getAmountIn(address[],address[],uint256)",
          "swapExactTokensForTokens(address[],address[],uint256,uint256,address,uint256)",
          "swapExactNativeForTokens(address[],address[],uint256,address,uint256)",
          "swapExactTokensForNative(address[],address[],uint256,uint256,address,uint256)",
          "addLiquidityNative(address,uint256,address,uint256,bool)",
          "removeLiquidityNative(address,uint256,uint256,address,uint256)",
          "removeLiquidityFromOtherAssetAsNative(address,address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:WombatLibrary": {
        "src": "contracts/connectors/Wombat.sol:229",
        "version": {
          "withMetadata": "fded46865ae65c4a512ed814b08160c4d331ea14d354d194aa759a5d567106b1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBaseRewardPool": {
        "src": "contracts/connectors/Wombex.sol:21",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "totalAssets()",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "maxMint(address)",
          "previewMint(uint256)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "lastTimeRewardApplicable(address)",
          "rewardPerToken(address)",
          "earned(address,address)",
          "claimableRewards(address)",
          "stake(uint256)",
          "stakeAll()",
          "stakeFor(address,uint256)",
          "withdraw(uint256,bool)",
          "withdrawAll(bool)",
          "withdrawAndUnwrap(uint256,bool)",
          "withdrawAllAndUnwrap(bool)",
          "getReward(address,bool)",
          "getReward()",
          "donate(address,uint256)",
          "processIdleRewards()",
          "rewardTokensLen()",
          "rewardTokensList()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBooster": {
        "src": "contracts/connectors/Wombex.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexPoolDepositor": {
        "src": "contracts/connectors/Wombex.sol:188",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256,bool)",
          "withdraw(address,uint256,uint256,address)",
          "getDepositAmountOut(address,uint256)",
          "getWithdrawAmountOut(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexVault": {
        "src": "contracts/connectors/Wombex.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "withdrawAndUnwrap(uint256,bool)",
          "getReward(address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IControlRole.sol:IControlRole": {
        "src": "contracts/interfaces/IControlRole.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/interfaces/IStrategy.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "netAssetValue()",
          "liquidationValue()",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/libraries/TokenMath.sol:OvnMath": {
        "src": "contracts/libraries/TokenMath.sol:4",
        "version": {
          "withMetadata": "c334a4703093078355fb94af80b3406193a520514b7ca3965d70f13389a62103",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyThenawUsdrUsdc.sol:StrategyThenawUsdrUsdc": {
        "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:11",
        "version": {
          "withMetadata": "73387f6250089c5bc078038a86da87aeb6f805193df62b9d3569b833ceb5a0bf",
          "withoutMetadata": "6153e1d3b740f2b1a6c973dcf874b2a64cd5f109a94ad4b3e5dc0f29e2ed9a5d",
          "linkedWithoutMetadata": "6153e1d3b740f2b1a6c973dcf874b2a64cd5f109a94ad4b3e5dc0f29e2ed9a5d"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/connectors/Chainlink.sol:ChainlinkLibrary",
          "contracts/libraries/TokenMath.sol:OvnMath",
          "contracts/connectors/Wombat.sol:WombatLibrary",
          "contracts/connectors/Thena.sol:ThenaLibrary",
          "hardhat/console.sol:console"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address,address,address,address,address,string))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "busd",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:33"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:34"
            },
            {
              "label": "wUsdr",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:35"
            },
            {
              "label": "the",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:36"
            },
            {
              "label": "pair",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IPair)4697",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:39"
            },
            {
              "label": "router",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IRouter)5047",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:40"
            },
            {
              "label": "gauge",
              "offset": 0,
              "slot": "307",
              "type": "t_contract(IGaugeV2)5234",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:41"
            },
            {
              "label": "wombatPool",
              "offset": 0,
              "slot": "308",
              "type": "t_address",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:42"
            },
            {
              "label": "wombatRouter",
              "offset": 0,
              "slot": "309",
              "type": "t_contract(IWombatRouter)6242",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:44"
            },
            {
              "label": "oracleBusd",
              "offset": 0,
              "slot": "310",
              "type": "t_contract(IPriceFeed)3166",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:46"
            },
            {
              "label": "oracleUsdc",
              "offset": 0,
              "slot": "311",
              "type": "t_contract(IPriceFeed)3166",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:47"
            },
            {
              "label": "busdDm",
              "offset": 0,
              "slot": "312",
              "type": "t_uint256",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:49"
            },
            {
              "label": "usdcDm",
              "offset": 0,
              "slot": "313",
              "type": "t_uint256",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:50"
            },
            {
              "label": "wUsdrDm",
              "offset": 0,
              "slot": "314",
              "type": "t_uint256",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:52"
            },
            {
              "label": "usdtDm",
              "offset": 0,
              "slot": "315",
              "type": "t_uint256",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:53"
            },
            {
              "label": "oracleUsdt",
              "offset": 0,
              "slot": "316",
              "type": "t_contract(IPriceFeed)3166",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:55"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "317",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:56"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "318",
              "type": "t_string_storage",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:57"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)2662": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IGaugeV2)5234": {
              "label": "contract IGaugeV2",
              "numberOfBytes": "20"
            },
            "t_contract(IPair)4697": {
              "label": "contract IPair",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)3166": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_contract(IRouter)5047": {
              "label": "contract IRouter",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatRouter)6242": {
              "label": "contract IWombatRouter",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyWombexUsdt+.sol:StrategyWombexUsdtPlus": {
        "src": "contracts/strategies/StrategyWombexUsdt+.sol:11",
        "version": {
          "withMetadata": "b3a4e727cb4785fc640d2537e31946680865301ee7fa577250672f66bee3d0a4",
          "withoutMetadata": "9e5ff6240193d6c3935302aeace817997c544005ca3837ec8aaec679df5d470f",
          "linkedWithoutMetadata": "9e5ff6240193d6c3935302aeace817997c544005ca3837ec8aaec679df5d470f"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "hardhat/console.sol:console",
          "contracts/connectors/Wombat.sol:WombatLibrary",
          "contracts/libraries/TokenMath.sol:OvnMath",
          "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary",
          "contracts/connectors/Chainlink.sol:ChainlinkLibrary"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address,address,address,address,string))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:33"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:34"
            },
            {
              "label": "usdtPlus",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:35"
            },
            {
              "label": "wom",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:36"
            },
            {
              "label": "wmx",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:37"
            },
            {
              "label": "lpUsdtPlus",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IWombatAsset)5970",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:39"
            },
            {
              "label": "wmxLpUsdtPlus",
              "offset": 0,
              "slot": "307",
              "type": "t_contract(IWombexBaseRewardPool)7109",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:40"
            },
            {
              "label": "poolDepositor",
              "offset": 0,
              "slot": "308",
              "type": "t_contract(IWombexPoolDepositor)7154",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:41"
            },
            {
              "label": "pool",
              "offset": 0,
              "slot": "309",
              "type": "t_address",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:42"
            },
            {
              "label": "pancakeRouter",
              "offset": 0,
              "slot": "310",
              "type": "t_contract(IPancakeRouter02)4378",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:44"
            },
            {
              "label": "lpUsdtDm",
              "offset": 0,
              "slot": "311",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:46"
            },
            {
              "label": "wombatRouter",
              "offset": 0,
              "slot": "312",
              "type": "t_contract(IWombatRouter)6242",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:49"
            },
            {
              "label": "oracleUsdt",
              "offset": 0,
              "slot": "313",
              "type": "t_contract(IPriceFeed)3166",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:51"
            },
            {
              "label": "usdtDm",
              "offset": 0,
              "slot": "314",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:53"
            },
            {
              "label": "usdtPlusDm",
              "offset": 0,
              "slot": "315",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:54"
            },
            {
              "label": "lpUsdtPlusDm",
              "offset": 0,
              "slot": "316",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:55"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "317",
              "type": "t_string_storage",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)2662": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IPancakeRouter02)4378": {
              "label": "contract IPancakeRouter02",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)3166": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatAsset)5970": {
              "label": "contract IWombatAsset",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatRouter)6242": {
              "label": "contract IWombatRouter",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexBaseRewardPool)7109": {
              "label": "contract IWombexBaseRewardPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexPoolDepositor)7154": {
              "label": "contract IWombexPoolDepositor",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "11dd6dc76097d36a942a70d2c126eb47bfe7dddb77078c805502f622dcf91b57",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "97ff9e065964bce249812dcca274af1d22161a47c8f083420e66690ceec47cde",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "57b0ff8e0b23b60b733c18a8d52fd2be04db1e06a971e4ac1e51bc7d70228fa9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "c105f9515d64744a1b37b5b09a5d5adfc3cc8c95f0c92b9cb23f1ff8e9e66927",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "9ddb95611794df92ed7f51febd0169b9cdd934bc35cdacd27e0ec2429297c49e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Strategy.sol:Strategy": {
        "src": "contracts/Strategy.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/libraries/TokenMath.sol:OvnMath"
        ],
        "methods": [
          "setPortfolioManager(address)",
          "setSlippages(uint256,uint256,uint256)",
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:ChainlinkLibrary": {
        "src": "contracts/connectors/Chainlink.sol:50",
        "version": {
          "withMetadata": "7cccaa7fd76280b78d7c678aa45479ba8298436b1f2bc65c0bd4edb78190d9a8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:IPriceFeed": {
        "src": "contracts/connectors/Chainlink.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "latestAnswer()",
          "latestTimestamp()",
          "latestRound()",
          "getAnswer(uint256)",
          "getTimestamp(uint256)",
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakePair": {
        "src": "contracts/connectors/PancakeV2.sol:149",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter01": {
        "src": "contracts/connectors/PancakeV2.sol:202",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter02": {
        "src": "contracts/connectors/PancakeV2.sol:296",
        "inherit": [
          "contracts/connectors/PancakeV2.sol:IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary": {
        "src": "contracts/connectors/PancakeV2.sol:6",
        "version": {
          "withMetadata": "3000d0a52084e9944ef4af7fc97727063b52aeda5b2db5f345162e60802a0006",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IMasterWombatV2": {
        "src": "contracts/connectors/Wombat.sol:105",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(uint256,address)",
          "getAssetPid(address)",
          "poolLength()",
          "pendingTokens(uint256,address)",
          "rewarderBonusTokenInfo(uint256)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "multiClaim(uint256[])",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "migrate(uint256[])",
          "depositFor(uint256,uint256,address)",
          "updateFactor(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatAsset": {
        "src": "contracts/connectors/Wombat.sol:72",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlyingToken()",
          "pool()",
          "cash()",
          "liability()",
          "decimals()",
          "underlyingTokenDecimals()",
          "setPool(address)",
          "underlyingTokenBalance()",
          "transferUnderlyingToken(address,uint256)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "addCash(uint256)",
          "removeCash(uint256)",
          "addLiability(uint256)",
          "removeLiability(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatPool": {
        "src": "contracts/connectors/Wombat.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokens()",
          "addressOfAsset(address)",
          "deposit(address,uint256,uint256,address,uint256,bool)",
          "withdraw(address,uint256,uint256,address,uint256)",
          "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)",
          "swap(address,address,uint256,uint256,address,uint256)",
          "quotePotentialDeposit(address,uint256)",
          "quotePotentialSwap(address,address,int256)",
          "quotePotentialWithdraw(address,uint256)",
          "quoteAmountIn(address,address,int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatRouter": {
        "src": "contracts/connectors/Wombat.sol:157",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountOut(address[],address[],int256)",
          "getAmountIn(address[],address[],uint256)",
          "swapExactTokensForTokens(address[],address[],uint256,uint256,address,uint256)",
          "swapExactNativeForTokens(address[],address[],uint256,address,uint256)",
          "swapExactTokensForNative(address[],address[],uint256,uint256,address,uint256)",
          "addLiquidityNative(address,uint256,address,uint256,bool)",
          "removeLiquidityNative(address,uint256,uint256,address,uint256)",
          "removeLiquidityFromOtherAssetAsNative(address,address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:WombatLibrary": {
        "src": "contracts/connectors/Wombat.sol:229",
        "version": {
          "withMetadata": "fded46865ae65c4a512ed814b08160c4d331ea14d354d194aa759a5d567106b1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBaseRewardPool": {
        "src": "contracts/connectors/Wombex.sol:21",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "totalAssets()",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "maxMint(address)",
          "previewMint(uint256)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "lastTimeRewardApplicable(address)",
          "rewardPerToken(address)",
          "earned(address,address)",
          "claimableRewards(address)",
          "stake(uint256)",
          "stakeAll()",
          "stakeFor(address,uint256)",
          "withdraw(uint256,bool)",
          "withdrawAll(bool)",
          "withdrawAndUnwrap(uint256,bool)",
          "withdrawAllAndUnwrap(bool)",
          "getReward(address,bool)",
          "getReward()",
          "donate(address,uint256)",
          "processIdleRewards()",
          "rewardTokensLen()",
          "rewardTokensList()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBooster": {
        "src": "contracts/connectors/Wombex.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexPoolDepositor": {
        "src": "contracts/connectors/Wombex.sol:188",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256,bool)",
          "withdraw(address,uint256,uint256,address)",
          "getDepositAmountOut(address,uint256)",
          "getWithdrawAmountOut(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexVault": {
        "src": "contracts/connectors/Wombex.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "withdrawAndUnwrap(uint256,bool)",
          "getReward(address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IControlRole.sol:IControlRole": {
        "src": "contracts/interfaces/IControlRole.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/interfaces/IStrategy.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "netAssetValue()",
          "liquidationValue()",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/libraries/TokenMath.sol:OvnMath": {
        "src": "contracts/libraries/TokenMath.sol:4",
        "version": {
          "withMetadata": "c334a4703093078355fb94af80b3406193a520514b7ca3965d70f13389a62103",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyWombexUsdt+.sol:StrategyWombexUsdtPlus": {
        "src": "contracts/strategies/StrategyWombexUsdt+.sol:11",
        "version": {
          "withMetadata": "fb1c37d96c6410ff7c7cf0f23c740c1a815d7720901a12af9be375edc677bfb3",
          "withoutMetadata": "c8decde8f3304d0afc9637ef5d6de43ed800c6a3a15763e878cc8f73c6afc42d",
          "linkedWithoutMetadata": "c8decde8f3304d0afc9637ef5d6de43ed800c6a3a15763e878cc8f73c6afc42d"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "hardhat/console.sol:console",
          "contracts/connectors/Wombat.sol:WombatLibrary",
          "contracts/libraries/TokenMath.sol:OvnMath",
          "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary",
          "contracts/connectors/Chainlink.sol:ChainlinkLibrary"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address,address,address,address,string))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:33"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:34"
            },
            {
              "label": "usdtPlus",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:35"
            },
            {
              "label": "wom",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:36"
            },
            {
              "label": "wmx",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:37"
            },
            {
              "label": "lpUsdtPlus",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IWombatAsset)4595",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:39"
            },
            {
              "label": "wmxLpUsdtPlus",
              "offset": 0,
              "slot": "307",
              "type": "t_contract(IWombexBaseRewardPool)5734",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:40"
            },
            {
              "label": "poolDepositor",
              "offset": 0,
              "slot": "308",
              "type": "t_contract(IWombexPoolDepositor)5779",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:41"
            },
            {
              "label": "pool",
              "offset": 0,
              "slot": "309",
              "type": "t_address",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:42"
            },
            {
              "label": "pancakeRouter",
              "offset": 0,
              "slot": "310",
              "type": "t_contract(IPancakeRouter02)4378",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:44"
            },
            {
              "label": "lpUsdtDm",
              "offset": 0,
              "slot": "311",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:46"
            },
            {
              "label": "wombatRouter",
              "offset": 0,
              "slot": "312",
              "type": "t_contract(IWombatRouter)4867",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:49"
            },
            {
              "label": "oracleUsdt",
              "offset": 0,
              "slot": "313",
              "type": "t_contract(IPriceFeed)3166",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:51"
            },
            {
              "label": "usdtDm",
              "offset": 0,
              "slot": "314",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:53"
            },
            {
              "label": "usdtPlusDm",
              "offset": 0,
              "slot": "315",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:54"
            },
            {
              "label": "lpUsdtPlusDm",
              "offset": 0,
              "slot": "316",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:55"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "317",
              "type": "t_string_storage",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)2662": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IPancakeRouter02)4378": {
              "label": "contract IPancakeRouter02",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)3166": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatAsset)4595": {
              "label": "contract IWombatAsset",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatRouter)4867": {
              "label": "contract IWombatRouter",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexBaseRewardPool)5734": {
              "label": "contract IWombexBaseRewardPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexPoolDepositor)5779": {
              "label": "contract IWombexPoolDepositor",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "11dd6dc76097d36a942a70d2c126eb47bfe7dddb77078c805502f622dcf91b57",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "97ff9e065964bce249812dcca274af1d22161a47c8f083420e66690ceec47cde",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "57b0ff8e0b23b60b733c18a8d52fd2be04db1e06a971e4ac1e51bc7d70228fa9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "c105f9515d64744a1b37b5b09a5d5adfc3cc8c95f0c92b9cb23f1ff8e9e66927",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "9ddb95611794df92ed7f51febd0169b9cdd934bc35cdacd27e0ec2429297c49e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Strategy.sol:Strategy": {
        "src": "contracts/Strategy.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/libraries/TokenMath.sol:OvnMath"
        ],
        "methods": [
          "setPortfolioManager(address)",
          "setSlippages(uint256,uint256,uint256)",
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:ChainlinkLibrary": {
        "src": "contracts/connectors/Chainlink.sol:50",
        "version": {
          "withMetadata": "7cccaa7fd76280b78d7c678aa45479ba8298436b1f2bc65c0bd4edb78190d9a8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:IPriceFeed": {
        "src": "contracts/connectors/Chainlink.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "latestAnswer()",
          "latestTimestamp()",
          "latestRound()",
          "getAnswer(uint256)",
          "getTimestamp(uint256)",
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakePair": {
        "src": "contracts/connectors/PancakeV2.sol:149",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter01": {
        "src": "contracts/connectors/PancakeV2.sol:202",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter02": {
        "src": "contracts/connectors/PancakeV2.sol:296",
        "inherit": [
          "contracts/connectors/PancakeV2.sol:IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary": {
        "src": "contracts/connectors/PancakeV2.sol:6",
        "version": {
          "withMetadata": "3000d0a52084e9944ef4af7fc97727063b52aeda5b2db5f345162e60802a0006",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IMasterWombatV2": {
        "src": "contracts/connectors/Wombat.sol:105",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(uint256,address)",
          "getAssetPid(address)",
          "poolLength()",
          "pendingTokens(uint256,address)",
          "rewarderBonusTokenInfo(uint256)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "multiClaim(uint256[])",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "migrate(uint256[])",
          "depositFor(uint256,uint256,address)",
          "updateFactor(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatAsset": {
        "src": "contracts/connectors/Wombat.sol:72",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlyingToken()",
          "pool()",
          "cash()",
          "liability()",
          "decimals()",
          "underlyingTokenDecimals()",
          "setPool(address)",
          "underlyingTokenBalance()",
          "transferUnderlyingToken(address,uint256)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "addCash(uint256)",
          "removeCash(uint256)",
          "addLiability(uint256)",
          "removeLiability(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatPool": {
        "src": "contracts/connectors/Wombat.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokens()",
          "addressOfAsset(address)",
          "deposit(address,uint256,uint256,address,uint256,bool)",
          "withdraw(address,uint256,uint256,address,uint256)",
          "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)",
          "swap(address,address,uint256,uint256,address,uint256)",
          "quotePotentialDeposit(address,uint256)",
          "quotePotentialSwap(address,address,int256)",
          "quotePotentialWithdraw(address,uint256)",
          "quoteAmountIn(address,address,int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatRouter": {
        "src": "contracts/connectors/Wombat.sol:157",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountOut(address[],address[],int256)",
          "getAmountIn(address[],address[],uint256)",
          "swapExactTokensForTokens(address[],address[],uint256,uint256,address,uint256)",
          "swapExactNativeForTokens(address[],address[],uint256,address,uint256)",
          "swapExactTokensForNative(address[],address[],uint256,uint256,address,uint256)",
          "addLiquidityNative(address,uint256,address,uint256,bool)",
          "removeLiquidityNative(address,uint256,uint256,address,uint256)",
          "removeLiquidityFromOtherAssetAsNative(address,address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:WombatLibrary": {
        "src": "contracts/connectors/Wombat.sol:229",
        "version": {
          "withMetadata": "fded46865ae65c4a512ed814b08160c4d331ea14d354d194aa759a5d567106b1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBaseRewardPool": {
        "src": "contracts/connectors/Wombex.sol:21",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "totalAssets()",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "maxMint(address)",
          "previewMint(uint256)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "lastTimeRewardApplicable(address)",
          "rewardPerToken(address)",
          "earned(address,address)",
          "claimableRewards(address)",
          "stake(uint256)",
          "stakeAll()",
          "stakeFor(address,uint256)",
          "withdraw(uint256,bool)",
          "withdrawAll(bool)",
          "withdrawAndUnwrap(uint256,bool)",
          "withdrawAllAndUnwrap(bool)",
          "getReward(address,bool)",
          "getReward()",
          "donate(address,uint256)",
          "processIdleRewards()",
          "rewardTokensLen()",
          "rewardTokensList()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBooster": {
        "src": "contracts/connectors/Wombex.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexPoolDepositor": {
        "src": "contracts/connectors/Wombex.sol:188",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256,bool)",
          "withdraw(address,uint256,uint256,address)",
          "getDepositAmountOut(address,uint256)",
          "getWithdrawAmountOut(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexVault": {
        "src": "contracts/connectors/Wombex.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "withdrawAndUnwrap(uint256,bool)",
          "getReward(address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IControlRole.sol:IControlRole": {
        "src": "contracts/interfaces/IControlRole.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/interfaces/IStrategy.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "netAssetValue()",
          "liquidationValue()",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/libraries/TokenMath.sol:OvnMath": {
        "src": "contracts/libraries/TokenMath.sol:4",
        "version": {
          "withMetadata": "c334a4703093078355fb94af80b3406193a520514b7ca3965d70f13389a62103",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyWombexUsdt+.sol:StrategyWombexUsdtPlus": {
        "src": "contracts/strategies/StrategyWombexUsdt+.sol:11",
        "version": {
          "withMetadata": "499c7403b4bb99c991c53cabd0e4b8b0fd1c053799d7cfd13342632257738302",
          "withoutMetadata": "0debc2d76bc1e6057e95583a4b63ab004b085f39504070dc7727e21da7e3cfc5",
          "linkedWithoutMetadata": "0debc2d76bc1e6057e95583a4b63ab004b085f39504070dc7727e21da7e3cfc5"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "hardhat/console.sol:console",
          "contracts/connectors/Wombat.sol:WombatLibrary",
          "contracts/libraries/TokenMath.sol:OvnMath",
          "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary",
          "contracts/connectors/Chainlink.sol:ChainlinkLibrary"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address,address,address,address,string))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:33"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:34"
            },
            {
              "label": "usdtPlus",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:35"
            },
            {
              "label": "wom",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:36"
            },
            {
              "label": "wmx",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:37"
            },
            {
              "label": "lpUsdtPlus",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IWombatAsset)4595",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:39"
            },
            {
              "label": "wmxLpUsdtPlus",
              "offset": 0,
              "slot": "307",
              "type": "t_contract(IWombexBaseRewardPool)5734",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:40"
            },
            {
              "label": "poolDepositor",
              "offset": 0,
              "slot": "308",
              "type": "t_contract(IWombexPoolDepositor)5779",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:41"
            },
            {
              "label": "pool",
              "offset": 0,
              "slot": "309",
              "type": "t_address",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:42"
            },
            {
              "label": "pancakeRouter",
              "offset": 0,
              "slot": "310",
              "type": "t_contract(IPancakeRouter02)4378",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:44"
            },
            {
              "label": "lpUsdtDm",
              "offset": 0,
              "slot": "311",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:46"
            },
            {
              "label": "wombatRouter",
              "offset": 0,
              "slot": "312",
              "type": "t_contract(IWombatRouter)4867",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:49"
            },
            {
              "label": "oracleUsdt",
              "offset": 0,
              "slot": "313",
              "type": "t_contract(IPriceFeed)3166",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:51"
            },
            {
              "label": "usdtDm",
              "offset": 0,
              "slot": "314",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:53"
            },
            {
              "label": "usdtPlusDm",
              "offset": 0,
              "slot": "315",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:54"
            },
            {
              "label": "lpUsdtPlusDm",
              "offset": 0,
              "slot": "316",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:55"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "317",
              "type": "t_string_storage",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)2662": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IPancakeRouter02)4378": {
              "label": "contract IPancakeRouter02",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)3166": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatAsset)4595": {
              "label": "contract IWombatAsset",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatRouter)4867": {
              "label": "contract IWombatRouter",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexBaseRewardPool)5734": {
              "label": "contract IWombexBaseRewardPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexPoolDepositor)5779": {
              "label": "contract IWombexPoolDepositor",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "11dd6dc76097d36a942a70d2c126eb47bfe7dddb77078c805502f622dcf91b57",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "97ff9e065964bce249812dcca274af1d22161a47c8f083420e66690ceec47cde",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "57b0ff8e0b23b60b733c18a8d52fd2be04db1e06a971e4ac1e51bc7d70228fa9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "c105f9515d64744a1b37b5b09a5d5adfc3cc8c95f0c92b9cb23f1ff8e9e66927",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "9ddb95611794df92ed7f51febd0169b9cdd934bc35cdacd27e0ec2429297c49e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Strategy.sol:Strategy": {
        "src": "contracts/Strategy.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/libraries/TokenMath.sol:OvnMath"
        ],
        "methods": [
          "setPortfolioManager(address)",
          "setSlippages(uint256,uint256,uint256)",
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:ChainlinkLibrary": {
        "src": "contracts/connectors/Chainlink.sol:50",
        "version": {
          "withMetadata": "7cccaa7fd76280b78d7c678aa45479ba8298436b1f2bc65c0bd4edb78190d9a8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:IPriceFeed": {
        "src": "contracts/connectors/Chainlink.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "latestAnswer()",
          "latestTimestamp()",
          "latestRound()",
          "getAnswer(uint256)",
          "getTimestamp(uint256)",
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakePair": {
        "src": "contracts/connectors/PancakeV2.sol:149",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter01": {
        "src": "contracts/connectors/PancakeV2.sol:202",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter02": {
        "src": "contracts/connectors/PancakeV2.sol:296",
        "inherit": [
          "contracts/connectors/PancakeV2.sol:IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary": {
        "src": "contracts/connectors/PancakeV2.sol:6",
        "version": {
          "withMetadata": "3000d0a52084e9944ef4af7fc97727063b52aeda5b2db5f345162e60802a0006",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IMasterWombatV2": {
        "src": "contracts/connectors/Wombat.sol:105",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(uint256,address)",
          "getAssetPid(address)",
          "poolLength()",
          "pendingTokens(uint256,address)",
          "rewarderBonusTokenInfo(uint256)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "multiClaim(uint256[])",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "migrate(uint256[])",
          "depositFor(uint256,uint256,address)",
          "updateFactor(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatAsset": {
        "src": "contracts/connectors/Wombat.sol:72",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlyingToken()",
          "pool()",
          "cash()",
          "liability()",
          "decimals()",
          "underlyingTokenDecimals()",
          "setPool(address)",
          "underlyingTokenBalance()",
          "transferUnderlyingToken(address,uint256)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "addCash(uint256)",
          "removeCash(uint256)",
          "addLiability(uint256)",
          "removeLiability(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatPool": {
        "src": "contracts/connectors/Wombat.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokens()",
          "addressOfAsset(address)",
          "deposit(address,uint256,uint256,address,uint256,bool)",
          "withdraw(address,uint256,uint256,address,uint256)",
          "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)",
          "swap(address,address,uint256,uint256,address,uint256)",
          "quotePotentialDeposit(address,uint256)",
          "quotePotentialSwap(address,address,int256)",
          "quotePotentialWithdraw(address,uint256)",
          "quoteAmountIn(address,address,int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatRouter": {
        "src": "contracts/connectors/Wombat.sol:157",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountOut(address[],address[],int256)",
          "getAmountIn(address[],address[],uint256)",
          "swapExactTokensForTokens(address[],address[],uint256,uint256,address,uint256)",
          "swapExactNativeForTokens(address[],address[],uint256,address,uint256)",
          "swapExactTokensForNative(address[],address[],uint256,uint256,address,uint256)",
          "addLiquidityNative(address,uint256,address,uint256,bool)",
          "removeLiquidityNative(address,uint256,uint256,address,uint256)",
          "removeLiquidityFromOtherAssetAsNative(address,address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:WombatLibrary": {
        "src": "contracts/connectors/Wombat.sol:229",
        "version": {
          "withMetadata": "fded46865ae65c4a512ed814b08160c4d331ea14d354d194aa759a5d567106b1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBaseRewardPool": {
        "src": "contracts/connectors/Wombex.sol:21",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "totalAssets()",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "maxMint(address)",
          "previewMint(uint256)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "lastTimeRewardApplicable(address)",
          "rewardPerToken(address)",
          "earned(address,address)",
          "claimableRewards(address)",
          "stake(uint256)",
          "stakeAll()",
          "stakeFor(address,uint256)",
          "withdraw(uint256,bool)",
          "withdrawAll(bool)",
          "withdrawAndUnwrap(uint256,bool)",
          "withdrawAllAndUnwrap(bool)",
          "getReward(address,bool)",
          "getReward()",
          "donate(address,uint256)",
          "processIdleRewards()",
          "rewardTokensLen()",
          "rewardTokensList()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBooster": {
        "src": "contracts/connectors/Wombex.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexPoolDepositor": {
        "src": "contracts/connectors/Wombex.sol:188",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256,bool)",
          "withdraw(address,uint256,uint256,address)",
          "getDepositAmountOut(address,uint256)",
          "getWithdrawAmountOut(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexVault": {
        "src": "contracts/connectors/Wombex.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "withdrawAndUnwrap(uint256,bool)",
          "getReward(address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IControlRole.sol:IControlRole": {
        "src": "contracts/interfaces/IControlRole.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/interfaces/IStrategy.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "netAssetValue()",
          "liquidationValue()",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/libraries/TokenMath.sol:OvnMath": {
        "src": "contracts/libraries/TokenMath.sol:4",
        "version": {
          "withMetadata": "c334a4703093078355fb94af80b3406193a520514b7ca3965d70f13389a62103",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyWombexUsdt+.sol:StrategyWombexUsdtPlus": {
        "src": "contracts/strategies/StrategyWombexUsdt+.sol:11",
        "version": {
          "withMetadata": "474f846214bbdc3bf9a637f9c6d03c17f8230af4073762f3c067c88fa69cdd82",
          "withoutMetadata": "b9def96deeeca9808e0a93605ca1103b2f578085305bfeca2ce4396b6bb12686",
          "linkedWithoutMetadata": "b9def96deeeca9808e0a93605ca1103b2f578085305bfeca2ce4396b6bb12686"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "hardhat/console.sol:console",
          "contracts/connectors/Wombat.sol:WombatLibrary",
          "contracts/libraries/TokenMath.sol:OvnMath",
          "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary",
          "contracts/connectors/Chainlink.sol:ChainlinkLibrary"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address,address,address,address,string))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:33"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:34"
            },
            {
              "label": "usdtPlus",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:35"
            },
            {
              "label": "wom",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:36"
            },
            {
              "label": "wmx",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:37"
            },
            {
              "label": "lpUsdtPlus",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IWombatAsset)4595",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:39"
            },
            {
              "label": "wmxLpUsdtPlus",
              "offset": 0,
              "slot": "307",
              "type": "t_contract(IWombexBaseRewardPool)5734",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:40"
            },
            {
              "label": "poolDepositor",
              "offset": 0,
              "slot": "308",
              "type": "t_contract(IWombexPoolDepositor)5779",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:41"
            },
            {
              "label": "pool",
              "offset": 0,
              "slot": "309",
              "type": "t_address",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:42"
            },
            {
              "label": "pancakeRouter",
              "offset": 0,
              "slot": "310",
              "type": "t_contract(IPancakeRouter02)4378",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:44"
            },
            {
              "label": "lpUsdtDm",
              "offset": 0,
              "slot": "311",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:46"
            },
            {
              "label": "wombatRouter",
              "offset": 0,
              "slot": "312",
              "type": "t_contract(IWombatRouter)4867",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:49"
            },
            {
              "label": "oracleUsdt",
              "offset": 0,
              "slot": "313",
              "type": "t_contract(IPriceFeed)3166",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:51"
            },
            {
              "label": "usdtDm",
              "offset": 0,
              "slot": "314",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:53"
            },
            {
              "label": "usdtPlusDm",
              "offset": 0,
              "slot": "315",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:54"
            },
            {
              "label": "lpUsdtPlusDm",
              "offset": 0,
              "slot": "316",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:55"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "317",
              "type": "t_string_storage",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)2662": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IPancakeRouter02)4378": {
              "label": "contract IPancakeRouter02",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)3166": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatAsset)4595": {
              "label": "contract IWombatAsset",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatRouter)4867": {
              "label": "contract IWombatRouter",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexBaseRewardPool)5734": {
              "label": "contract IWombexBaseRewardPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexPoolDepositor)5779": {
              "label": "contract IWombexPoolDepositor",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "11dd6dc76097d36a942a70d2c126eb47bfe7dddb77078c805502f622dcf91b57",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "97ff9e065964bce249812dcca274af1d22161a47c8f083420e66690ceec47cde",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "57b0ff8e0b23b60b733c18a8d52fd2be04db1e06a971e4ac1e51bc7d70228fa9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "c105f9515d64744a1b37b5b09a5d5adfc3cc8c95f0c92b9cb23f1ff8e9e66927",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "9ddb95611794df92ed7f51febd0169b9cdd934bc35cdacd27e0ec2429297c49e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Strategy.sol:Strategy": {
        "src": "contracts/Strategy.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/libraries/TokenMath.sol:OvnMath"
        ],
        "methods": [
          "setPortfolioManager(address)",
          "setSlippages(uint256,uint256,uint256)",
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:ChainlinkLibrary": {
        "src": "contracts/connectors/Chainlink.sol:50",
        "version": {
          "withMetadata": "7cccaa7fd76280b78d7c678aa45479ba8298436b1f2bc65c0bd4edb78190d9a8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:IPriceFeed": {
        "src": "contracts/connectors/Chainlink.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "latestAnswer()",
          "latestTimestamp()",
          "latestRound()",
          "getAnswer(uint256)",
          "getTimestamp(uint256)",
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakePair": {
        "src": "contracts/connectors/PancakeV2.sol:149",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter01": {
        "src": "contracts/connectors/PancakeV2.sol:202",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter02": {
        "src": "contracts/connectors/PancakeV2.sol:296",
        "inherit": [
          "contracts/connectors/PancakeV2.sol:IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary": {
        "src": "contracts/connectors/PancakeV2.sol:6",
        "version": {
          "withMetadata": "3000d0a52084e9944ef4af7fc97727063b52aeda5b2db5f345162e60802a0006",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IMasterWombatV2": {
        "src": "contracts/connectors/Wombat.sol:105",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(uint256,address)",
          "getAssetPid(address)",
          "poolLength()",
          "pendingTokens(uint256,address)",
          "rewarderBonusTokenInfo(uint256)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "multiClaim(uint256[])",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "migrate(uint256[])",
          "depositFor(uint256,uint256,address)",
          "updateFactor(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatAsset": {
        "src": "contracts/connectors/Wombat.sol:72",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlyingToken()",
          "pool()",
          "cash()",
          "liability()",
          "decimals()",
          "underlyingTokenDecimals()",
          "setPool(address)",
          "underlyingTokenBalance()",
          "transferUnderlyingToken(address,uint256)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "addCash(uint256)",
          "removeCash(uint256)",
          "addLiability(uint256)",
          "removeLiability(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatPool": {
        "src": "contracts/connectors/Wombat.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokens()",
          "addressOfAsset(address)",
          "deposit(address,uint256,uint256,address,uint256,bool)",
          "withdraw(address,uint256,uint256,address,uint256)",
          "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)",
          "swap(address,address,uint256,uint256,address,uint256)",
          "quotePotentialDeposit(address,uint256)",
          "quotePotentialSwap(address,address,int256)",
          "quotePotentialWithdraw(address,uint256)",
          "quoteAmountIn(address,address,int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatRouter": {
        "src": "contracts/connectors/Wombat.sol:157",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountOut(address[],address[],int256)",
          "getAmountIn(address[],address[],uint256)",
          "swapExactTokensForTokens(address[],address[],uint256,uint256,address,uint256)",
          "swapExactNativeForTokens(address[],address[],uint256,address,uint256)",
          "swapExactTokensForNative(address[],address[],uint256,uint256,address,uint256)",
          "addLiquidityNative(address,uint256,address,uint256,bool)",
          "removeLiquidityNative(address,uint256,uint256,address,uint256)",
          "removeLiquidityFromOtherAssetAsNative(address,address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:WombatLibrary": {
        "src": "contracts/connectors/Wombat.sol:229",
        "version": {
          "withMetadata": "fded46865ae65c4a512ed814b08160c4d331ea14d354d194aa759a5d567106b1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBaseRewardPool": {
        "src": "contracts/connectors/Wombex.sol:21",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "totalAssets()",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "maxMint(address)",
          "previewMint(uint256)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "lastTimeRewardApplicable(address)",
          "rewardPerToken(address)",
          "earned(address,address)",
          "claimableRewards(address)",
          "stake(uint256)",
          "stakeAll()",
          "stakeFor(address,uint256)",
          "withdraw(uint256,bool)",
          "withdrawAll(bool)",
          "withdrawAndUnwrap(uint256,bool)",
          "withdrawAllAndUnwrap(bool)",
          "getReward(address,bool)",
          "getReward()",
          "donate(address,uint256)",
          "processIdleRewards()",
          "rewardTokensLen()",
          "rewardTokensList()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBooster": {
        "src": "contracts/connectors/Wombex.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexPoolDepositor": {
        "src": "contracts/connectors/Wombex.sol:188",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256,bool)",
          "withdraw(address,uint256,uint256,address)",
          "getDepositAmountOut(address,uint256)",
          "getWithdrawAmountOut(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexVault": {
        "src": "contracts/connectors/Wombex.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "withdrawAndUnwrap(uint256,bool)",
          "getReward(address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IControlRole.sol:IControlRole": {
        "src": "contracts/interfaces/IControlRole.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/interfaces/IStrategy.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "netAssetValue()",
          "liquidationValue()",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/libraries/TokenMath.sol:OvnMath": {
        "src": "contracts/libraries/TokenMath.sol:4",
        "version": {
          "withMetadata": "c334a4703093078355fb94af80b3406193a520514b7ca3965d70f13389a62103",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyWombexUsdt+.sol:StrategyWombexUsdtPlus": {
        "src": "contracts/strategies/StrategyWombexUsdt+.sol:11",
        "version": {
          "withMetadata": "c449bff49040f8e9021c502e27294a98cec710cbbf5d43d8cb3268291d069528",
          "withoutMetadata": "13d5e9dbc88d274ffbe313727d507abcccf10d19e72e3120df7ab52a5e9d7204",
          "linkedWithoutMetadata": "13d5e9dbc88d274ffbe313727d507abcccf10d19e72e3120df7ab52a5e9d7204"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "hardhat/console.sol:console",
          "contracts/connectors/Wombat.sol:WombatLibrary",
          "contracts/libraries/TokenMath.sol:OvnMath",
          "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary",
          "contracts/connectors/Chainlink.sol:ChainlinkLibrary"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address,address,address,address,string))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:33"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:34"
            },
            {
              "label": "usdtPlus",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:35"
            },
            {
              "label": "wom",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:36"
            },
            {
              "label": "wmx",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:37"
            },
            {
              "label": "lpUsdtPlus",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IWombatAsset)4595",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:39"
            },
            {
              "label": "wmxLpUsdtPlus",
              "offset": 0,
              "slot": "307",
              "type": "t_contract(IWombexBaseRewardPool)5734",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:40"
            },
            {
              "label": "poolDepositor",
              "offset": 0,
              "slot": "308",
              "type": "t_contract(IWombexPoolDepositor)5779",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:41"
            },
            {
              "label": "pool",
              "offset": 0,
              "slot": "309",
              "type": "t_address",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:42"
            },
            {
              "label": "pancakeRouter",
              "offset": 0,
              "slot": "310",
              "type": "t_contract(IPancakeRouter02)4378",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:44"
            },
            {
              "label": "lpUsdtDm",
              "offset": 0,
              "slot": "311",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:46"
            },
            {
              "label": "wombatRouter",
              "offset": 0,
              "slot": "312",
              "type": "t_contract(IWombatRouter)4867",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:49"
            },
            {
              "label": "oracleUsdt",
              "offset": 0,
              "slot": "313",
              "type": "t_contract(IPriceFeed)3166",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:51"
            },
            {
              "label": "usdtDm",
              "offset": 0,
              "slot": "314",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:53"
            },
            {
              "label": "usdtPlusDm",
              "offset": 0,
              "slot": "315",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:54"
            },
            {
              "label": "lpUsdtPlusDm",
              "offset": 0,
              "slot": "316",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:55"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "317",
              "type": "t_string_storage",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)2662": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IPancakeRouter02)4378": {
              "label": "contract IPancakeRouter02",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)3166": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatAsset)4595": {
              "label": "contract IWombatAsset",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatRouter)4867": {
              "label": "contract IWombatRouter",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexBaseRewardPool)5734": {
              "label": "contract IWombexBaseRewardPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexPoolDepositor)5779": {
              "label": "contract IWombexPoolDepositor",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "11dd6dc76097d36a942a70d2c126eb47bfe7dddb77078c805502f622dcf91b57",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "97ff9e065964bce249812dcca274af1d22161a47c8f083420e66690ceec47cde",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "57b0ff8e0b23b60b733c18a8d52fd2be04db1e06a971e4ac1e51bc7d70228fa9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "c105f9515d64744a1b37b5b09a5d5adfc3cc8c95f0c92b9cb23f1ff8e9e66927",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "9ddb95611794df92ed7f51febd0169b9cdd934bc35cdacd27e0ec2429297c49e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Strategy.sol:Strategy": {
        "src": "contracts/Strategy.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/libraries/TokenMath.sol:OvnMath"
        ],
        "methods": [
          "setPortfolioManager(address)",
          "setSlippages(uint256,uint256,uint256)",
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:ChainlinkLibrary": {
        "src": "contracts/connectors/Chainlink.sol:50",
        "version": {
          "withMetadata": "7cccaa7fd76280b78d7c678aa45479ba8298436b1f2bc65c0bd4edb78190d9a8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:IPriceFeed": {
        "src": "contracts/connectors/Chainlink.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "latestAnswer()",
          "latestTimestamp()",
          "latestRound()",
          "getAnswer(uint256)",
          "getTimestamp(uint256)",
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakePair": {
        "src": "contracts/connectors/PancakeV2.sol:149",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter01": {
        "src": "contracts/connectors/PancakeV2.sol:202",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter02": {
        "src": "contracts/connectors/PancakeV2.sol:296",
        "inherit": [
          "contracts/connectors/PancakeV2.sol:IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary": {
        "src": "contracts/connectors/PancakeV2.sol:6",
        "version": {
          "withMetadata": "3000d0a52084e9944ef4af7fc97727063b52aeda5b2db5f345162e60802a0006",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IMasterWombatV2": {
        "src": "contracts/connectors/Wombat.sol:105",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(uint256,address)",
          "getAssetPid(address)",
          "poolLength()",
          "pendingTokens(uint256,address)",
          "rewarderBonusTokenInfo(uint256)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "multiClaim(uint256[])",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "migrate(uint256[])",
          "depositFor(uint256,uint256,address)",
          "updateFactor(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatAsset": {
        "src": "contracts/connectors/Wombat.sol:72",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlyingToken()",
          "pool()",
          "cash()",
          "liability()",
          "decimals()",
          "underlyingTokenDecimals()",
          "setPool(address)",
          "underlyingTokenBalance()",
          "transferUnderlyingToken(address,uint256)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "addCash(uint256)",
          "removeCash(uint256)",
          "addLiability(uint256)",
          "removeLiability(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatPool": {
        "src": "contracts/connectors/Wombat.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokens()",
          "addressOfAsset(address)",
          "deposit(address,uint256,uint256,address,uint256,bool)",
          "withdraw(address,uint256,uint256,address,uint256)",
          "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)",
          "swap(address,address,uint256,uint256,address,uint256)",
          "quotePotentialDeposit(address,uint256)",
          "quotePotentialSwap(address,address,int256)",
          "quotePotentialWithdraw(address,uint256)",
          "quoteAmountIn(address,address,int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatRouter": {
        "src": "contracts/connectors/Wombat.sol:157",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountOut(address[],address[],int256)",
          "getAmountIn(address[],address[],uint256)",
          "swapExactTokensForTokens(address[],address[],uint256,uint256,address,uint256)",
          "swapExactNativeForTokens(address[],address[],uint256,address,uint256)",
          "swapExactTokensForNative(address[],address[],uint256,uint256,address,uint256)",
          "addLiquidityNative(address,uint256,address,uint256,bool)",
          "removeLiquidityNative(address,uint256,uint256,address,uint256)",
          "removeLiquidityFromOtherAssetAsNative(address,address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:WombatLibrary": {
        "src": "contracts/connectors/Wombat.sol:229",
        "version": {
          "withMetadata": "fded46865ae65c4a512ed814b08160c4d331ea14d354d194aa759a5d567106b1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBaseRewardPool": {
        "src": "contracts/connectors/Wombex.sol:21",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "totalAssets()",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "maxMint(address)",
          "previewMint(uint256)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "lastTimeRewardApplicable(address)",
          "rewardPerToken(address)",
          "earned(address,address)",
          "claimableRewards(address)",
          "stake(uint256)",
          "stakeAll()",
          "stakeFor(address,uint256)",
          "withdraw(uint256,bool)",
          "withdrawAll(bool)",
          "withdrawAndUnwrap(uint256,bool)",
          "withdrawAllAndUnwrap(bool)",
          "getReward(address,bool)",
          "getReward()",
          "donate(address,uint256)",
          "processIdleRewards()",
          "rewardTokensLen()",
          "rewardTokensList()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBooster": {
        "src": "contracts/connectors/Wombex.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexPoolDepositor": {
        "src": "contracts/connectors/Wombex.sol:188",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256,bool)",
          "withdraw(address,uint256,uint256,address)",
          "getDepositAmountOut(address,uint256)",
          "getWithdrawAmountOut(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexVault": {
        "src": "contracts/connectors/Wombex.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "withdrawAndUnwrap(uint256,bool)",
          "getReward(address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IControlRole.sol:IControlRole": {
        "src": "contracts/interfaces/IControlRole.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/interfaces/IStrategy.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "netAssetValue()",
          "liquidationValue()",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/libraries/TokenMath.sol:OvnMath": {
        "src": "contracts/libraries/TokenMath.sol:4",
        "version": {
          "withMetadata": "c334a4703093078355fb94af80b3406193a520514b7ca3965d70f13389a62103",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyWombexUsdt+.sol:StrategyWombexUsdtPlus": {
        "src": "contracts/strategies/StrategyWombexUsdt+.sol:11",
        "version": {
          "withMetadata": "d5a31d8c6a08dd35b20c1087014a0886c6f1f5b39e6bea351e4d8ce20378d182",
          "withoutMetadata": "f96ca20f62612da363569b22fcab5244fb426d028e2977f7e47fb183f5f53bf4",
          "linkedWithoutMetadata": "f96ca20f62612da363569b22fcab5244fb426d028e2977f7e47fb183f5f53bf4"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "hardhat/console.sol:console",
          "contracts/connectors/Wombat.sol:WombatLibrary",
          "contracts/libraries/TokenMath.sol:OvnMath",
          "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary",
          "contracts/connectors/Chainlink.sol:ChainlinkLibrary"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address,address,address,address,string))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:33"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:34"
            },
            {
              "label": "usdtPlus",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:35"
            },
            {
              "label": "wom",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:36"
            },
            {
              "label": "wmx",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:37"
            },
            {
              "label": "lpUsdtPlus",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IWombatAsset)4595",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:39"
            },
            {
              "label": "wmxLpUsdtPlus",
              "offset": 0,
              "slot": "307",
              "type": "t_contract(IWombexBaseRewardPool)5734",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:40"
            },
            {
              "label": "poolDepositor",
              "offset": 0,
              "slot": "308",
              "type": "t_contract(IWombexPoolDepositor)5779",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:41"
            },
            {
              "label": "pool",
              "offset": 0,
              "slot": "309",
              "type": "t_address",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:42"
            },
            {
              "label": "pancakeRouter",
              "offset": 0,
              "slot": "310",
              "type": "t_contract(IPancakeRouter02)4378",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:44"
            },
            {
              "label": "lpUsdtDm",
              "offset": 0,
              "slot": "311",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:46"
            },
            {
              "label": "wombatRouter",
              "offset": 0,
              "slot": "312",
              "type": "t_contract(IWombatRouter)4867",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:49"
            },
            {
              "label": "oracleUsdt",
              "offset": 0,
              "slot": "313",
              "type": "t_contract(IPriceFeed)3166",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:51"
            },
            {
              "label": "usdtDm",
              "offset": 0,
              "slot": "314",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:53"
            },
            {
              "label": "usdtPlusDm",
              "offset": 0,
              "slot": "315",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:54"
            },
            {
              "label": "lpUsdtPlusDm",
              "offset": 0,
              "slot": "316",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:55"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "317",
              "type": "t_string_storage",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)2662": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IPancakeRouter02)4378": {
              "label": "contract IPancakeRouter02",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)3166": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatAsset)4595": {
              "label": "contract IWombatAsset",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatRouter)4867": {
              "label": "contract IWombatRouter",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexBaseRewardPool)5734": {
              "label": "contract IWombexBaseRewardPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexPoolDepositor)5779": {
              "label": "contract IWombexPoolDepositor",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "11dd6dc76097d36a942a70d2c126eb47bfe7dddb77078c805502f622dcf91b57",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "97ff9e065964bce249812dcca274af1d22161a47c8f083420e66690ceec47cde",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "57b0ff8e0b23b60b733c18a8d52fd2be04db1e06a971e4ac1e51bc7d70228fa9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "c105f9515d64744a1b37b5b09a5d5adfc3cc8c95f0c92b9cb23f1ff8e9e66927",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "9ddb95611794df92ed7f51febd0169b9cdd934bc35cdacd27e0ec2429297c49e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Strategy.sol:Strategy": {
        "src": "contracts/Strategy.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/libraries/TokenMath.sol:OvnMath"
        ],
        "methods": [
          "setPortfolioManager(address)",
          "setSlippages(uint256,uint256,uint256)",
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:ChainlinkLibrary": {
        "src": "contracts/connectors/Chainlink.sol:50",
        "version": {
          "withMetadata": "7cccaa7fd76280b78d7c678aa45479ba8298436b1f2bc65c0bd4edb78190d9a8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:IPriceFeed": {
        "src": "contracts/connectors/Chainlink.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "latestAnswer()",
          "latestTimestamp()",
          "latestRound()",
          "getAnswer(uint256)",
          "getTimestamp(uint256)",
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakePair": {
        "src": "contracts/connectors/PancakeV2.sol:149",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter01": {
        "src": "contracts/connectors/PancakeV2.sol:202",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter02": {
        "src": "contracts/connectors/PancakeV2.sol:296",
        "inherit": [
          "contracts/connectors/PancakeV2.sol:IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary": {
        "src": "contracts/connectors/PancakeV2.sol:6",
        "version": {
          "withMetadata": "3000d0a52084e9944ef4af7fc97727063b52aeda5b2db5f345162e60802a0006",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IMasterWombatV2": {
        "src": "contracts/connectors/Wombat.sol:105",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(uint256,address)",
          "getAssetPid(address)",
          "poolLength()",
          "pendingTokens(uint256,address)",
          "rewarderBonusTokenInfo(uint256)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "multiClaim(uint256[])",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "migrate(uint256[])",
          "depositFor(uint256,uint256,address)",
          "updateFactor(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatAsset": {
        "src": "contracts/connectors/Wombat.sol:72",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlyingToken()",
          "pool()",
          "cash()",
          "liability()",
          "decimals()",
          "underlyingTokenDecimals()",
          "setPool(address)",
          "underlyingTokenBalance()",
          "transferUnderlyingToken(address,uint256)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "addCash(uint256)",
          "removeCash(uint256)",
          "addLiability(uint256)",
          "removeLiability(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatPool": {
        "src": "contracts/connectors/Wombat.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokens()",
          "addressOfAsset(address)",
          "deposit(address,uint256,uint256,address,uint256,bool)",
          "withdraw(address,uint256,uint256,address,uint256)",
          "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)",
          "swap(address,address,uint256,uint256,address,uint256)",
          "quotePotentialDeposit(address,uint256)",
          "quotePotentialSwap(address,address,int256)",
          "quotePotentialWithdraw(address,uint256)",
          "quoteAmountIn(address,address,int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatRouter": {
        "src": "contracts/connectors/Wombat.sol:157",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountOut(address[],address[],int256)",
          "getAmountIn(address[],address[],uint256)",
          "swapExactTokensForTokens(address[],address[],uint256,uint256,address,uint256)",
          "swapExactNativeForTokens(address[],address[],uint256,address,uint256)",
          "swapExactTokensForNative(address[],address[],uint256,uint256,address,uint256)",
          "addLiquidityNative(address,uint256,address,uint256,bool)",
          "removeLiquidityNative(address,uint256,uint256,address,uint256)",
          "removeLiquidityFromOtherAssetAsNative(address,address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:WombatLibrary": {
        "src": "contracts/connectors/Wombat.sol:229",
        "version": {
          "withMetadata": "fded46865ae65c4a512ed814b08160c4d331ea14d354d194aa759a5d567106b1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBaseRewardPool": {
        "src": "contracts/connectors/Wombex.sol:21",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "totalAssets()",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "maxMint(address)",
          "previewMint(uint256)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "lastTimeRewardApplicable(address)",
          "rewardPerToken(address)",
          "earned(address,address)",
          "claimableRewards(address)",
          "stake(uint256)",
          "stakeAll()",
          "stakeFor(address,uint256)",
          "withdraw(uint256,bool)",
          "withdrawAll(bool)",
          "withdrawAndUnwrap(uint256,bool)",
          "withdrawAllAndUnwrap(bool)",
          "getReward(address,bool)",
          "getReward()",
          "donate(address,uint256)",
          "processIdleRewards()",
          "rewardTokensLen()",
          "rewardTokensList()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBooster": {
        "src": "contracts/connectors/Wombex.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexPoolDepositor": {
        "src": "contracts/connectors/Wombex.sol:188",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256,bool)",
          "withdraw(address,uint256,uint256,address)",
          "getDepositAmountOut(address,uint256)",
          "getWithdrawAmountOut(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexVault": {
        "src": "contracts/connectors/Wombex.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "withdrawAndUnwrap(uint256,bool)",
          "getReward(address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IControlRole.sol:IControlRole": {
        "src": "contracts/interfaces/IControlRole.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/interfaces/IStrategy.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "netAssetValue()",
          "liquidationValue()",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/libraries/TokenMath.sol:OvnMath": {
        "src": "contracts/libraries/TokenMath.sol:4",
        "version": {
          "withMetadata": "c334a4703093078355fb94af80b3406193a520514b7ca3965d70f13389a62103",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyWombexUsdt+.sol:StrategyWombexUsdtPlus": {
        "src": "contracts/strategies/StrategyWombexUsdt+.sol:11",
        "version": {
          "withMetadata": "885426d9f4f18a0e476a8301c58ba5802f3951afa55cff96c7cf750972449c16",
          "withoutMetadata": "80b3509dbc4f10b1dcb13ea5db9548dfcc66ce879891f25dec619036d10055ed",
          "linkedWithoutMetadata": "80b3509dbc4f10b1dcb13ea5db9548dfcc66ce879891f25dec619036d10055ed"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "hardhat/console.sol:console",
          "contracts/connectors/Wombat.sol:WombatLibrary",
          "contracts/libraries/TokenMath.sol:OvnMath",
          "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary",
          "contracts/connectors/Chainlink.sol:ChainlinkLibrary"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address,address,address,address,string))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:33"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:34"
            },
            {
              "label": "usdtPlus",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:35"
            },
            {
              "label": "wom",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:36"
            },
            {
              "label": "wmx",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:37"
            },
            {
              "label": "lpUsdtPlus",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IWombatAsset)4595",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:39"
            },
            {
              "label": "wmxLpUsdtPlus",
              "offset": 0,
              "slot": "307",
              "type": "t_contract(IWombexBaseRewardPool)5734",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:40"
            },
            {
              "label": "poolDepositor",
              "offset": 0,
              "slot": "308",
              "type": "t_contract(IWombexPoolDepositor)5779",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:41"
            },
            {
              "label": "pool",
              "offset": 0,
              "slot": "309",
              "type": "t_address",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:42"
            },
            {
              "label": "pancakeRouter",
              "offset": 0,
              "slot": "310",
              "type": "t_contract(IPancakeRouter02)4378",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:44"
            },
            {
              "label": "lpUsdtDm",
              "offset": 0,
              "slot": "311",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:46"
            },
            {
              "label": "wombatRouter",
              "offset": 0,
              "slot": "312",
              "type": "t_contract(IWombatRouter)4867",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:49"
            },
            {
              "label": "oracleUsdt",
              "offset": 0,
              "slot": "313",
              "type": "t_contract(IPriceFeed)3166",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:51"
            },
            {
              "label": "usdtDm",
              "offset": 0,
              "slot": "314",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:53"
            },
            {
              "label": "usdtPlusDm",
              "offset": 0,
              "slot": "315",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:54"
            },
            {
              "label": "lpUsdtPlusDm",
              "offset": 0,
              "slot": "316",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:55"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "317",
              "type": "t_string_storage",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)2662": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IPancakeRouter02)4378": {
              "label": "contract IPancakeRouter02",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)3166": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatAsset)4595": {
              "label": "contract IWombatAsset",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatRouter)4867": {
              "label": "contract IWombatRouter",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexBaseRewardPool)5734": {
              "label": "contract IWombexBaseRewardPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexPoolDepositor)5779": {
              "label": "contract IWombexPoolDepositor",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "11dd6dc76097d36a942a70d2c126eb47bfe7dddb77078c805502f622dcf91b57",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "97ff9e065964bce249812dcca274af1d22161a47c8f083420e66690ceec47cde",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "57b0ff8e0b23b60b733c18a8d52fd2be04db1e06a971e4ac1e51bc7d70228fa9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "c105f9515d64744a1b37b5b09a5d5adfc3cc8c95f0c92b9cb23f1ff8e9e66927",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "9ddb95611794df92ed7f51febd0169b9cdd934bc35cdacd27e0ec2429297c49e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Strategy.sol:Strategy": {
        "src": "contracts/Strategy.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/libraries/TokenMath.sol:OvnMath"
        ],
        "methods": [
          "setPortfolioManager(address)",
          "setSlippages(uint256,uint256,uint256)",
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:ChainlinkLibrary": {
        "src": "contracts/connectors/Chainlink.sol:50",
        "version": {
          "withMetadata": "7cccaa7fd76280b78d7c678aa45479ba8298436b1f2bc65c0bd4edb78190d9a8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:IPriceFeed": {
        "src": "contracts/connectors/Chainlink.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "latestAnswer()",
          "latestTimestamp()",
          "latestRound()",
          "getAnswer(uint256)",
          "getTimestamp(uint256)",
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Thena.sol:IBribe": {
        "src": "contracts/connectors/Thena.sol:343",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_deposit(uint256,uint256)",
          "_withdraw(uint256,uint256)",
          "getRewardForOwner(uint256,address[])",
          "notifyRewardAmount(address,uint256)",
          "left(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Thena.sol:IGaugeV2": {
        "src": "contracts/connectors/Thena.sol:258",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isForPair()",
          "rewardToken()",
          "_VE()",
          "TOKEN()",
          "DISTRIBUTION()",
          "gaugeRewarder()",
          "internal_bribe()",
          "external_bribe()",
          "rewarderPid()",
          "DURATION()",
          "periodFinish()",
          "rewardRate()",
          "lastUpdateTime()",
          "rewardPerTokenStored()",
          "fees0()",
          "fees1()",
          "userRewardPerTokenPaid(address)",
          "rewards(address)",
          "_totalSupply()",
          "_balances(address)",
          "totalSupply()",
          "balanceOf(address)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "rewardForDuration()",
          "depositAll()",
          "deposit(uint256)",
          "withdrawAll()",
          "withdraw(uint256)",
          "withdrawAllAndHarvest()",
          "getReward()",
          "_periodFinish()",
          "claimFees()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Thena.sol:IPair": {
        "src": "contracts/connectors/Thena.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "stable()",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "factory()",
          "token0()",
          "token1()",
          "fees()",
          "reserve0()",
          "reserve1()",
          "blockTimestampLast()",
          "reserve0CumulativeLast()",
          "reserve1CumulativeLast()",
          "observationLength()",
          "lastObservation()",
          "metadata()",
          "tokens()",
          "isStable()",
          "claimFees()",
          "claimStakingFees()",
          "getReserves()",
          "currentCumulativePrices()",
          "current(address,uint256)",
          "quote(address,uint256,uint256)",
          "prices(address,uint256,uint256)",
          "sample(address,uint256,uint256,uint256)",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "getAmountOut(uint256,address)",
          "approve(address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Thena.sol:IRouter": {
        "src": "contracts/connectors/Thena.sol:116",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "weth()",
          "pairCodeHash()",
          "sortTokens(address,address)",
          "pairFor(address,address,bool)",
          "getReserves(address,address,bool)",
          "getAmountOut(uint256,address,address)",
          "getAmountsOut(uint256,struct IRouter.route[])",
          "isPair(address)",
          "quoteAddLiquidity(address,address,bool,uint256,uint256)",
          "quoteRemoveLiquidity(address,address,bool,uint256)",
          "addLiquidity(address,address,bool,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,bool,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,bool,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,bool,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,bool,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,bool,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSimple(uint256,uint256,address,address,bool,address,uint256)",
          "swapExactTokensForTokens(uint256,uint256,struct IRouter.route[],address,uint256)",
          "swapExactETHForTokens(uint256,struct IRouter.route[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,struct IRouter.route[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Thena.sol:ThenaLibrary": {
        "src": "contracts/connectors/Thena.sol:352",
        "version": {
          "withMetadata": "78a7d94e05a882510ba82494b072a097d429879183e53ed7d9bf513708738065",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "hardhat/console.sol:console"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IMasterWombatV2": {
        "src": "contracts/connectors/Wombat.sol:105",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(uint256,address)",
          "getAssetPid(address)",
          "poolLength()",
          "pendingTokens(uint256,address)",
          "rewarderBonusTokenInfo(uint256)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "multiClaim(uint256[])",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "migrate(uint256[])",
          "depositFor(uint256,uint256,address)",
          "updateFactor(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatAsset": {
        "src": "contracts/connectors/Wombat.sol:72",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlyingToken()",
          "pool()",
          "cash()",
          "liability()",
          "decimals()",
          "underlyingTokenDecimals()",
          "setPool(address)",
          "underlyingTokenBalance()",
          "transferUnderlyingToken(address,uint256)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "addCash(uint256)",
          "removeCash(uint256)",
          "addLiability(uint256)",
          "removeLiability(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatPool": {
        "src": "contracts/connectors/Wombat.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokens()",
          "addressOfAsset(address)",
          "deposit(address,uint256,uint256,address,uint256,bool)",
          "withdraw(address,uint256,uint256,address,uint256)",
          "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)",
          "swap(address,address,uint256,uint256,address,uint256)",
          "quotePotentialDeposit(address,uint256)",
          "quotePotentialSwap(address,address,int256)",
          "quotePotentialWithdraw(address,uint256)",
          "quoteAmountIn(address,address,int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatRouter": {
        "src": "contracts/connectors/Wombat.sol:157",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountOut(address[],address[],int256)",
          "getAmountIn(address[],address[],uint256)",
          "swapExactTokensForTokens(address[],address[],uint256,uint256,address,uint256)",
          "swapExactNativeForTokens(address[],address[],uint256,address,uint256)",
          "swapExactTokensForNative(address[],address[],uint256,uint256,address,uint256)",
          "addLiquidityNative(address,uint256,address,uint256,bool)",
          "removeLiquidityNative(address,uint256,uint256,address,uint256)",
          "removeLiquidityFromOtherAssetAsNative(address,address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:WombatLibrary": {
        "src": "contracts/connectors/Wombat.sol:229",
        "version": {
          "withMetadata": "fded46865ae65c4a512ed814b08160c4d331ea14d354d194aa759a5d567106b1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IControlRole.sol:IControlRole": {
        "src": "contracts/interfaces/IControlRole.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/interfaces/IStrategy.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "netAssetValue()",
          "liquidationValue()",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/libraries/TokenMath.sol:OvnMath": {
        "src": "contracts/libraries/TokenMath.sol:4",
        "version": {
          "withMetadata": "c334a4703093078355fb94af80b3406193a520514b7ca3965d70f13389a62103",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyThenawUsdrUsdc.sol:StrategyThenawUsdrUsdc": {
        "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:11",
        "version": {
          "withMetadata": "3270986eaac9fe0d75a57defdc9db2b191203f689f719fa945c54d7789831fce",
          "withoutMetadata": "fb45c9807f0b539eddbfabf6fd91c439f0644982f8892d53467e5de855d82f16",
          "linkedWithoutMetadata": "fb45c9807f0b539eddbfabf6fd91c439f0644982f8892d53467e5de855d82f16"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/connectors/Chainlink.sol:ChainlinkLibrary",
          "contracts/libraries/TokenMath.sol:OvnMath",
          "contracts/connectors/Wombat.sol:WombatLibrary",
          "contracts/connectors/Thena.sol:ThenaLibrary",
          "hardhat/console.sol:console"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address,address,address,address,address,string))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "busd",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:33"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:34"
            },
            {
              "label": "wUsdr",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:35"
            },
            {
              "label": "the",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:36"
            },
            {
              "label": "pair",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IPair)3686",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:39"
            },
            {
              "label": "router",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IRouter)4036",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:40"
            },
            {
              "label": "gauge",
              "offset": 0,
              "slot": "307",
              "type": "t_contract(IGaugeV2)4223",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:41"
            },
            {
              "label": "wombatPool",
              "offset": 0,
              "slot": "308",
              "type": "t_address",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:42"
            },
            {
              "label": "wombatRouter",
              "offset": 0,
              "slot": "309",
              "type": "t_contract(IWombatRouter)5231",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:44"
            },
            {
              "label": "oracleBusd",
              "offset": 0,
              "slot": "310",
              "type": "t_contract(IPriceFeed)3166",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:46"
            },
            {
              "label": "oracleUsdc",
              "offset": 0,
              "slot": "311",
              "type": "t_contract(IPriceFeed)3166",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:47"
            },
            {
              "label": "busdDm",
              "offset": 0,
              "slot": "312",
              "type": "t_uint256",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:49"
            },
            {
              "label": "usdcDm",
              "offset": 0,
              "slot": "313",
              "type": "t_uint256",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:50"
            },
            {
              "label": "wUsdrDm",
              "offset": 0,
              "slot": "314",
              "type": "t_uint256",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:52"
            },
            {
              "label": "usdtDm",
              "offset": 0,
              "slot": "315",
              "type": "t_uint256",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:53"
            },
            {
              "label": "oracleUsdt",
              "offset": 0,
              "slot": "316",
              "type": "t_contract(IPriceFeed)3166",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:55"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "317",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:56"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "318",
              "type": "t_string_storage",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:57"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)2662": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IGaugeV2)4223": {
              "label": "contract IGaugeV2",
              "numberOfBytes": "20"
            },
            "t_contract(IPair)3686": {
              "label": "contract IPair",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)3166": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_contract(IRouter)4036": {
              "label": "contract IRouter",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatRouter)5231": {
              "label": "contract IWombatRouter",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "11dd6dc76097d36a942a70d2c126eb47bfe7dddb77078c805502f622dcf91b57",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "97ff9e065964bce249812dcca274af1d22161a47c8f083420e66690ceec47cde",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "57b0ff8e0b23b60b733c18a8d52fd2be04db1e06a971e4ac1e51bc7d70228fa9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "c105f9515d64744a1b37b5b09a5d5adfc3cc8c95f0c92b9cb23f1ff8e9e66927",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "9ddb95611794df92ed7f51febd0169b9cdd934bc35cdacd27e0ec2429297c49e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Strategy.sol:Strategy": {
        "src": "contracts/Strategy.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/libraries/TokenMath.sol:OvnMath"
        ],
        "methods": [
          "setPortfolioManager(address)",
          "setSlippages(uint256,uint256,uint256)",
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:ChainlinkLibrary": {
        "src": "contracts/connectors/Chainlink.sol:50",
        "version": {
          "withMetadata": "7cccaa7fd76280b78d7c678aa45479ba8298436b1f2bc65c0bd4edb78190d9a8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:IPriceFeed": {
        "src": "contracts/connectors/Chainlink.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "latestAnswer()",
          "latestTimestamp()",
          "latestRound()",
          "getAnswer(uint256)",
          "getTimestamp(uint256)",
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakePair": {
        "src": "contracts/connectors/PancakeV2.sol:149",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter01": {
        "src": "contracts/connectors/PancakeV2.sol:202",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter02": {
        "src": "contracts/connectors/PancakeV2.sol:296",
        "inherit": [
          "contracts/connectors/PancakeV2.sol:IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary": {
        "src": "contracts/connectors/PancakeV2.sol:6",
        "version": {
          "withMetadata": "3000d0a52084e9944ef4af7fc97727063b52aeda5b2db5f345162e60802a0006",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IMasterWombatV2": {
        "src": "contracts/connectors/Wombat.sol:105",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(uint256,address)",
          "getAssetPid(address)",
          "poolLength()",
          "pendingTokens(uint256,address)",
          "rewarderBonusTokenInfo(uint256)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "multiClaim(uint256[])",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "migrate(uint256[])",
          "depositFor(uint256,uint256,address)",
          "updateFactor(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatAsset": {
        "src": "contracts/connectors/Wombat.sol:72",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlyingToken()",
          "pool()",
          "cash()",
          "liability()",
          "decimals()",
          "underlyingTokenDecimals()",
          "setPool(address)",
          "underlyingTokenBalance()",
          "transferUnderlyingToken(address,uint256)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "addCash(uint256)",
          "removeCash(uint256)",
          "addLiability(uint256)",
          "removeLiability(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatPool": {
        "src": "contracts/connectors/Wombat.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokens()",
          "addressOfAsset(address)",
          "deposit(address,uint256,uint256,address,uint256,bool)",
          "withdraw(address,uint256,uint256,address,uint256)",
          "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)",
          "swap(address,address,uint256,uint256,address,uint256)",
          "quotePotentialDeposit(address,uint256)",
          "quotePotentialSwap(address,address,int256)",
          "quotePotentialWithdraw(address,uint256)",
          "quoteAmountIn(address,address,int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatRouter": {
        "src": "contracts/connectors/Wombat.sol:157",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountOut(address[],address[],int256)",
          "getAmountIn(address[],address[],uint256)",
          "swapExactTokensForTokens(address[],address[],uint256,uint256,address,uint256)",
          "swapExactNativeForTokens(address[],address[],uint256,address,uint256)",
          "swapExactTokensForNative(address[],address[],uint256,uint256,address,uint256)",
          "addLiquidityNative(address,uint256,address,uint256,bool)",
          "removeLiquidityNative(address,uint256,uint256,address,uint256)",
          "removeLiquidityFromOtherAssetAsNative(address,address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:WombatLibrary": {
        "src": "contracts/connectors/Wombat.sol:229",
        "version": {
          "withMetadata": "fded46865ae65c4a512ed814b08160c4d331ea14d354d194aa759a5d567106b1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBaseRewardPool": {
        "src": "contracts/connectors/Wombex.sol:21",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "totalAssets()",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "maxMint(address)",
          "previewMint(uint256)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "lastTimeRewardApplicable(address)",
          "rewardPerToken(address)",
          "earned(address,address)",
          "claimableRewards(address)",
          "stake(uint256)",
          "stakeAll()",
          "stakeFor(address,uint256)",
          "withdraw(uint256,bool)",
          "withdrawAll(bool)",
          "withdrawAndUnwrap(uint256,bool)",
          "withdrawAllAndUnwrap(bool)",
          "getReward(address,bool)",
          "getReward()",
          "donate(address,uint256)",
          "processIdleRewards()",
          "rewardTokensLen()",
          "rewardTokensList()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBooster": {
        "src": "contracts/connectors/Wombex.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexPoolDepositor": {
        "src": "contracts/connectors/Wombex.sol:188",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256,bool)",
          "withdraw(address,uint256,uint256,address)",
          "getDepositAmountOut(address,uint256)",
          "getWithdrawAmountOut(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexVault": {
        "src": "contracts/connectors/Wombex.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "withdrawAndUnwrap(uint256,bool)",
          "getReward(address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IControlRole.sol:IControlRole": {
        "src": "contracts/interfaces/IControlRole.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/interfaces/IStrategy.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "netAssetValue()",
          "liquidationValue()",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/libraries/TokenMath.sol:OvnMath": {
        "src": "contracts/libraries/TokenMath.sol:4",
        "version": {
          "withMetadata": "c334a4703093078355fb94af80b3406193a520514b7ca3965d70f13389a62103",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyWombexUsdt.sol:StrategyWombexUsdt": {
        "src": "contracts/strategies/StrategyWombexUsdt.sol:11",
        "version": {
          "withMetadata": "8104d1fe3ca5dcf8b1242e9b8fd3ab9dda7295ca9d4ecea0bf1d9598b4fb0ec8",
          "withoutMetadata": "c1d2be8d2e59131504c18749dd9e861588a476e814c1ddce079576b8f73b034a",
          "linkedWithoutMetadata": "c1d2be8d2e59131504c18749dd9e861588a476e814c1ddce079576b8f73b034a"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/libraries/TokenMath.sol:OvnMath",
          "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address,address,address,string))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:32"
            },
            {
              "label": "wom",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:34"
            },
            {
              "label": "wmx",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:35"
            },
            {
              "label": "lpUsdt",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IWombatAsset)4595",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:37"
            },
            {
              "label": "wmxLpUsdt",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IWombexBaseRewardPool)5734",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:38"
            },
            {
              "label": "poolDepositor",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IWombexPoolDepositor)5779",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:39"
            },
            {
              "label": "pool",
              "offset": 0,
              "slot": "307",
              "type": "t_address",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:40"
            },
            {
              "label": "pancakeRouter",
              "offset": 0,
              "slot": "308",
              "type": "t_contract(IPancakeRouter02)4378",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:41"
            },
            {
              "label": "wombatRouter",
              "offset": 0,
              "slot": "309",
              "type": "t_contract(IWombatRouter)4867",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:42"
            },
            {
              "label": "oracleBusd",
              "offset": 0,
              "slot": "310",
              "type": "t_contract(IPriceFeed)3166",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:43"
            },
            {
              "label": "oracleUsdt",
              "offset": 0,
              "slot": "311",
              "type": "t_contract(IPriceFeed)3166",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:44"
            },
            {
              "label": "usdtDm",
              "offset": 0,
              "slot": "312",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:45"
            },
            {
              "label": "lpUsdtDm",
              "offset": 0,
              "slot": "313",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:46"
            },
            {
              "label": "busd",
              "offset": 0,
              "slot": "314",
              "type": "t_contract(IERC20)2662",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:48"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "315",
              "type": "t_string_storage",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)2662": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IPancakeRouter02)4378": {
              "label": "contract IPancakeRouter02",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)3166": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatAsset)4595": {
              "label": "contract IWombatAsset",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatRouter)4867": {
              "label": "contract IWombatRouter",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexBaseRewardPool)5734": {
              "label": "contract IWombexBaseRewardPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexPoolDepositor)5779": {
              "label": "contract IWombexPoolDepositor",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "11dd6dc76097d36a942a70d2c126eb47bfe7dddb77078c805502f622dcf91b57",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "97ff9e065964bce249812dcca274af1d22161a47c8f083420e66690ceec47cde",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "57b0ff8e0b23b60b733c18a8d52fd2be04db1e06a971e4ac1e51bc7d70228fa9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "c105f9515d64744a1b37b5b09a5d5adfc3cc8c95f0c92b9cb23f1ff8e9e66927",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "9ddb95611794df92ed7f51febd0169b9cdd934bc35cdacd27e0ec2429297c49e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "6ac6ec1e2660e8d790cca925f59f9c3d3eca8fc5b4945232144f26c2a97067d8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:30",
        "version": {
          "withMetadata": "5e14668159c3bedba850818ddc1905a72906ea0d98b7655547bfcc460e067e0a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Exchange.sol:Exchange": {
        "src": "contracts/Exchange.sol:19",
        "version": {
          "withMetadata": "eecffd7593da657d93f2ee90829be5ab1445971ffe4ba407e203d944d89242e5",
          "withoutMetadata": "c3c67e9536dfc7a20b0dec66bb3dca8339e093a8f50747c632fbb118aed63005",
          "linkedWithoutMetadata": "c3c67e9536dfc7a20b0dec66bb3dca8339e093a8f50747c632fbb118aed63005"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/WadRayMath.sol:WadRayMath",
          "hardhat/console.sol:console"
        ],
        "methods": [
          "()",
          "initialize()",
          "changeAdminRoles()",
          "setTokens(address,address)",
          "setPortfolioManager(address)",
          "setMark2Market(address)",
          "setPayoutListener(address)",
          "setInsurance(address)",
          "setBlockGetter(address)",
          "setProfitRecipient(address)",
          "setBuyFee(uint256,uint256)",
          "setRedeemFee(uint256,uint256)",
          "setOracleLoss(uint256,uint256)",
          "setCompensateLoss(uint256,uint256)",
          "setAbroad(uint256,uint256)",
          "setPayoutTimes(uint256,uint256,uint256)",
          "pause()",
          "unpause()",
          "mint((address,uint256,string))",
          "buy(address,uint256)",
          "redeem(address,uint256)",
          "payout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "251",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "252",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "usdPlus",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(SionToken)8520",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:31"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)2892",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:32"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IPortfolioManager)13636",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:34"
            },
            {
              "label": "mark2market",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IMark2Market)13568",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:35"
            },
            {
              "label": "buyFee",
              "offset": 0,
              "slot": "305",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:37"
            },
            {
              "label": "buyFeeDenominator",
              "offset": 0,
              "slot": "306",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:38"
            },
            {
              "label": "redeemFee",
              "offset": 0,
              "slot": "307",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:40"
            },
            {
              "label": "redeemFeeDenominator",
              "offset": 0,
              "slot": "308",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:41"
            },
            {
              "label": "nextPayoutTime",
              "offset": 0,
              "slot": "309",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:44"
            },
            {
              "label": "payoutPeriod",
              "offset": 0,
              "slot": "310",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:47"
            },
            {
              "label": "payoutTimeRange",
              "offset": 0,
              "slot": "311",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:54"
            },
            {
              "label": "payoutListener",
              "offset": 0,
              "slot": "312",
              "type": "t_contract(IPayoutListener)13574",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:56"
            },
            {
              "label": "lastBlockNumber",
              "offset": 0,
              "slot": "313",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:59"
            },
            {
              "label": "abroadMin",
              "offset": 0,
              "slot": "314",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:61"
            },
            {
              "label": "abroadMax",
              "offset": 0,
              "slot": "315",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:62"
            },
            {
              "label": "insurance",
              "offset": 0,
              "slot": "316",
              "type": "t_address",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:64"
            },
            {
              "label": "oracleLoss",
              "offset": 0,
              "slot": "317",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:66"
            },
            {
              "label": "oracleLossDenominator",
              "offset": 0,
              "slot": "318",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:67"
            },
            {
              "label": "compensateLoss",
              "offset": 0,
              "slot": "319",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:69"
            },
            {
              "label": "compensateLossDenominator",
              "offset": 0,
              "slot": "320",
              "type": "t_uint256",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:70"
            },
            {
              "label": "profitRecipient",
              "offset": 0,
              "slot": "321",
              "type": "t_address",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:72"
            },
            {
              "label": "blockGetter",
              "offset": 0,
              "slot": "322",
              "type": "t_address",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:74"
            },
            {
              "label": "sionToken",
              "offset": 0,
              "slot": "323",
              "type": "t_contract(SionToken)8520",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:76"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "324",
              "type": "t_contract(IERC20)2892",
              "contract": "Exchange",
              "src": "contracts/Exchange.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)2892": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IMark2Market)13568": {
              "label": "contract IMark2Market",
              "numberOfBytes": "20"
            },
            "t_contract(IPayoutListener)13574": {
              "label": "contract IPayoutListener",
              "numberOfBytes": "20"
            },
            "t_contract(IPortfolioManager)13636": {
              "label": "contract IPortfolioManager",
              "numberOfBytes": "20"
            },
            "t_contract(SionToken)8520": {
              "label": "contract SionToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Mark2Market.sol:Mark2Market": {
        "src": "contracts/Mark2Market.sol:14",
        "version": {
          "withMetadata": "fdd7ecfe226c5c51ddfe43dcc1465096c0d0af0f159933a292c790ccfe7d6c8a",
          "withoutMetadata": "55dbbbda3dac70ef9c6f4a5c88dc253e588acb75c8bb9ba414bbd27f5b9d1e42",
          "linkedWithoutMetadata": "55dbbbda3dac70ef9c6f4a5c88dc253e588acb75c8bb9ba414bbd27f5b9d1e42"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IMark2Market.sol:IMark2Market"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()",
          "setPortfolioManager(address)",
          "strategyAssets()",
          "totalNetAssets()",
          "totalLiquidationAssets()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_contract(IPortfolioManager)13636",
              "contract": "Mark2Market",
              "src": "contracts/Mark2Market.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IPortfolioManager)13636": {
              "label": "contract IPortfolioManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/PayoutListener.sol:PayoutListener": {
        "src": "contracts/PayoutListener.sol:12",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IPayoutListener.sol:IPayoutListener"
        ],
        "libraries": [],
        "methods": [
          "setExchanger(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "exchange",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "PayoutListener",
              "src": "contracts/PayoutListener.sol:15"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "252",
              "type": "t_array(t_uint256)50_storage",
              "contract": "PayoutListener",
              "src": "contracts/PayoutListener.sol:58"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/PortfolioManager.sol:PortfolioManager": {
        "src": "contracts/PortfolioManager.sol:19",
        "version": {
          "withMetadata": "79689797df0290fc792fe85984d792ac3f0c6384c94432fbfb962ff207a8e4d5",
          "withoutMetadata": "dec87e7b5f151234c4cd0b35d374830800ababd32dbd3507b31c5afba574b00b",
          "linkedWithoutMetadata": "dec87e7b5f151234c4cd0b35d374830800ababd32dbd3507b31c5afba574b00b"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IPortfolioManager.sol:IPortfolioManager"
        ],
        "libraries": [
          "hardhat/console.sol:console",
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "contracts/libraries/TokenMath.sol:OvnMath"
        ],
        "methods": [
          "()",
          "initialize()",
          "setExchanger(address)",
          "setMark2Market(address)",
          "setAsset(address)",
          "setCashStrategy(address)",
          "deposit()",
          "withdraw(uint256)",
          "claimAndBalance()",
          "balance()",
          "setStrategyWeights(struct IPortfolioManager.StrategyWeight[])",
          "addStrategy(address)",
          "removeStrategy(address)",
          "getStrategyWeight(address)",
          "getAllStrategyWeights()",
          "getTotalRiskFactor()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "exchanger",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "PortfolioManager",
              "src": "contracts/PortfolioManager.sol:26"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "252",
              "type": "t_contract(IERC20)2892",
              "contract": "PortfolioManager",
              "src": "contracts/PortfolioManager.sol:27"
            },
            {
              "label": "strategyWeightPositions",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "PortfolioManager",
              "src": "contracts/PortfolioManager.sol:28"
            },
            {
              "label": "strategyWeights",
              "offset": 0,
              "slot": "254",
              "type": "t_array(t_struct(StrategyWeight)13599_storage)dyn_storage",
              "contract": "PortfolioManager",
              "src": "contracts/PortfolioManager.sol:29"
            },
            {
              "label": "cashStrategy",
              "offset": 0,
              "slot": "255",
              "type": "t_contract(IStrategy)13866",
              "contract": "PortfolioManager",
              "src": "contracts/PortfolioManager.sol:30"
            },
            {
              "label": "m2m",
              "offset": 0,
              "slot": "256",
              "type": "t_contract(IMark2Market)13568",
              "contract": "PortfolioManager",
              "src": "contracts/PortfolioManager.sol:31"
            },
            {
              "label": "totalRiskFactor",
              "offset": 0,
              "slot": "257",
              "type": "t_uint256",
              "contract": "PortfolioManager",
              "src": "contracts/PortfolioManager.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(StrategyWeight)13599_storage)dyn_storage": {
              "label": "struct IPortfolioManager.StrategyWeight[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)2892": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IMark2Market)13568": {
              "label": "contract IMark2Market",
              "numberOfBytes": "20"
            },
            "t_contract(IStrategy)13866": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(StrategyWeight)13599_storage": {
              "label": "struct IPortfolioManager.StrategyWeight",
              "members": [
                {
                  "label": "strategy",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "minWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "targetWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "maxWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "riskFactor",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "enabled",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "enabledReward",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/SionToken.sol:SionToken": {
        "src": "contracts/SionToken.sol:12",
        "version": {
          "withMetadata": "589cd48e6831dac4fa0cdcc58d2f45c2f853d58a4a737d19a080150d056a169d",
          "withoutMetadata": "4bcf2b8ab87af4b9c83780d325b4e02cf5effeca3ef69e9715aaea93851bc176",
          "linkedWithoutMetadata": "4bcf2b8ab87af4b9c83780d325b4e02cf5effeca3ef69e9715aaea93851bc176"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/WadRayMath.sol:WadRayMath",
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet"
        ],
        "methods": [
          "setExchanger(address)",
          "setLiquidityIndex(uint256)",
          "()",
          "initialize(string,string,uint8)",
          "setDecimals(uint8)",
          "setName(string)",
          "setSymbol(string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "balanceOf(address)",
          "scaledBalanceOf(address)",
          "totalSupply()",
          "totalMint()",
          "totalBurn()",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "scaledTotalSupply()",
          "ownerLength()",
          "ownerAt(uint256)",
          "ownerBalanceAt(uint256)",
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:21"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:23"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:25"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "254",
              "type": "t_string_storage",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:27"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "255",
              "type": "t_string_storage",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:28"
            },
            {
              "label": "_totalMint",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:34"
            },
            {
              "label": "_totalBurn",
              "offset": 0,
              "slot": "257",
              "type": "t_uint256",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:35"
            },
            {
              "label": "liquidityIndexChangeTime",
              "offset": 0,
              "slot": "258",
              "type": "t_uint256",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:37"
            },
            {
              "label": "liquidityIndex",
              "offset": 0,
              "slot": "259",
              "type": "t_uint256",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:38"
            },
            {
              "label": "liquidityIndexDenominator",
              "offset": 0,
              "slot": "260",
              "type": "t_uint256",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:39"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "261",
              "type": "t_struct(AddressSet)3432_storage",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:41"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "263",
              "type": "t_array(t_uint256)50_storage",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:43"
            },
            {
              "label": "exchange",
              "offset": 0,
              "slot": "313",
              "type": "t_address",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:45"
            },
            {
              "label": "_decimals",
              "offset": 20,
              "slot": "313",
              "type": "t_uint8",
              "contract": "SionToken",
              "src": "contracts/SionToken.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)3432_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)3131_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)3131_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Strategy.sol:Strategy": {
        "src": "contracts/Strategy.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/libraries/TokenMath.sol:OvnMath"
        ],
        "methods": [
          "setPortfolioManager(address)",
          "setSlippages(uint256,uint256,uint256)",
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:ChainlinkLibrary": {
        "src": "contracts/connectors/Chainlink.sol:50",
        "version": {
          "withMetadata": "7cccaa7fd76280b78d7c678aa45479ba8298436b1f2bc65c0bd4edb78190d9a8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Chainlink.sol:IPriceFeed": {
        "src": "contracts/connectors/Chainlink.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "latestAnswer()",
          "latestTimestamp()",
          "latestRound()",
          "getAnswer(uint256)",
          "getTimestamp(uint256)",
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakePair": {
        "src": "contracts/connectors/PancakeV2.sol:149",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter01": {
        "src": "contracts/connectors/PancakeV2.sol:202",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:IPancakeRouter02": {
        "src": "contracts/connectors/PancakeV2.sol:296",
        "inherit": [
          "contracts/connectors/PancakeV2.sol:IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary": {
        "src": "contracts/connectors/PancakeV2.sol:6",
        "version": {
          "withMetadata": "3000d0a52084e9944ef4af7fc97727063b52aeda5b2db5f345162e60802a0006",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Thena.sol:IBribe": {
        "src": "contracts/connectors/Thena.sol:343",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_deposit(uint256,uint256)",
          "_withdraw(uint256,uint256)",
          "getRewardForOwner(uint256,address[])",
          "notifyRewardAmount(address,uint256)",
          "left(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Thena.sol:IGaugeV2": {
        "src": "contracts/connectors/Thena.sol:258",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isForPair()",
          "rewardToken()",
          "_VE()",
          "TOKEN()",
          "DISTRIBUTION()",
          "gaugeRewarder()",
          "internal_bribe()",
          "external_bribe()",
          "rewarderPid()",
          "DURATION()",
          "periodFinish()",
          "rewardRate()",
          "lastUpdateTime()",
          "rewardPerTokenStored()",
          "fees0()",
          "fees1()",
          "userRewardPerTokenPaid(address)",
          "rewards(address)",
          "_totalSupply()",
          "_balances(address)",
          "totalSupply()",
          "balanceOf(address)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "rewardForDuration()",
          "depositAll()",
          "deposit(uint256)",
          "withdrawAll()",
          "withdraw(uint256)",
          "withdrawAllAndHarvest()",
          "getReward()",
          "_periodFinish()",
          "claimFees()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Thena.sol:IPair": {
        "src": "contracts/connectors/Thena.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "stable()",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "factory()",
          "token0()",
          "token1()",
          "fees()",
          "reserve0()",
          "reserve1()",
          "blockTimestampLast()",
          "reserve0CumulativeLast()",
          "reserve1CumulativeLast()",
          "observationLength()",
          "lastObservation()",
          "metadata()",
          "tokens()",
          "isStable()",
          "claimFees()",
          "claimStakingFees()",
          "getReserves()",
          "currentCumulativePrices()",
          "current(address,uint256)",
          "quote(address,uint256,uint256)",
          "prices(address,uint256,uint256)",
          "sample(address,uint256,uint256,uint256)",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "getAmountOut(uint256,address)",
          "approve(address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Thena.sol:IRouter": {
        "src": "contracts/connectors/Thena.sol:116",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "weth()",
          "pairCodeHash()",
          "sortTokens(address,address)",
          "pairFor(address,address,bool)",
          "getReserves(address,address,bool)",
          "getAmountOut(uint256,address,address)",
          "getAmountsOut(uint256,struct IRouter.route[])",
          "isPair(address)",
          "quoteAddLiquidity(address,address,bool,uint256,uint256)",
          "quoteRemoveLiquidity(address,address,bool,uint256)",
          "addLiquidity(address,address,bool,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,bool,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,bool,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,bool,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,bool,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,bool,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSimple(uint256,uint256,address,address,bool,address,uint256)",
          "swapExactTokensForTokens(uint256,uint256,struct IRouter.route[],address,uint256)",
          "swapExactETHForTokens(uint256,struct IRouter.route[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,struct IRouter.route[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Thena.sol:ThenaLibrary": {
        "src": "contracts/connectors/Thena.sol:352",
        "version": {
          "withMetadata": "78a7d94e05a882510ba82494b072a097d429879183e53ed7d9bf513708738065",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "hardhat/console.sol:console"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Venus.sol:IWbnb": {
        "src": "contracts/connectors/Venus.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Venus.sol:InterestRateModel": {
        "src": "contracts/connectors/Venus.sol:23",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBorrowRate(uint256,uint256,uint256)",
          "getSupplyRate(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Venus.sol:Maximillion": {
        "src": "contracts/connectors/Venus.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "repayBehalfExplicit(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Venus.sol:Unitroller": {
        "src": "contracts/connectors/Venus.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enterMarkets(address[])",
          "claimVenus(address,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Venus.sol:VBep20Interface": {
        "src": "contracts/connectors/Venus.sol:48",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint(uint256)",
          "mintBehalf(address,uint256)",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow(uint256)",
          "repayBorrowBehalf(address,uint256)",
          "liquidateBorrow(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "underlying",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "VBep20Interface",
              "src": "contracts/connectors/Venus.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Venus.sol:VTokenInterface": {
        "src": "contracts/connectors/Venus.sol:66",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)",
          "balanceOf(address)",
          "balanceOfUnderlying(address)",
          "getAccountSnapshot(address)",
          "borrowRatePerBlock()",
          "supplyRatePerBlock()",
          "totalBorrowsCurrent()",
          "borrowBalanceCurrent(address)",
          "borrowBalanceStored(address)",
          "exchangeRateCurrent()",
          "exchangeRateStored()",
          "getCash()",
          "accrueInterest()",
          "seize(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_notEntered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:70"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:75"
            },
            {
              "label": "symbol",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:80"
            },
            {
              "label": "decimals",
              "offset": 0,
              "slot": "3",
              "type": "t_uint8",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:85"
            },
            {
              "label": "admin",
              "offset": 1,
              "slot": "3",
              "type": "t_address_payable",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:101"
            },
            {
              "label": "pendingAdmin",
              "offset": 0,
              "slot": "4",
              "type": "t_address_payable",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:106"
            },
            {
              "label": "interestRateModel",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(InterestRateModel)11655",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:111"
            },
            {
              "label": "initialExchangeRateMantissa",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:116"
            },
            {
              "label": "reserveFactorMantissa",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:121"
            },
            {
              "label": "accrualBlockNumber",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:126"
            },
            {
              "label": "borrowIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:131"
            },
            {
              "label": "totalBorrows",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:136"
            },
            {
              "label": "totalReserves",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:141"
            },
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:146"
            },
            {
              "label": "accountTokens",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:151"
            },
            {
              "label": "transferAllowances",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:156"
            },
            {
              "label": "accountBorrows",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(BorrowSnapshot)11792_storage)",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:171"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(InterestRateModel)11655": {
              "label": "contract InterestRateModel",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(BorrowSnapshot)11792_storage)": {
              "label": "mapping(address => struct VTokenInterface.BorrowSnapshot)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(BorrowSnapshot)11792_storage": {
              "label": "struct VTokenInterface.BorrowSnapshot",
              "members": [
                {
                  "label": "principal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "interestIndex",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Venus.sol:VenusInterface": {
        "src": "contracts/connectors/Venus.sol:194",
        "inherit": [
          "contracts/connectors/Venus.sol:VTokenInterface",
          "contracts/connectors/Venus.sol:VBep20Interface"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "underlying",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "VBep20Interface",
              "src": "contracts/connectors/Venus.sol:53"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:70"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:75"
            },
            {
              "label": "symbol",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:80"
            },
            {
              "label": "decimals",
              "offset": 0,
              "slot": "3",
              "type": "t_uint8",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:85"
            },
            {
              "label": "admin",
              "offset": 1,
              "slot": "3",
              "type": "t_address_payable",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:101"
            },
            {
              "label": "pendingAdmin",
              "offset": 0,
              "slot": "4",
              "type": "t_address_payable",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:106"
            },
            {
              "label": "interestRateModel",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(InterestRateModel)11655",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:111"
            },
            {
              "label": "initialExchangeRateMantissa",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:116"
            },
            {
              "label": "reserveFactorMantissa",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:121"
            },
            {
              "label": "accrualBlockNumber",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:126"
            },
            {
              "label": "borrowIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:131"
            },
            {
              "label": "totalBorrows",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:136"
            },
            {
              "label": "totalReserves",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:141"
            },
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:146"
            },
            {
              "label": "accountTokens",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:151"
            },
            {
              "label": "transferAllowances",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:156"
            },
            {
              "label": "accountBorrows",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(BorrowSnapshot)11792_storage)",
              "contract": "VTokenInterface",
              "src": "contracts/connectors/Venus.sol:171"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(InterestRateModel)11655": {
              "label": "contract InterestRateModel",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(BorrowSnapshot)11792_storage)": {
              "label": "mapping(address => struct VTokenInterface.BorrowSnapshot)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(BorrowSnapshot)11792_storage": {
              "label": "struct VTokenInterface.BorrowSnapshot",
              "members": [
                {
                  "label": "principal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "interestIndex",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IMasterWombatV2": {
        "src": "contracts/connectors/Wombat.sol:105",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(uint256,address)",
          "getAssetPid(address)",
          "poolLength()",
          "pendingTokens(uint256,address)",
          "rewarderBonusTokenInfo(uint256)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "multiClaim(uint256[])",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "migrate(uint256[])",
          "depositFor(uint256,uint256,address)",
          "updateFactor(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatAsset": {
        "src": "contracts/connectors/Wombat.sol:72",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlyingToken()",
          "pool()",
          "cash()",
          "liability()",
          "decimals()",
          "underlyingTokenDecimals()",
          "setPool(address)",
          "underlyingTokenBalance()",
          "transferUnderlyingToken(address,uint256)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "addCash(uint256)",
          "removeCash(uint256)",
          "addLiability(uint256)",
          "removeLiability(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatPool": {
        "src": "contracts/connectors/Wombat.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokens()",
          "addressOfAsset(address)",
          "deposit(address,uint256,uint256,address,uint256,bool)",
          "withdraw(address,uint256,uint256,address,uint256)",
          "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)",
          "swap(address,address,uint256,uint256,address,uint256)",
          "quotePotentialDeposit(address,uint256)",
          "quotePotentialSwap(address,address,int256)",
          "quotePotentialWithdraw(address,uint256)",
          "quoteAmountIn(address,address,int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:IWombatRouter": {
        "src": "contracts/connectors/Wombat.sol:157",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountOut(address[],address[],int256)",
          "getAmountIn(address[],address[],uint256)",
          "swapExactTokensForTokens(address[],address[],uint256,uint256,address,uint256)",
          "swapExactNativeForTokens(address[],address[],uint256,address,uint256)",
          "swapExactTokensForNative(address[],address[],uint256,uint256,address,uint256)",
          "addLiquidityNative(address,uint256,address,uint256,bool)",
          "removeLiquidityNative(address,uint256,uint256,address,uint256)",
          "removeLiquidityFromOtherAssetAsNative(address,address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombat.sol:WombatLibrary": {
        "src": "contracts/connectors/Wombat.sol:229",
        "version": {
          "withMetadata": "fded46865ae65c4a512ed814b08160c4d331ea14d354d194aa759a5d567106b1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBaseRewardPool": {
        "src": "contracts/connectors/Wombex.sol:21",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "totalAssets()",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "maxMint(address)",
          "previewMint(uint256)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "lastTimeRewardApplicable(address)",
          "rewardPerToken(address)",
          "earned(address,address)",
          "claimableRewards(address)",
          "stake(uint256)",
          "stakeAll()",
          "stakeFor(address,uint256)",
          "withdraw(uint256,bool)",
          "withdrawAll(bool)",
          "withdrawAndUnwrap(uint256,bool)",
          "withdrawAllAndUnwrap(bool)",
          "getReward(address,bool)",
          "getReward()",
          "donate(address,uint256)",
          "processIdleRewards()",
          "rewardTokensLen()",
          "rewardTokensList()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexBooster": {
        "src": "contracts/connectors/Wombex.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexPoolDepositor": {
        "src": "contracts/connectors/Wombex.sol:188",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256,bool)",
          "withdraw(address,uint256,uint256,address)",
          "getDepositAmountOut(address,uint256)",
          "getWithdrawAmountOut(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/connectors/Wombex.sol:IWombexVault": {
        "src": "contracts/connectors/Wombex.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "withdrawAndUnwrap(uint256,bool)",
          "getReward(address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IBlockGetter.sol:IBlockGetter": {
        "src": "contracts/interfaces/IBlockGetter.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getNumber()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IControlRole.sol:IControlRole": {
        "src": "contracts/interfaces/IControlRole.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IExchange.sol:IExchange": {
        "src": "contracts/interfaces/IExchange.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyFee()",
          "buyFeeDenominator()",
          "redeemFee()",
          "redeemFeeDenominator()",
          "balance()",
          "mint((address,uint256,string))",
          "buy(address,uint256)",
          "redeem(address,uint256)",
          "payout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IHedgeExchanger.sol:IHedgeExchanger": {
        "src": "contracts/interfaces/IHedgeExchanger.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buy(uint256,string)",
          "redeem(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IHedgeStrategy.sol:IHedgeStrategy": {
        "src": "contracts/interfaces/IHedgeStrategy.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(uint256)",
          "unstake(uint256,address)",
          "netAssetValue()",
          "claimRewards(address)",
          "balance(uint256)",
          "balancePosition()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IInsuranceExchange.sol:IInsuranceExchange": {
        "src": "contracts/interfaces/IInsuranceExchange.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint((uint256))",
          "redeem((uint256))",
          "payout()",
          "premium(uint256)",
          "compensate(uint256,address)",
          "requestWithdraw()",
          "checkWithdraw()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IMark2Market.sol:IMark2Market": {
        "src": "contracts/interfaces/IMark2Market.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "strategyAssets()",
          "totalNetAssets()",
          "totalLiquidationAssets()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IPayoutListener.sol:IPayoutListener": {
        "src": "contracts/interfaces/IPayoutListener.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "payoutDone()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IPortfolioManager.sol:IPortfolioManager": {
        "src": "contracts/interfaces/IPortfolioManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)",
          "getStrategyWeight(address)",
          "getAllStrategyWeights()",
          "claimAndBalance()",
          "balance()",
          "getTotalRiskFactor()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IRebaseToken.sol:IRebaseToken": {
        "src": "contracts/interfaces/IRebaseToken.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "liquidityIndex()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "balanceOf(address)",
          "scaledBalanceOf(address)",
          "totalSupply()",
          "totalMint()",
          "totalBurn()",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "scaledTotalSupply()",
          "ownerLength()",
          "ownerAt(uint256)",
          "ownerBalanceAt(uint256)",
          "setLiquidityIndex(uint256)",
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/interfaces/IStrategy.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "unstake(address,uint256,address,bool)",
          "netAssetValue()",
          "liquidationValue()",
          "claimRewards(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IUsdPlusToken.sol:IUsdPlusToken": {
        "src": "contracts/interfaces/IUsdPlusToken.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "liquidityIndex()",
          "exchange()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "balanceOf(address)",
          "scaledBalanceOf(address)",
          "totalSupply()",
          "totalMint()",
          "totalBurn()",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "scaledTotalSupply()",
          "ownerLength()",
          "ownerAt(uint256)",
          "ownerBalanceAt(uint256)",
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IWETH.sol:IWETH": {
        "src": "contracts/interfaces/IWETH.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/libraries/Babylonian.sol:Babylonian": {
        "src": "contracts/libraries/Babylonian.sol:8",
        "version": {
          "withMetadata": "0033338df56ab6e808597cb000d981b9ab259d06b8a3035c7cbf5731a8aea87c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/libraries/TokenMath.sol:OvnMath": {
        "src": "contracts/libraries/TokenMath.sol:4",
        "version": {
          "withMetadata": "c334a4703093078355fb94af80b3406193a520514b7ca3965d70f13389a62103",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/libraries/WadRayMath.sol:WadRayMath": {
        "src": "contracts/libraries/WadRayMath.sol:9",
        "version": {
          "withMetadata": "b1f82aba0e7223a490bb5463f72ec0abec6d741e0cf425f34a7d740960f69cba",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:StrategyThenaUsdtUsdPlus": {
        "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:10",
        "version": {
          "withMetadata": "7940525aac1bec9246a423f25f6a58dd82d5e56d3cc777c167fb93f9ec063c2f",
          "withoutMetadata": "cbcbe6f74e4467e37070f8a2b78913210999caaa61543021d28dce3c38b9150c",
          "linkedWithoutMetadata": "cbcbe6f74e4467e37070f8a2b78913210999caaa61543021d28dce3c38b9150c"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "hardhat/console.sol:console",
          "contracts/connectors/Thena.sol:ThenaLibrary",
          "contracts/libraries/TokenMath.sol:OvnMath",
          "contracts/connectors/Wombat.sol:WombatLibrary"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address,address,address))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "busd",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)2892",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:29"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)2892",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:30"
            },
            {
              "label": "usdPlus",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)2892",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:31"
            },
            {
              "label": "the",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IERC20)2892",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:32"
            },
            {
              "label": "pair",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IPair)10530",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:34"
            },
            {
              "label": "router",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IRouter)10880",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:35"
            },
            {
              "label": "gauge",
              "offset": 0,
              "slot": "307",
              "type": "t_contract(IGaugeV2)11067",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:36"
            },
            {
              "label": "wombatPool",
              "offset": 0,
              "slot": "308",
              "type": "t_address",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:37"
            },
            {
              "label": "wombatRouter",
              "offset": 0,
              "slot": "309",
              "type": "t_contract(IWombatRouter)12418",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:39"
            },
            {
              "label": "oracleBusd",
              "offset": 0,
              "slot": "310",
              "type": "t_contract(IPriceFeed)8999",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:41"
            },
            {
              "label": "oracleUsdt",
              "offset": 0,
              "slot": "311",
              "type": "t_contract(IPriceFeed)8999",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:42"
            },
            {
              "label": "busdDm",
              "offset": 0,
              "slot": "312",
              "type": "t_uint256",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:44"
            },
            {
              "label": "usdtDm",
              "offset": 0,
              "slot": "313",
              "type": "t_uint256",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:45"
            },
            {
              "label": "hay",
              "offset": 0,
              "slot": "314",
              "type": "t_contract(IERC20)2892",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:47"
            },
            {
              "label": "usdPlusDm",
              "offset": 0,
              "slot": "315",
              "type": "t_uint256",
              "contract": "StrategyThenaUsdtUsdPlus",
              "src": "contracts/strategies/StrategyThenaUsdtUsdPlus.sol:48"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)2892": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IGaugeV2)11067": {
              "label": "contract IGaugeV2",
              "numberOfBytes": "20"
            },
            "t_contract(IPair)10530": {
              "label": "contract IPair",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)8999": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_contract(IRouter)10880": {
              "label": "contract IRouter",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatRouter)12418": {
              "label": "contract IWombatRouter",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyThenawUsdrUsdc.sol:StrategyThenawUsdrUsdc": {
        "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:11",
        "version": {
          "withMetadata": "12cd2ee52d63760d69b4e5b0a9f3d228f340c5ad1625c21ae08d8921ea4e600b",
          "withoutMetadata": "3f37a7b0941b96bc0666cdaeaef7cbeba22a74bcb30e6652787e6cb9eef9a3b0",
          "linkedWithoutMetadata": "3f37a7b0941b96bc0666cdaeaef7cbeba22a74bcb30e6652787e6cb9eef9a3b0"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/connectors/Chainlink.sol:ChainlinkLibrary",
          "contracts/libraries/TokenMath.sol:OvnMath",
          "contracts/connectors/Wombat.sol:WombatLibrary",
          "contracts/connectors/Thena.sol:ThenaLibrary",
          "hardhat/console.sol:console"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address,address,address,address,address))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "busd",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)2892",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:32"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)2892",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:33"
            },
            {
              "label": "wUsdr",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)2892",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:34"
            },
            {
              "label": "the",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IERC20)2892",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:35"
            },
            {
              "label": "pair",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IPair)10530",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:38"
            },
            {
              "label": "router",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IRouter)10880",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:39"
            },
            {
              "label": "gauge",
              "offset": 0,
              "slot": "307",
              "type": "t_contract(IGaugeV2)11067",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:40"
            },
            {
              "label": "wombatPool",
              "offset": 0,
              "slot": "308",
              "type": "t_address",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:41"
            },
            {
              "label": "wombatRouter",
              "offset": 0,
              "slot": "309",
              "type": "t_contract(IWombatRouter)12418",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:43"
            },
            {
              "label": "oracleBusd",
              "offset": 0,
              "slot": "310",
              "type": "t_contract(IPriceFeed)8999",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:45"
            },
            {
              "label": "oracleUsdc",
              "offset": 0,
              "slot": "311",
              "type": "t_contract(IPriceFeed)8999",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:46"
            },
            {
              "label": "busdDm",
              "offset": 0,
              "slot": "312",
              "type": "t_uint256",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:48"
            },
            {
              "label": "usdcDm",
              "offset": 0,
              "slot": "313",
              "type": "t_uint256",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:49"
            },
            {
              "label": "wUsdrDm",
              "offset": 0,
              "slot": "314",
              "type": "t_uint256",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:51"
            },
            {
              "label": "usdtDm",
              "offset": 0,
              "slot": "315",
              "type": "t_uint256",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:52"
            },
            {
              "label": "oracleUsdt",
              "offset": 0,
              "slot": "316",
              "type": "t_contract(IPriceFeed)8999",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:54"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "317",
              "type": "t_contract(IERC20)2892",
              "contract": "StrategyThenawUsdrUsdc",
              "src": "contracts/strategies/StrategyThenawUsdrUsdc.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)2892": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IGaugeV2)11067": {
              "label": "contract IGaugeV2",
              "numberOfBytes": "20"
            },
            "t_contract(IPair)10530": {
              "label": "contract IPair",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)8999": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_contract(IRouter)10880": {
              "label": "contract IRouter",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatRouter)12418": {
              "label": "contract IWombatRouter",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyVenusBusd.sol:StrategyVenusBusd": {
        "src": "contracts/strategies/StrategyVenusBusd.sol:9",
        "version": {
          "withMetadata": "fe3959bc604bee9c4f7cb1dccdda9e7012b5f0e0d28f5691e669348d783d80f8",
          "withoutMetadata": "995ac216a4bc60d0faeeb0ddc673fcbae441bdf69ab20cc7ea99006cb905374f",
          "linkedWithoutMetadata": "995ac216a4bc60d0faeeb0ddc673fcbae441bdf69ab20cc7ea99006cb905374f"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "hardhat/console.sol:console",
          "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "busdToken",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)2892",
              "contract": "StrategyVenusBusd",
              "src": "contracts/strategies/StrategyVenusBusd.sol:25"
            },
            {
              "label": "vBusdToken",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(VenusInterface)11929",
              "contract": "StrategyVenusBusd",
              "src": "contracts/strategies/StrategyVenusBusd.sol:26"
            },
            {
              "label": "unitroller",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(Unitroller)11606",
              "contract": "StrategyVenusBusd",
              "src": "contracts/strategies/StrategyVenusBusd.sol:27"
            },
            {
              "label": "pancakeRouter",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IPancakeRouter02)10211",
              "contract": "StrategyVenusBusd",
              "src": "contracts/strategies/StrategyVenusBusd.sol:28"
            },
            {
              "label": "xvsToken",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IERC20)2892",
              "contract": "StrategyVenusBusd",
              "src": "contracts/strategies/StrategyVenusBusd.sol:29"
            },
            {
              "label": "wbnbToken",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IERC20)2892",
              "contract": "StrategyVenusBusd",
              "src": "contracts/strategies/StrategyVenusBusd.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)2892": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IPancakeRouter02)10211": {
              "label": "contract IPancakeRouter02",
              "numberOfBytes": "20"
            },
            "t_contract(Unitroller)11606": {
              "label": "contract Unitroller",
              "numberOfBytes": "20"
            },
            "t_contract(VenusInterface)11929": {
              "label": "contract VenusInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyWombexBusd.sol:StrategyWombexBusd": {
        "src": "contracts/strategies/StrategyWombexBusd.sol:11",
        "version": {
          "withMetadata": "3bc341f0cffe60e6a5a1654dc06eabbee5ba54ce9a27ba36fae632fbdfd52a26",
          "withoutMetadata": "c34df9f15b9abff2c5ec344c09bd77f481ffa7a41de35a831ef859ee0c6d7754",
          "linkedWithoutMetadata": "c34df9f15b9abff2c5ec344c09bd77f481ffa7a41de35a831ef859ee0c6d7754"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/libraries/TokenMath.sol:OvnMath",
          "contracts/connectors/Wombat.sol:WombatLibrary",
          "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary",
          "hardhat/console.sol:console",
          "contracts/connectors/Chainlink.sol:ChainlinkLibrary"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address,address,address,address,address))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "busd",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)2892",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:33"
            },
            {
              "label": "wom",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)2892",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:34"
            },
            {
              "label": "wmx",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)2892",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:35"
            },
            {
              "label": "lpBusd",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IWombatAsset)12146",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:37"
            },
            {
              "label": "wmxLpBusd",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IWombexBaseRewardPool)13285",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:38"
            },
            {
              "label": "poolDepositor",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IWombexPoolDepositor)13330",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:39"
            },
            {
              "label": "pool",
              "offset": 0,
              "slot": "307",
              "type": "t_address",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:40"
            },
            {
              "label": "pancakeRouter",
              "offset": 0,
              "slot": "308",
              "type": "t_contract(IPancakeRouter02)10211",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:42"
            },
            {
              "label": "lpBusdDm",
              "offset": 0,
              "slot": "309",
              "type": "t_uint256",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:44"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "310",
              "type": "t_contract(IERC20)2892",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:46"
            },
            {
              "label": "wombatRouter",
              "offset": 0,
              "slot": "311",
              "type": "t_contract(IWombatRouter)12418",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:48"
            },
            {
              "label": "oracleUsdc",
              "offset": 0,
              "slot": "312",
              "type": "t_contract(IPriceFeed)8999",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:50"
            },
            {
              "label": "oracleBusd",
              "offset": 0,
              "slot": "313",
              "type": "t_contract(IPriceFeed)8999",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:51"
            },
            {
              "label": "usdcDm",
              "offset": 0,
              "slot": "314",
              "type": "t_uint256",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:53"
            },
            {
              "label": "busdDm",
              "offset": 0,
              "slot": "315",
              "type": "t_uint256",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:54"
            },
            {
              "label": "usdtDm",
              "offset": 0,
              "slot": "316",
              "type": "t_uint256",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:55"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "317",
              "type": "t_contract(IERC20)2892",
              "contract": "StrategyWombexBusd",
              "src": "contracts/strategies/StrategyWombexBusd.sol:57"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)2892": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IPancakeRouter02)10211": {
              "label": "contract IPancakeRouter02",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)8999": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatAsset)12146": {
              "label": "contract IWombatAsset",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatRouter)12418": {
              "label": "contract IWombatRouter",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexBaseRewardPool)13285": {
              "label": "contract IWombexBaseRewardPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexPoolDepositor)13330": {
              "label": "contract IWombexPoolDepositor",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyWombexUsdt+.sol:StrategyWombexUsdtPlus": {
        "src": "contracts/strategies/StrategyWombexUsdt+.sol:11",
        "version": {
          "withMetadata": "379e1c34a7e8f51143c21df216ff121c0207d0b34f1fcc2488762a96b2c86ae4",
          "withoutMetadata": "82a858fa9346c55a3b110b8850d7f6f82d8347a6d11f79e17591d298da5aa030",
          "linkedWithoutMetadata": "82a858fa9346c55a3b110b8850d7f6f82d8347a6d11f79e17591d298da5aa030"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "hardhat/console.sol:console",
          "contracts/connectors/Wombat.sol:WombatLibrary",
          "contracts/libraries/TokenMath.sol:OvnMath",
          "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary",
          "contracts/connectors/Chainlink.sol:ChainlinkLibrary"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address,address,address,address))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)2892",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:32"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)2892",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:33"
            },
            {
              "label": "usdtPlus",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)2892",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:34"
            },
            {
              "label": "wom",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IERC20)2892",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:35"
            },
            {
              "label": "wmx",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IERC20)2892",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:36"
            },
            {
              "label": "lpUsdtPlus",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IWombatAsset)12146",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:38"
            },
            {
              "label": "wmxLpUsdtPlus",
              "offset": 0,
              "slot": "307",
              "type": "t_contract(IWombexBaseRewardPool)13285",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:39"
            },
            {
              "label": "poolDepositor",
              "offset": 0,
              "slot": "308",
              "type": "t_contract(IWombexPoolDepositor)13330",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:40"
            },
            {
              "label": "pool",
              "offset": 0,
              "slot": "309",
              "type": "t_address",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:41"
            },
            {
              "label": "pancakeRouter",
              "offset": 0,
              "slot": "310",
              "type": "t_contract(IPancakeRouter02)10211",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:43"
            },
            {
              "label": "lpUsdtDm",
              "offset": 0,
              "slot": "311",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:45"
            },
            {
              "label": "wombatRouter",
              "offset": 0,
              "slot": "312",
              "type": "t_contract(IWombatRouter)12418",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:48"
            },
            {
              "label": "oracleUsdt",
              "offset": 0,
              "slot": "313",
              "type": "t_contract(IPriceFeed)8999",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:50"
            },
            {
              "label": "usdtDm",
              "offset": 0,
              "slot": "314",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:52"
            },
            {
              "label": "usdtPlusDm",
              "offset": 0,
              "slot": "315",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:53"
            },
            {
              "label": "lpUsdtPlusDm",
              "offset": 0,
              "slot": "316",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtPlus",
              "src": "contracts/strategies/StrategyWombexUsdt+.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)2892": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IPancakeRouter02)10211": {
              "label": "contract IPancakeRouter02",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)8999": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatAsset)12146": {
              "label": "contract IWombatAsset",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatRouter)12418": {
              "label": "contract IWombatRouter",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexBaseRewardPool)13285": {
              "label": "contract IWombexBaseRewardPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexPoolDepositor)13330": {
              "label": "contract IWombexPoolDepositor",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyWombexUsdt.sol:StrategyWombexUsdt": {
        "src": "contracts/strategies/StrategyWombexUsdt.sol:11",
        "version": {
          "withMetadata": "8104d1fe3ca5dcf8b1242e9b8fd3ab9dda7295ca9d4ecea0bf1d9598b4fb0ec8",
          "withoutMetadata": "c1d2be8d2e59131504c18749dd9e861588a476e814c1ddce079576b8f73b034a",
          "linkedWithoutMetadata": "c1d2be8d2e59131504c18749dd9e861588a476e814c1ddce079576b8f73b034a"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/libraries/TokenMath.sol:OvnMath",
          "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address,address,address,string))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)2892",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:32"
            },
            {
              "label": "wom",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)2892",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:34"
            },
            {
              "label": "wmx",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)2892",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:35"
            },
            {
              "label": "lpUsdt",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IWombatAsset)12146",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:37"
            },
            {
              "label": "wmxLpUsdt",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IWombexBaseRewardPool)13285",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:38"
            },
            {
              "label": "poolDepositor",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IWombexPoolDepositor)13330",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:39"
            },
            {
              "label": "pool",
              "offset": 0,
              "slot": "307",
              "type": "t_address",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:40"
            },
            {
              "label": "pancakeRouter",
              "offset": 0,
              "slot": "308",
              "type": "t_contract(IPancakeRouter02)10211",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:41"
            },
            {
              "label": "wombatRouter",
              "offset": 0,
              "slot": "309",
              "type": "t_contract(IWombatRouter)12418",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:42"
            },
            {
              "label": "oracleBusd",
              "offset": 0,
              "slot": "310",
              "type": "t_contract(IPriceFeed)8999",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:43"
            },
            {
              "label": "oracleUsdt",
              "offset": 0,
              "slot": "311",
              "type": "t_contract(IPriceFeed)8999",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:44"
            },
            {
              "label": "usdtDm",
              "offset": 0,
              "slot": "312",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:45"
            },
            {
              "label": "lpUsdtDm",
              "offset": 0,
              "slot": "313",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:46"
            },
            {
              "label": "busd",
              "offset": 0,
              "slot": "314",
              "type": "t_contract(IERC20)2892",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:48"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "315",
              "type": "t_string_storage",
              "contract": "StrategyWombexUsdt",
              "src": "contracts/strategies/StrategyWombexUsdt.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)2892": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IPancakeRouter02)10211": {
              "label": "contract IPancakeRouter02",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)8999": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatAsset)12146": {
              "label": "contract IWombatAsset",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatRouter)12418": {
              "label": "contract IWombatRouter",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexBaseRewardPool)13285": {
              "label": "contract IWombexBaseRewardPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexPoolDepositor)13330": {
              "label": "contract IWombexPoolDepositor",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/strategies/StrategyWombexUsdtMim.sol:StrategyWombexUsdtMim": {
        "src": "contracts/strategies/StrategyWombexUsdtMim.sol:10",
        "version": {
          "withMetadata": "cee2c681a7c9ef0f49f8cbf0607207ecf766fb49a45e50863396a6fedc6ce94c",
          "withoutMetadata": "4e87ea524d63b39caca5f6ef7bb944a19cc33be048dfb395374028d9aa8dc8f6",
          "linkedWithoutMetadata": "4e87ea524d63b39caca5f6ef7bb944a19cc33be048dfb395374028d9aa8dc8f6"
        },
        "inherit": [
          "contracts/Strategy.sol:Strategy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "contracts/libraries/TokenMath.sol:OvnMath",
          "contracts/connectors/PancakeV2.sol:PancakeSwapLibrary"
        ],
        "methods": [
          "()",
          "initialize()",
          "setParams((address,address,address,address,address,address,address,address,address))",
          "netAssetValue()",
          "liquidationValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "portfolioManager",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:19"
            },
            {
              "label": "swapSlippageBP",
              "offset": 0,
              "slot": "252",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:21"
            },
            {
              "label": "navSlippageBP",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:22"
            },
            {
              "label": "stakeSlippageBP",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)46_storage",
              "contract": "Strategy",
              "src": "contracts/Strategy.sol:175"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "301",
              "type": "t_contract(IERC20)2892",
              "contract": "StrategyWombexUsdtMim",
              "src": "contracts/strategies/StrategyWombexUsdtMim.sol:28"
            },
            {
              "label": "busd",
              "offset": 0,
              "slot": "302",
              "type": "t_contract(IERC20)2892",
              "contract": "StrategyWombexUsdtMim",
              "src": "contracts/strategies/StrategyWombexUsdtMim.sol:29"
            },
            {
              "label": "wom",
              "offset": 0,
              "slot": "303",
              "type": "t_contract(IERC20)2892",
              "contract": "StrategyWombexUsdtMim",
              "src": "contracts/strategies/StrategyWombexUsdtMim.sol:30"
            },
            {
              "label": "wmx",
              "offset": 0,
              "slot": "304",
              "type": "t_contract(IERC20)2892",
              "contract": "StrategyWombexUsdtMim",
              "src": "contracts/strategies/StrategyWombexUsdtMim.sol:31"
            },
            {
              "label": "lpUsdt",
              "offset": 0,
              "slot": "305",
              "type": "t_contract(IWombatAsset)12146",
              "contract": "StrategyWombexUsdtMim",
              "src": "contracts/strategies/StrategyWombexUsdtMim.sol:33"
            },
            {
              "label": "wmxLpUsdt",
              "offset": 0,
              "slot": "306",
              "type": "t_contract(IWombexBaseRewardPool)13285",
              "contract": "StrategyWombexUsdtMim",
              "src": "contracts/strategies/StrategyWombexUsdtMim.sol:34"
            },
            {
              "label": "poolDepositor",
              "offset": 0,
              "slot": "307",
              "type": "t_contract(IWombexPoolDepositor)13330",
              "contract": "StrategyWombexUsdtMim",
              "src": "contracts/strategies/StrategyWombexUsdtMim.sol:35"
            },
            {
              "label": "pool",
              "offset": 0,
              "slot": "308",
              "type": "t_address",
              "contract": "StrategyWombexUsdtMim",
              "src": "contracts/strategies/StrategyWombexUsdtMim.sol:36"
            },
            {
              "label": "pancakeRouter",
              "offset": 0,
              "slot": "309",
              "type": "t_contract(IPancakeRouter02)10211",
              "contract": "StrategyWombexUsdtMim",
              "src": "contracts/strategies/StrategyWombexUsdtMim.sol:38"
            },
            {
              "label": "lpUsdtDm",
              "offset": 0,
              "slot": "310",
              "type": "t_uint256",
              "contract": "StrategyWombexUsdtMim",
              "src": "contracts/strategies/StrategyWombexUsdtMim.sol:40"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)2892": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IPancakeRouter02)10211": {
              "label": "contract IPancakeRouter02",
              "numberOfBytes": "20"
            },
            "t_contract(IWombatAsset)12146": {
              "label": "contract IWombatAsset",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexBaseRewardPool)13285": {
              "label": "contract IWombexBaseRewardPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWombexPoolDepositor)13330": {
              "label": "contract IWombexPoolDepositor",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "11dd6dc76097d36a942a70d2c126eb47bfe7dddb77078c805502f622dcf91b57",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      }
    }
  ]
}