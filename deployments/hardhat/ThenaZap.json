{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_WBNBAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pancakeRouter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxZapReverseRatio",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountTokens",
          "type": "uint256"
        }
      ],
      "name": "AdminTokenRecovery",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxZapReverseRatio",
          "type": "uint256"
        }
      ],
      "name": "NewMaxZapReverseRatio",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenToZap",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenAmountReceived",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "ZapIn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0ToZap",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1ToZap",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token0AmountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token1AmountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenAmountReceived",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "ZapInRebalancing",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenToReceive",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmountReceived",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "ZapOut",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_INT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINIMUM_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WBNB",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token0ToZap",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token1ToZap",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_token0AmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_token1AmountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        }
      ],
      "name": "estimateZapInRebalancingSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "swapAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "swapAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "sellToken0",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenToZap",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        }
      ],
      "name": "estimateZapInSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "swapAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "swapAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "swapTokenOut",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_lpTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenToReceive",
          "type": "address"
        }
      ],
      "name": "estimateZapOutSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "swapAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "swapAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "swapTokenOut",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxZapReverseRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pancakeRouter",
      "outputs": [
        {
          "internalType": "contract IPancakeRouter02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverWrongTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxZapInverseRatio",
          "type": "uint256"
        }
      ],
      "name": "updateMaxZapInverseRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmountOutMin",
          "type": "uint256"
        }
      ],
      "name": "zapInBNB",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token1ToZap",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_token1AmountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmountInMax",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isToken0Sold",
          "type": "bool"
        }
      ],
      "name": "zapInBNBRebalancing",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenToZap",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmountOutMin",
          "type": "uint256"
        }
      ],
      "name": "zapInToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token0ToZap",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token1ToZap",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_token0AmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_token1AmountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmountInMax",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isToken0Sold",
          "type": "bool"
        }
      ],
      "name": "zapInTokenRebalancing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_lpTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalTokenAmountOutMin",
          "type": "uint256"
        }
      ],
      "name": "zapOutBNB",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenToReceive",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_lpTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalTokenAmountOutMin",
          "type": "uint256"
        }
      ],
      "name": "zapOutToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8c6e14a4244b05e7a565ccf72ac1a3e3c4e1f77607365d8aa7acba1aab0acca0",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "3942147",
    "logsBloom": "0x
    "blockHash": "0x838091d48e6315098ba180df5ddc2affa56100ff6f5aad6c5dcd1edb6c7763cc",
    "transactionHash": "0x8c6e14a4244b05e7a565ccf72ac1a3e3c4e1f77607365d8aa7acba1aab0acca0",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x8c6e14a4244b05e7a565ccf72ac1a3e3c4e1f77607365d8aa7acba1aab0acca0",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x838091d48e6315098ba180df5ddc2affa56100ff6f5aad6c5dcd1edb6c7763cc"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "3942147",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c",
    "0x10ed43c718714eb63d5aa57b78b54704e256024e",
    "50"
  ],
  "numDeployments": 1,
  "solcInputHash": "27caaebfcde4d7d8f9086f14cfa0c674",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WBNBAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pancakeRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxZapReverseRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"AdminTokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxZapReverseRatio\",\"type\":\"uint256\"}],\"name\":\"NewMaxZapReverseRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenToZap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmountReceived\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ZapIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0ToZap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1ToZap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token0AmountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token1AmountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmountReceived\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ZapInRebalancing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenToReceive\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmountReceived\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ZapOut\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_INT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBNB\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0ToZap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1ToZap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_token0AmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_token1AmountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"estimateZapInRebalancingSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sellToken0\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenToZap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"estimateZapInSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapTokenOut\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lpTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenToReceive\",\"type\":\"address\"}],\"name\":\"estimateZapOutSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapTokenOut\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxZapReverseRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverWrongTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxZapInverseRatio\",\"type\":\"uint256\"}],\"name\":\"updateMaxZapInverseRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmountOutMin\",\"type\":\"uint256\"}],\"name\":\"zapInBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token1ToZap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_token1AmountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmountInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isToken0Sold\",\"type\":\"bool\"}],\"name\":\"zapInBNBRebalancing\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenToZap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmountOutMin\",\"type\":\"uint256\"}],\"name\":\"zapInToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0ToZap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1ToZap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_token0AmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_token1AmountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmountInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isToken0Sold\",\"type\":\"bool\"}],\"name\":\"zapInTokenRebalancing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lpTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalTokenAmountOutMin\",\"type\":\"uint256\"}],\"name\":\"zapOutBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenToReceive\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lpTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalTokenAmountOutMin\",\"type\":\"uint256\"}],\"name\":\"zapOutToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recoverWrongTokens(address,uint256)\":{\"details\":\"This function is only callable by owner.\",\"params\":{\"_tokenAddress\":\": the address of the token to withdraw (18 decimals)\",\"_tokenAmount\":\": the number of token amount to withdraw\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateMaxZapInverseRatio(uint256)\":{\"details\":\"This function is only callable by owner.\",\"params\":{\"_maxZapInverseRatio\":\": new inverse ratio\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"recoverWrongTokens(address,uint256)\":{\"notice\":\"It allows the owner to recover wrong tokens sent to the contract\"},\"updateMaxZapInverseRatio(uint256)\":{\"notice\":\"It allows the owner to change the risk parameter for quantities\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ThenaZap.sol\":\"ThenaZap\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/ThenaZap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport {IPancakePair,IPancakeRouter02} from \\\"./connectors/PancakeV2.sol\\\";\\nimport {IWETH} from \\\"./interfaces/IWETH.sol\\\";\\n//import  \\\"./libraries/Babylonian.sol\\\";\\n\\n/*\\n * @author Inspiration from the work of Zapper and Beefy.\\n * Implemented and modified by PancakeSwap teams.\\n * Then modified for Thena by @CryptoCultCurt\\n */\\ncontract ThenaZap is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    // Interface for Wrapped BNB (WBNB)\\n    IWETH public WBNB;\\n\\n    // PancakeRouter interface\\n    IPancakeRouter02 public pancakeRouter;\\n\\n    // Maximum integer (used for managing allowance)\\n    uint256 public constant MAX_INT = 2**256 - 1;\\n\\n    // Minimum amount for a swap (derived from PancakeSwap)\\n    uint256 public constant MINIMUM_AMOUNT = 1000;\\n\\n    // Maximum reverse zap ratio (100 --> 1%, 1000 --> 0.1%)\\n    uint256 public maxZapReverseRatio;\\n\\n    // Address PancakeRouter\\n    address private pancakeRouterAddress;\\n\\n    // Address Wrapped BNB (WBNB)\\n    address private WBNBAddress;\\n\\n    // Owner recovers token\\n    event AdminTokenRecovery(address indexed tokenAddress, uint256 amountTokens);\\n\\n    // Owner changes the maxZapReverseRatio\\n    event NewMaxZapReverseRatio(uint256 maxZapReverseRatio);\\n\\n    // tokenToZap = 0x00 address if BNB\\n    event ZapIn(\\n        address indexed tokenToZap,\\n        address indexed lpToken,\\n        uint256 tokenAmountIn,\\n        uint256 lpTokenAmountReceived,\\n        address indexed user\\n    );\\n\\n    // token0ToZap = 0x00 address if BNB\\n    event ZapInRebalancing(\\n        address indexed token0ToZap,\\n        address indexed token1ToZap,\\n        address lpToken,\\n        uint256 token0AmountIn,\\n        uint256 token1AmountIn,\\n        uint256 lpTokenAmountReceived,\\n        address indexed user\\n    );\\n\\n    // tokenToReceive = 0x00 address if BNB\\n    event ZapOut(\\n        address indexed lpToken,\\n        address indexed tokenToReceive,\\n        uint256 lpTokenAmount,\\n        uint256 tokenAmountReceived,\\n        address indexed user\\n    );\\n\\n    /*\\n     * @notice Fallback for WBNB\\n     */\\n    receive() external payable {\\n        assert(msg.sender == WBNBAddress);\\n    }\\n\\n    /*\\n     * @notice Constructor\\n     * @param _WBNBAddress: address of the WBNB contract\\n     * @param _pancakeRouter: address of the PancakeRouter\\n     * @param _maxZapReverseRatio: maximum zap ratio\\n     */\\n    constructor(\\n        address _WBNBAddress,\\n        address _pancakeRouter,\\n        uint256 _maxZapReverseRatio\\n    ) {\\n        WBNBAddress = _WBNBAddress;\\n        WBNB = IWETH(_WBNBAddress);\\n        pancakeRouterAddress = _pancakeRouter;\\n        pancakeRouter = IPancakeRouter02(_pancakeRouter);\\n        maxZapReverseRatio = _maxZapReverseRatio;\\n    }\\n\\n    /*\\n     * @notice Zap BNB in a WBNB pool (e.g. WBNB/token)\\n     * @param _lpToken: LP token address (e.g. CAKE/BNB)\\n     * @param _tokenAmountOutMin: minimum token amount (e.g. CAKE) to receive in the intermediary swap (e.g. BNB --> CAKE)\\n     */\\n    function zapInBNB(address _lpToken, uint256 _tokenAmountOutMin) external payable nonReentrant {\\n        WBNB.deposit{value: msg.value}();\\n\\n        // Call zap function\\n        uint256 lpTokenAmountTransferred = _zapIn(WBNBAddress, msg.value, _lpToken, _tokenAmountOutMin);\\n\\n        // Emit event\\n        emit ZapIn(\\n            address(0x0000000000000000000000000000000000000000),\\n            _lpToken,\\n            msg.value,\\n            lpTokenAmountTransferred,\\n            msg.sender\\n        );\\n    }\\n\\n    /*\\n     * @notice Zap a token in (e.g. token/other token)\\n     * @param _tokenToZap: token to zap\\n     * @param _tokenAmountIn: amount of token to swap\\n     * @param _lpToken: LP token address (e.g. CAKE/BUSD)\\n     * @param _tokenAmountOutMin: minimum token to receive (e.g. CAKE) in the intermediary swap (e.g. BUSD --> CAKE)\\n     */\\n    function zapInToken(\\n        address _tokenToZap,\\n        uint256 _tokenAmountIn,\\n        address _lpToken,\\n        uint256 _tokenAmountOutMin\\n    ) external nonReentrant {\\n        // Transfer tokens to this contract\\n        IERC20(_tokenToZap).safeTransferFrom(msg.sender, address(this), _tokenAmountIn);\\n\\n        // Call zap function\\n        uint256 lpTokenAmountTransferred = _zapIn(_tokenToZap, _tokenAmountIn, _lpToken, _tokenAmountOutMin);\\n\\n        // Emit event\\n        emit ZapIn(_tokenToZap, _lpToken, _tokenAmountIn, lpTokenAmountTransferred, msg.sender);\\n    }\\n\\n    /*\\n     * @notice Zap two tokens in, rebalance them to 50-50, before adding them to LP\\n     * @param _token0ToZap: address of token0 to zap\\n     * @param _token1ToZap: address of token1 to zap\\n     * @param _token0AmountIn: amount of token0 to zap\\n     * @param _token1AmountIn: amount of token1 to zap\\n     * @param _lpToken: LP token address (token0/token1)\\n     * @param _tokenAmountInMax: maximum token amount to sell (in token to sell in the intermediary swap)\\n     * @param _tokenAmountOutMin: minimum token to receive in the intermediary swap\\n     * @param _isToken0Sold: whether token0 is expected to be sold (if false, sell token1)\\n     */\\n    function zapInTokenRebalancing(\\n        address _token0ToZap,\\n        address _token1ToZap,\\n        uint256 _token0AmountIn,\\n        uint256 _token1AmountIn,\\n        address _lpToken,\\n        uint256 _tokenAmountInMax,\\n        uint256 _tokenAmountOutMin,\\n        bool _isToken0Sold\\n    ) external nonReentrant {\\n        // Transfer tokens to this contract\\n        IERC20(_token0ToZap).safeTransferFrom(msg.sender, address(this), _token0AmountIn);\\n        IERC20(_token1ToZap).safeTransferFrom(msg.sender, address(this), _token1AmountIn);\\n\\n        // Call zapIn function\\n        uint256 lpTokenAmountTransferred = _zapInRebalancing(\\n            _token0ToZap,\\n            _token1ToZap,\\n            _token0AmountIn,\\n            _token1AmountIn,\\n            _lpToken,\\n            _tokenAmountInMax,\\n            _tokenAmountOutMin,\\n            _isToken0Sold\\n        );\\n\\n        // Emit event\\n        emit ZapInRebalancing(\\n            _token0ToZap,\\n            _token1ToZap,\\n            _lpToken,\\n            _token0AmountIn,\\n            _token1AmountIn,\\n            lpTokenAmountTransferred,\\n            msg.sender\\n        );\\n    }\\n\\n    /*\\n     * @notice Zap 1 token and BNB, rebalance them to 50-50, before adding them to LP\\n     * @param _token1ToZap: address of token1 to zap\\n     * @param _token1AmountIn: amount of token1 to zap\\n     * @param _lpToken: LP token address\\n     * @param _tokenAmountInMax: maximum token amount to sell (in token to sell in the intermediary swap)\\n     * @param _tokenAmountOutMin: minimum token to receive in the intermediary swap\\n     * @param _isToken0Sold: whether token0 is expected to be sold (if false, sell token1)\\n     */\\n    function zapInBNBRebalancing(\\n        address _token1ToZap,\\n        uint256 _token1AmountIn,\\n        address _lpToken,\\n        uint256 _tokenAmountInMax,\\n        uint256 _tokenAmountOutMin,\\n        bool _isToken0Sold\\n    ) external payable nonReentrant {\\n        WBNB.deposit{value: msg.value}();\\n\\n        IERC20(_token1ToZap).safeTransferFrom(msg.sender, address(this), _token1AmountIn);\\n\\n        // Call zapIn function\\n        uint256 lpTokenAmountTransferred = _zapInRebalancing(\\n            WBNBAddress,\\n            _token1ToZap,\\n            msg.value,\\n            _token1AmountIn,\\n            _lpToken,\\n            _tokenAmountInMax,\\n            _tokenAmountOutMin,\\n            _isToken0Sold\\n        );\\n\\n        // Emit event\\n        emit ZapInRebalancing(\\n            address(0x0000000000000000000000000000000000000000),\\n            _token1ToZap,\\n            _lpToken,\\n            msg.value,\\n            _token1AmountIn,\\n            lpTokenAmountTransferred,\\n            msg.sender\\n        );\\n    }\\n\\n    /*\\n     * @notice Zap a LP token out to receive BNB\\n     * @param _lpToken: LP token address (e.g. CAKE/WBNB)\\n     * @param _lpTokenAmount: amount of LP tokens to zap out\\n     * @param _tokenAmountOutMin: minimum amount to receive (in BNB/WBNB) in the intermediary swap (e.g. CAKE --> BNB)\\n     */\\n    function zapOutBNB(\\n        address _lpToken,\\n        uint256 _lpTokenAmount,\\n        uint256 _tokenAmountOutMin,\\n        uint256 _totalTokenAmountOutMin\\n    ) external nonReentrant {\\n        // Transfer LP token to this address\\n        IERC20(_lpToken).safeTransferFrom(msg.sender, address(_lpToken), _lpTokenAmount);\\n\\n        // Call zapOut\\n        uint256 tokenAmountToTransfer = _zapOut(_lpToken, WBNBAddress, _tokenAmountOutMin, _totalTokenAmountOutMin);\\n\\n        // Unwrap BNB\\n        WBNB.withdraw(tokenAmountToTransfer);\\n\\n        // Transfer BNB to the msg.sender\\n        (bool success, ) = msg.sender.call{value: tokenAmountToTransfer}(new bytes(0));\\n        require(success, \\\"BNB: transfer fail\\\");\\n\\n        // Emit event\\n        emit ZapOut(\\n            _lpToken,\\n            address(0x0000000000000000000000000000000000000000),\\n            _lpTokenAmount,\\n            tokenAmountToTransfer,\\n            msg.sender\\n        );\\n    }\\n\\n    /*\\n     * @notice Zap a LP token out (to receive a token)\\n     * @param _lpToken: LP token address (e.g. CAKE/BUSD)\\n     * @param _tokenToReceive: one of the 2 tokens from the LP (e.g. CAKE or BUSD)\\n     * @param _lpTokenAmount: amount of LP tokens to zap out\\n     * @param _tokenAmountOutMin: minimum token to receive (e.g. CAKE) in the intermediary swap (e.g. BUSD --> CAKE)\\n     */\\n    function zapOutToken(\\n        address _lpToken,\\n        address _tokenToReceive,\\n        uint256 _lpTokenAmount,\\n        uint256 _tokenAmountOutMin,\\n        uint256 _totalTokenAmountOutMin\\n    ) external nonReentrant {\\n        // Transfer LP token to this address\\n        IERC20(_lpToken).safeTransferFrom(msg.sender, address(_lpToken), _lpTokenAmount);\\n\\n        uint256 tokenAmountToTransfer = _zapOut(_lpToken, _tokenToReceive, _tokenAmountOutMin, _totalTokenAmountOutMin);\\n\\n        IERC20(_tokenToReceive).safeTransfer(msg.sender, tokenAmountToTransfer);\\n\\n        emit ZapOut(_lpToken, _tokenToReceive, _lpTokenAmount, tokenAmountToTransfer, msg.sender);\\n    }\\n\\n    /**\\n     * @notice It allows the owner to change the risk parameter for quantities\\n     * @param _maxZapInverseRatio: new inverse ratio\\n     * @dev This function is only callable by owner.\\n     */\\n    function updateMaxZapInverseRatio(uint256 _maxZapInverseRatio) external onlyOwner {\\n        maxZapReverseRatio = _maxZapInverseRatio;\\n        emit NewMaxZapReverseRatio(_maxZapInverseRatio);\\n    }\\n\\n    /**\\n     * @notice It allows the owner to recover wrong tokens sent to the contract\\n     * @param _tokenAddress: the address of the token to withdraw (18 decimals)\\n     * @param _tokenAmount: the number of token amount to withdraw\\n     * @dev This function is only callable by owner.\\n     */\\n    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {\\n        IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\\n        emit AdminTokenRecovery(_tokenAddress, _tokenAmount);\\n    }\\n\\n    /*\\n     * @notice View the details for single zap\\n     * @dev Use WBNB for _tokenToZap (if BNB is the input)\\n     * @param _tokenToZap: address of the token to zap\\n     * @param _tokenAmountIn: amount of token to zap inputed\\n     * @param _lpToken: address of the LP token\\n     * @return swapAmountIn: amount that is expected to get swapped in intermediary swap\\n     * @return swapAmountOut: amount that is expected to get received in intermediary swap\\n     * @return swapTokenOut: token address of the token that is used in the intermediary swap\\n     */\\n    function estimateZapInSwap(\\n        address _tokenToZap,\\n        uint256 _tokenAmountIn,\\n        address _lpToken\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 swapAmountIn,\\n            uint256 swapAmountOut,\\n            address swapTokenOut\\n        )\\n    {\\n        address token0 = IPancakePair(_lpToken).token0();\\n        address token1 = IPancakePair(_lpToken).token1();\\n\\n        require(_tokenToZap == token0 || _tokenToZap == token1, \\\"Zap: Wrong tokens\\\");\\n\\n        // Convert to uint256 (from uint112)\\n        (uint256 reserveA, uint256 reserveB, ) = IPancakePair(_lpToken).getReserves();\\n\\n        if (token0 == _tokenToZap) {\\n            swapTokenOut = token1;\\n            swapAmountIn = _calculateAmountToSwap(_tokenAmountIn, reserveA, reserveB);\\n            swapAmountOut = pancakeRouter.getAmountOut(swapAmountIn, reserveA, reserveB);\\n        } else {\\n            swapTokenOut = token0;\\n            swapAmountIn = _calculateAmountToSwap(_tokenAmountIn, reserveB, reserveA);\\n            swapAmountOut = pancakeRouter.getAmountOut(swapAmountIn, reserveB, reserveA);\\n        }\\n\\n        return (swapAmountIn, swapAmountOut, swapTokenOut);\\n    }\\n\\n    /*\\n     * @notice View the details for a rebalancing zap\\n     * @dev Use WBNB for _token0ToZap (if BNB is the input)\\n     * @param _token0ToZap: address of the token0 to zap\\n     * @param _token1ToZap: address of the token0 to zap\\n     * @param _token0AmountIn: amount for token0 to zap\\n     * @param _token1AmountIn: amount for token1 to zap\\n     * @param _lpToken: address of the LP token\\n     * @return swapAmountIn: amount that is expected to get swapped in intermediary swap\\n     * @return swapAmountOut: amount that is expected to get received in intermediary swap\\n     * @return isToken0Sold: whether the token0 is sold (false --> token1 is sold in the intermediary swap)\\n     */\\n    function estimateZapInRebalancingSwap(\\n        address _token0ToZap,\\n        address _token1ToZap,\\n        uint256 _token0AmountIn,\\n        uint256 _token1AmountIn,\\n        address _lpToken\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 swapAmountIn,\\n            uint256 swapAmountOut,\\n            bool sellToken0\\n        )\\n    {\\n        require(\\n            _token0ToZap == IPancakePair(_lpToken).token0() || _token0ToZap == IPancakePair(_lpToken).token1(),\\n            \\\"Zap: Wrong token0\\\"\\n        );\\n        require(\\n            _token1ToZap == IPancakePair(_lpToken).token0() || _token1ToZap == IPancakePair(_lpToken).token1(),\\n            \\\"Zap: Wrong token1\\\"\\n        );\\n\\n        require(_token0ToZap != _token1ToZap, \\\"Zap: Same tokens\\\");\\n\\n        // Convert to uint256 (from uint112)\\n        (uint256 reserveA, uint256 reserveB, ) = IPancakePair(_lpToken).getReserves();\\n\\n        if (_token0ToZap == IPancakePair(_lpToken).token0()) {\\n            sellToken0 = (_token0AmountIn * reserveB > _token1AmountIn * reserveA) ? true : false;\\n\\n            // Calculate the amount that is expected to be swapped\\n            swapAmountIn = _calculateAmountToSwapForRebalancing(\\n                _token0AmountIn,\\n                _token1AmountIn,\\n                reserveA,\\n                reserveB,\\n                sellToken0\\n            );\\n\\n            // Calculate the amount expected to be received in the intermediary swap\\n            if (sellToken0) {\\n                swapAmountOut = pancakeRouter.getAmountOut(swapAmountIn, reserveA, reserveB);\\n            } else {\\n                swapAmountOut = pancakeRouter.getAmountOut(swapAmountIn, reserveB, reserveA);\\n            }\\n        } else {\\n            sellToken0 = (_token0AmountIn * reserveA > _token1AmountIn * reserveB) ? true : false;\\n            // Calculate the amount that is expected to be swapped\\n            swapAmountIn = _calculateAmountToSwapForRebalancing(\\n                _token0AmountIn,\\n                _token1AmountIn,\\n                reserveB,\\n                reserveA,\\n                sellToken0\\n            );\\n\\n            // Calculate the amount expected to be received in the intermediary swap\\n            if (sellToken0) {\\n                swapAmountOut = pancakeRouter.getAmountOut(swapAmountIn, reserveB, reserveA);\\n            } else {\\n                swapAmountOut = pancakeRouter.getAmountOut(swapAmountIn, reserveA, reserveB);\\n            }\\n        }\\n\\n        return (swapAmountIn, swapAmountOut, sellToken0);\\n    }\\n\\n    /*\\n     * @notice View the details for single zap\\n     * @dev Use WBNB for _tokenToReceive (if BNB is the asset to be received)\\n     * @param _lpToken: address of the LP token to zap out\\n     * @param _lpTokenAmount: amount of LP token to zap out\\n     * @param _tokenToReceive: token address to receive\\n     * @return swapAmountIn: amount that is expected to get swapped for intermediary swap\\n     * @return swapAmountOut: amount that is expected to get received for intermediary swap\\n     * @return swapTokenOut: address of the token that is sold in the intermediary swap\\n     */\\n    function estimateZapOutSwap(\\n        address _lpToken,\\n        uint256 _lpTokenAmount,\\n        address _tokenToReceive\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 swapAmountIn,\\n            uint256 swapAmountOut,\\n            address swapTokenOut\\n        )\\n    {\\n        address token0 = IPancakePair(_lpToken).token0();\\n        address token1 = IPancakePair(_lpToken).token1();\\n\\n        require(_tokenToReceive == token0 || _tokenToReceive == token1, \\\"Zap: Token not in LP\\\");\\n\\n        // Convert to uint256 (from uint112)\\n        (uint256 reserveA, uint256 reserveB, ) = IPancakePair(_lpToken).getReserves();\\n\\n        if (token1 == _tokenToReceive) {\\n            // sell token0\\n            uint256 tokenAmountIn = (_lpTokenAmount * reserveA) / IPancakePair(_lpToken).totalSupply();\\n\\n            swapAmountIn = tokenAmountIn;\\n            swapAmountOut = pancakeRouter.getAmountOut(swapAmountIn, reserveA, reserveB);\\n\\n            swapTokenOut = token0;\\n        } else {\\n            // sell token1\\n            uint256 tokenAmountIn = (_lpTokenAmount * reserveB) / IPancakePair(_lpToken).totalSupply();\\n\\n            swapAmountIn = tokenAmountIn;\\n            swapAmountOut = pancakeRouter.getAmountOut(swapAmountIn, reserveB, reserveA);\\n\\n            swapTokenOut = token1;\\n        }\\n\\n        return (swapAmountIn, swapAmountOut, swapTokenOut);\\n    }\\n\\n    /*\\n     * @notice Zap a token in (e.g. token/other token)\\n     * @param _tokenToZap: token to zap\\n     * @param _tokenAmountIn: amount of token to swap\\n     * @param _lpToken: LP token address\\n     * @param _tokenAmountOutMin: minimum token to receive in the intermediary swap\\n     */\\n    function _zapIn(\\n        address _tokenToZap,\\n        uint256 _tokenAmountIn,\\n        address _lpToken,\\n        uint256 _tokenAmountOutMin\\n    ) internal returns (uint256 lpTokenReceived) {\\n        require(_tokenAmountIn >= MINIMUM_AMOUNT, \\\"Zap: Amount too low\\\");\\n\\n        address token0 = IPancakePair(_lpToken).token0();\\n        address token1 = IPancakePair(_lpToken).token1();\\n\\n        require(_tokenToZap == token0 || _tokenToZap == token1, \\\"Zap: Wrong tokens\\\");\\n\\n        // Retrieve the path\\n        address[] memory path = new address[](2);\\n        path[0] = _tokenToZap;\\n\\n        // Initiates an estimation to swap\\n        uint256 swapAmountIn;\\n\\n        {\\n            // Convert to uint256 (from uint112)\\n            (uint256 reserveA, uint256 reserveB, ) = IPancakePair(_lpToken).getReserves();\\n\\n            require((reserveA >= MINIMUM_AMOUNT) && (reserveB >= MINIMUM_AMOUNT), \\\"Zap: Reserves too low\\\");\\n\\n            if (token0 == _tokenToZap) {\\n                swapAmountIn = _calculateAmountToSwap(_tokenAmountIn, reserveA, reserveB);\\n                path[1] = token1;\\n                require(reserveA / swapAmountIn >= maxZapReverseRatio, \\\"Zap: Quantity higher than limit\\\");\\n            } else {\\n                swapAmountIn = _calculateAmountToSwap(_tokenAmountIn, reserveB, reserveA);\\n                path[1] = token0;\\n                require(reserveB / swapAmountIn >= maxZapReverseRatio, \\\"Zap: Quantity higher than limit\\\");\\n            }\\n        }\\n\\n        // Approve token to zap if necessary\\n        _approveTokenIfNeeded(_tokenToZap, swapAmountIn);\\n\\n        uint256[] memory swapedAmounts = pancakeRouter.swapExactTokensForTokens(\\n            swapAmountIn,\\n            _tokenAmountOutMin,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        // Approve other token if necessary\\n        if (token0 == _tokenToZap) {\\n            _approveTokenIfNeeded(token1, swapAmountIn);\\n        } else {\\n            _approveTokenIfNeeded(token0, swapAmountIn);\\n        }\\n\\n        // Add liquidity and retrieve the amount of LP received by the sender\\n        (, , lpTokenReceived) = pancakeRouter.addLiquidity(\\n            path[0],\\n            path[1],\\n            _tokenAmountIn - swapedAmounts[0],\\n            swapedAmounts[1],\\n            1,\\n            1,\\n            msg.sender,\\n            block.timestamp\\n        );\\n\\n        return lpTokenReceived;\\n    }\\n\\n    /*\\n     * @notice Zap two tokens in, rebalance them to 50-50, before adding them to LP\\n     * @param _token0ToZap: address of token0 to zap\\n     * @param _token1ToZap: address of token1 to zap\\n     * @param _token0AmountIn: amount of token0 to zap\\n     * @param _token1AmountIn: amount of token1 to zap\\n     * @param _lpToken: LP token address\\n     * @param _tokenAmountInMax: maximum token amount to sell (in token to sell in the intermediary swap)\\n     * @param _tokenAmountOutMin: minimum token to receive in the intermediary swap\\n     * @param _isToken0Sold: whether token0 is expected to be sold (if false, sell token1)\\n     */\\n    function _zapInRebalancing(\\n        address _token0ToZap,\\n        address _token1ToZap,\\n        uint256 _token0AmountIn,\\n        uint256 _token1AmountIn,\\n        address _lpToken,\\n        uint256 _tokenAmountInMax,\\n        uint256 _tokenAmountOutMin,\\n        bool _isToken0Sold\\n    ) internal returns (uint256 lpTokenReceived) {\\n        require(\\n            _token0ToZap == IPancakePair(_lpToken).token0() || _token0ToZap == IPancakePair(_lpToken).token1(),\\n            \\\"Zap: Wrong token0\\\"\\n        );\\n        require(\\n            _token1ToZap == IPancakePair(_lpToken).token0() || _token1ToZap == IPancakePair(_lpToken).token1(),\\n            \\\"Zap: Wrong token1\\\"\\n        );\\n\\n        require(_token0ToZap != _token1ToZap, \\\"Zap: Same tokens\\\");\\n\\n        // Initiates an estimation to swap\\n        uint256 swapAmountIn;\\n\\n        {\\n            // Convert to uint256 (from uint112)\\n            (uint256 reserveA, uint256 reserveB, ) = IPancakePair(_lpToken).getReserves();\\n\\n            require((reserveA >= MINIMUM_AMOUNT) && (reserveB >= MINIMUM_AMOUNT), \\\"Zap: Reserves too low\\\");\\n\\n            if (_token0ToZap == IPancakePair(_lpToken).token0()) {\\n                swapAmountIn = _calculateAmountToSwapForRebalancing(\\n                    _token0AmountIn,\\n                    _token1AmountIn,\\n                    reserveA,\\n                    reserveB,\\n                    _isToken0Sold\\n                );\\n                require(reserveA / swapAmountIn >= maxZapReverseRatio, \\\"Zap: Quantity higher than limit\\\");\\n            } else {\\n                swapAmountIn = _calculateAmountToSwapForRebalancing(\\n                    _token0AmountIn,\\n                    _token1AmountIn,\\n                    reserveB,\\n                    reserveA,\\n                    _isToken0Sold\\n                );\\n\\n                require(reserveB / swapAmountIn >= maxZapReverseRatio, \\\"Zap: Quantity higher than limit\\\");\\n            }\\n        }\\n\\n        require(swapAmountIn <= _tokenAmountInMax, \\\"Zap: Amount to swap too high\\\");\\n\\n        address[] memory path = new address[](2);\\n\\n        // Define path for swapping and check whether to approve token to sell in intermediary swap\\n        if (_isToken0Sold) {\\n            path[0] = _token0ToZap;\\n            path[1] = _token1ToZap;\\n            _approveTokenIfNeeded(_token0ToZap, swapAmountIn);\\n        } else {\\n            path[0] = _token1ToZap;\\n            path[1] = _token0ToZap;\\n            _approveTokenIfNeeded(_token1ToZap, swapAmountIn);\\n        }\\n\\n        // Execute the swap and retrieve quantity received\\n        uint256[] memory swapedAmounts = pancakeRouter.swapExactTokensForTokens(\\n            swapAmountIn,\\n            _tokenAmountOutMin,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        // Check whether to approve other token and add liquidity to LP\\n        if (_isToken0Sold) {\\n            _approveTokenIfNeeded(_token1ToZap, swapAmountIn);\\n\\n            (, , lpTokenReceived) = pancakeRouter.addLiquidity(\\n                path[0],\\n                path[1],\\n                (_token0AmountIn - swapedAmounts[0]),\\n                (_token1AmountIn + swapedAmounts[1]),\\n                1,\\n                1,\\n                msg.sender,\\n                block.timestamp\\n            );\\n        } else {\\n            _approveTokenIfNeeded(_token0ToZap, swapAmountIn);\\n            (, , lpTokenReceived) = pancakeRouter.addLiquidity(\\n                path[0],\\n                path[1],\\n                (_token1AmountIn - swapedAmounts[0]),\\n                (_token0AmountIn + swapedAmounts[1]),\\n                1,\\n                1,\\n                msg.sender,\\n                block.timestamp\\n            );\\n        }\\n\\n        return lpTokenReceived;\\n    }\\n\\n    /*\\n     * @notice Zap a LP token out to a token (e.g. token/other token)\\n     * @param _lpToken: LP token address\\n     * @param _tokenToReceive: token address\\n     * @param _tokenAmountOutMin: minimum token to receive in the intermediary swap\\n     */\\n    function _zapOut(\\n        address _lpToken,\\n        address _tokenToReceive,\\n        uint256 _tokenAmountOutMin,\\n        uint256 _totalTokenAmountOutMin\\n    ) internal returns (uint256) {\\n        address token0 = IPancakePair(_lpToken).token0();\\n        address token1 = IPancakePair(_lpToken).token1();\\n\\n        require(_tokenToReceive == token0 || _tokenToReceive == token1, \\\"Zap: Token not in LP\\\");\\n\\n        // Burn all LP tokens to receive the two tokens to this address\\n        (uint256 amount0, uint256 amount1) = IPancakePair(_lpToken).burn(address(this));\\n\\n        require(amount0 >= MINIMUM_AMOUNT, \\\"PancakeRouter: INSUFFICIENT_A_AMOUNT\\\");\\n        require(amount1 >= MINIMUM_AMOUNT, \\\"PancakeRouter: INSUFFICIENT_B_AMOUNT\\\");\\n\\n        address[] memory path = new address[](2);\\n        path[1] = _tokenToReceive;\\n\\n        uint256 swapAmountIn;\\n\\n        if (token0 == _tokenToReceive) {\\n            path[0] = token1;\\n            swapAmountIn = IERC20(token1).balanceOf(address(this));\\n\\n            // Approve token to sell if necessary\\n            _approveTokenIfNeeded(token1, swapAmountIn);\\n        } else {\\n            path[0] = token0;\\n            swapAmountIn = IERC20(token0).balanceOf(address(this));\\n\\n            // Approve token to sell if necessary\\n            _approveTokenIfNeeded(token0, swapAmountIn);\\n        }\\n\\n        // Swap tokens\\n        pancakeRouter.swapExactTokensForTokens(swapAmountIn, _tokenAmountOutMin, path, address(this), block.timestamp);\\n\\n        // Return full balance for the token to receive by the sender\\n        require(_totalTokenAmountOutMin < IERC20(_tokenToReceive).balanceOf(address(this)), \\\"amount is not enough\\\");\\n        return IERC20(_tokenToReceive).balanceOf(address(this));\\n    }\\n\\n    /*\\n     * @notice Allows to zap a token in (e.g. token/other token)\\n     * @param _token: token address\\n     */\\n    function _approveTokenIfNeeded(address _token, uint256 _swapAmountIn) private {\\n        if (IERC20(_token).allowance(address(this), pancakeRouterAddress) < _swapAmountIn) {\\n            // Reset to 0\\n            IERC20(_token).safeApprove(pancakeRouterAddress, 0);\\n            // Re-approve\\n            IERC20(_token).safeApprove(pancakeRouterAddress, MAX_INT);\\n        }\\n    }\\n\\n    /*\\n     * @notice Calculate the swap amount to get the price at 50/50 split\\n     * @param _token0AmountIn: amount of token 0\\n     * @param _reserve0: amount in reserve for token0\\n     * @param _reserve1: amount in reserve for token1\\n     * @return amountToSwap: swapped amount (in token0)\\n     */\\n    function _calculateAmountToSwap(\\n        uint256 _token0AmountIn,\\n        uint256 _reserve0,\\n        uint256 _reserve1\\n    ) private view returns (uint256 amountToSwap) {\\n        uint256 halfToken0Amount = _token0AmountIn / 2;\\n        uint256 nominator = pancakeRouter.getAmountOut(halfToken0Amount, _reserve0, _reserve1);\\n        uint256 denominator = pancakeRouter.quote(\\n            halfToken0Amount,\\n            _reserve0 + halfToken0Amount,\\n            _reserve1 - nominator\\n        );\\n\\n        // Adjustment for price impact\\n        amountToSwap =\\n            _token0AmountIn -\\n            Babylonian.sqrt((halfToken0Amount * halfToken0Amount * nominator) / denominator);\\n\\n        return amountToSwap;\\n    }\\n\\n    /*\\n     * @notice Calculate the amount to swap to get the tokens at a 50/50 split\\n     * @param _token0AmountIn: amount of token 0\\n     * @param _token1AmountIn: amount of token 1\\n     * @param _reserve0: amount in reserve for token0\\n     * @param _reserve1: amount in reserve for token1\\n     * @param _isToken0Sold: whether token0 is expected to be sold (if false, sell token1)\\n     * @return amountToSwap: swapped amount in token0 (if _isToken0Sold is true) or token1 (if _isToken0Sold is false)\\n     */\\n    function _calculateAmountToSwapForRebalancing(\\n        uint256 _token0AmountIn,\\n        uint256 _token1AmountIn,\\n        uint256 _reserve0,\\n        uint256 _reserve1,\\n        bool _isToken0Sold\\n    ) private view returns (uint256 amountToSwap) {\\n        bool sellToken0 = (_token0AmountIn * _reserve1 > _token1AmountIn * _reserve0) ? true : false;\\n\\n        require(sellToken0 == _isToken0Sold, \\\"Zap: Wrong trade direction\\\");\\n\\n        if (sellToken0) {\\n            uint256 token0AmountToSell = (_token0AmountIn - (_token1AmountIn * _reserve0) / _reserve1) / 2;\\n            uint256 nominator = pancakeRouter.getAmountOut(token0AmountToSell, _reserve0, _reserve1);\\n            uint256 denominator = pancakeRouter.quote(\\n                token0AmountToSell,\\n                _reserve0 + token0AmountToSell,\\n                _reserve1 - nominator\\n            );\\n\\n            // Calculate the amount to sell (in token0)\\n            token0AmountToSell =\\n                (_token0AmountIn - (_token1AmountIn * (_reserve0 + token0AmountToSell)) / (_reserve1 - nominator)) /\\n                2;\\n\\n            // Adjustment for price impact\\n            amountToSwap =\\n                2 *\\n                token0AmountToSell -\\n                Babylonian.sqrt((token0AmountToSell * token0AmountToSell * nominator) / denominator);\\n        } else {\\n            uint256 token1AmountToSell = (_token1AmountIn - (_token0AmountIn * _reserve1) / _reserve0) / 2;\\n            uint256 nominator = pancakeRouter.getAmountOut(token1AmountToSell, _reserve1, _reserve0);\\n\\n            uint256 denominator = pancakeRouter.quote(\\n                token1AmountToSell,\\n                _reserve1 + token1AmountToSell,\\n                _reserve0 - nominator\\n            );\\n\\n            // Calculate the amount to sell (in token1)\\n            token1AmountToSell =\\n                (_token1AmountIn - ((_token0AmountIn * (_reserve1 + token1AmountToSell)) / (_reserve0 - nominator))) /\\n                2;\\n\\n            // Adjustment for price impact\\n            amountToSwap =\\n                2 *\\n                token1AmountToSell -\\n                Babylonian.sqrt((token1AmountToSell * token1AmountToSell * nominator) / denominator);\\n        }\\n\\n        return amountToSwap;\\n    }\\n}\\n\\nlibrary Babylonian {\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n\\n        uint256 r1 = x / r;\\n\\n        return (r < r1 ? r : r1);\\n    }\\n}\",\"keccak256\":\"0xb32024d822a723ba0798a67b5b2edd7e434431ecb913cfc9e5e125e7004f9179\",\"license\":\"MIT\"},\"contracts/connectors/PancakeV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary PancakeSwapLibrary {\\n\\n    function getAmountsOut(\\n        IPancakeRouter02 pancakeRouter,\\n        address inputToken,\\n        address outputToken,\\n        uint256 amountInput\\n    ) internal view returns (uint256) {\\n\\n        address[] memory path = new address[](2);\\n        path[0] = inputToken;\\n        path[1] = outputToken;\\n\\n        uint[] memory amounts = pancakeRouter.getAmountsOut(amountInput, path);\\n\\n        return amounts[1];\\n    }\\n\\n    function getAmountsOut(\\n        IPancakeRouter02 pancakeRouter,\\n        address inputToken,\\n        address middleToken,\\n        address outputToken,\\n        uint256 amountInput\\n    ) internal view returns (uint256) {\\n\\n        address[] memory path = new address[](3);\\n        path[0] = inputToken;\\n        path[1] = middleToken;\\n        path[2] = outputToken;\\n\\n        uint[] memory amounts = pancakeRouter.getAmountsOut(amountInput, path);\\n\\n        return amounts[2];\\n    }\\n\\n    function swapExactTokensForTokens(\\n        IPancakeRouter02 pancakeRouter,\\n        address inputToken,\\n        address outputToken,\\n        uint256 amountInput,\\n        uint256 amountOutMin,\\n        address recipient\\n    ) internal returns (uint256) {\\n\\n        IERC20(inputToken).approve(address(pancakeRouter), amountInput);\\n\\n        address[] memory path = new address[](2);\\n        path[0] = inputToken;\\n        path[1] = outputToken;\\n\\n        uint[] memory amounts = pancakeRouter.swapExactTokensForTokens(\\n            amountInput,\\n            amountOutMin,\\n            path,\\n            recipient,\\n            block.timestamp\\n        );\\n\\n        return amounts[1];\\n    }\\n\\n    function swapExactTokensForTokens(\\n        IPancakeRouter02 pancakeRouter,\\n        address inputToken,\\n        address middleToken,\\n        address outputToken,\\n        uint256 amountInput,\\n        uint256 amountOutMin,\\n        address recipient\\n    ) internal returns (uint256) {\\n\\n        IERC20(inputToken).approve(address(pancakeRouter), amountInput);\\n\\n        address[] memory path = new address[](3);\\n        path[0] = inputToken;\\n        path[1] = middleToken;\\n        path[2] = outputToken;\\n\\n        uint[] memory amounts = pancakeRouter.swapExactTokensForTokens(\\n            amountInput,\\n            amountOutMin,\\n            path,\\n            recipient,\\n            block.timestamp\\n        );\\n\\n        return amounts[2];\\n    }\\n\\n    function addLiquidity(\\n        IPancakeRouter02 pancakeRouter,\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to\\n    ) internal returns (uint amountA, uint amountB, uint liquidity) {\\n\\n        IERC20(tokenA).approve(address(pancakeRouter), amountADesired);\\n        IERC20(tokenB).approve(address(pancakeRouter), amountBDesired);\\n\\n        return pancakeRouter.addLiquidity(\\n            tokenA,\\n            tokenB,\\n            amountADesired,\\n            amountBDesired,\\n            amountAMin,\\n            amountBMin,\\n            to,\\n            block.timestamp\\n        );\\n    }\\n\\n    function removeLiquidity(\\n        IPancakeRouter02 pancakeRouter,\\n        address tokenA,\\n        address tokenB,\\n        address lpToken,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to\\n    ) internal returns (uint amountA, uint amountB) {\\n\\n        IERC20(lpToken).approve(address(pancakeRouter), liquidity);\\n\\n        return pancakeRouter.removeLiquidity(\\n            tokenA,\\n            tokenB,\\n            liquidity,\\n            amountAMin,\\n            amountBMin,\\n            to,\\n            block.timestamp\\n        );\\n    }\\n\\n}\\n\\n\\ninterface IPancakePair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\\n\\n\\ninterface IPancakeRouter01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\\n\\n\",\"keccak256\":\"0x4122b8db2402c37c030df8b59936a31bc5adc9bf6cf189df06689b98785b70f1\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\",\"keccak256\":\"0xac0b7ab124e9ddfcdb122140614a1f98f47a49833a705ea1789c2b33ed21da04\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101185760003560e01c8063715018a6116100a0578063b421e91e11610064578063b421e91e1461030f578063c21ebd071461032f578063e3ceb16b1461034f578063ead8141814610362578063f2fde38b1461038257600080fd5b8063715018a61461025857806382c98b2d1461026d57806387e3f21c1461029c5780638da5cb5b146102bc5780638dd95002146102e257600080fd5b80632f883da4116100e75780632f883da4146101b65780633b0a48bb146101e55780633f138d4b1461020557806350c7959d146102255780635cb88a3f1461024557600080fd5b8063098d32281461013e5780630f4e4e631461016a578063257d9bb8146101805780632b4652eb1461019657600080fd5b36610139576006546001600160a01b03163314610137576101376132d1565b005b600080fd5b34801561014a57600080fd5b5061015460001981565b60405161016191906132ef565b60405180910390f35b34801561017657600080fd5b5061015460045481565b34801561018c57600080fd5b506101546103e881565b3480156101a257600080fd5b506101376101b136600461331b565b6103a2565b3480156101c257600080fd5b506101d66101d1366004613361565b610415565b604051610161939291906133ba565b3480156101f157600080fd5b506101d6610200366004613361565b6107c8565b34801561021157600080fd5b506101376102203660046133e2565b610a98565b34801561023157600080fd5b5061013761024036600461341f565b610b1b565b6101376102533660046133e2565b610bde565b34801561026457600080fd5b50610137610ce4565b34801561027957600080fd5b5061028d610288366004613497565b610d1a565b6040516101619392919061350a565b3480156102a857600080fd5b506101376102b7366004613532565b611241565b3480156102c857600080fd5b506000546001600160a01b03166040516101619190613596565b3480156102ee57600080fd5b50600254610302906001600160a01b031681565b60405161016191906135e6565b34801561031b57600080fd5b5061013761032a366004613607565b6112ef565b34801561033b57600080fd5b50600354610302906001600160a01b031681565b61013761035d3660046136ba565b6113be565b34801561036e57600080fd5b5061013761037d366004613744565b6114e6565b34801561038e57600080fd5b5061013761039d36600461378b565b611674565b6000546001600160a01b031633146103d55760405162461bcd60e51b81526004016103cc906137e1565b60405180910390fd5b60048190556040517fc7e29c44236bfea8bef0d337e382f5f27ec5bc4d425d82437f115f9b59d2ba799061040a9083906132ef565b60405180910390a150565b600080600080866001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610459573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047d91906137fc565b90506000876001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e391906137fc565b9050816001600160a01b0316866001600160a01b031614806105165750806001600160a01b0316866001600160a01b0316145b6105325760405162461bcd60e51b81526004016103cc90613848565b600080896001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610573573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105979190613889565b506001600160701b031691506001600160701b03169150876001600160a01b0316836001600160a01b0316036106c35760008a6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610607573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062b91906138da565b610635848c613911565b61063f9190613946565b600354604051630153543560e21b81529199508992506001600160a01b03169063054d50d4906106779084908790879060040161395a565b602060405180830381865afa158015610694573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b891906138da565b9650849550506107bb565b60008a6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610703573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072791906138da565b610731838c613911565b61073b9190613946565b600354604051630153543560e21b81529199508992506001600160a01b03169063054d50d4906107739084908690889060040161395a565b602060405180830381865afa158015610790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b491906138da565b9650839550505b5050505093509350939050565b600080600080846001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561080c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083091906137fc565b90506000856001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610872573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089691906137fc565b9050816001600160a01b0316886001600160a01b031614806108c95750806001600160a01b0316886001600160a01b0316145b6108e55760405162461bcd60e51b81526004016103cc906139aa565b600080876001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610926573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094a9190613889565b506001600160701b031691506001600160701b03169150896001600160a01b0316846001600160a01b031603610a05578294506109888983836116d0565b600354604051630153543560e21b81529198506001600160a01b03169063054d50d4906109bd908a908690869060040161395a565b602060405180830381865afa1580156109da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fe91906138da565b95506107bb565b839450610a138982846116d0565b600354604051630153543560e21b81529198506001600160a01b03169063054d50d490610a48908a908590879060040161395a565b602060405180830381865afa158015610a65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8991906138da565b95505050505093509350939050565b6000546001600160a01b03163314610ac25760405162461bcd60e51b81526004016103cc906137e1565b610ad66001600160a01b0383163383611825565b816001600160a01b03167f74545154aac348a3eac92596bd1971957ca94795f4e954ec5f613b55fab7812982604051610b0f91906132ef565b60405180910390a25050565b600260015403610b3d5760405162461bcd60e51b81526004016103cc906139ee565b6002600155610b576001600160a01b038616338786611880565b6000610b65868685856118a7565b9050610b7b6001600160a01b0386163383611825565b336001600160a01b0316856001600160a01b0316876001600160a01b03167f20ef8a4c975ec6c340089d8171a0f9c6a6324b11e3ecc4353155186f6c638c288785604051610bca9291906139fe565b60405180910390a450506001805550505050565b600260015403610c005760405162461bcd60e51b81526004016103cc906139ee565b600260018190555460408051630d0e30db60e41b815290516001600160a01b039092169163d0e30db0913491600480830192600092919082900301818588803b158015610c4c57600080fd5b505af1158015610c60573d6000803e3d6000fd5b505060065460009350610c8192506001600160a01b03169050348585611d99565b9050336001600160a01b0316836001600160a01b031660006001600160a01b03167fa71185a0ff368de4e9e445d8601c4fbd50d9b674e4e43f5f8feafb8d64a2e13e3485604051610cd39291906139fe565b60405180910390a450506001805550565b6000546001600160a01b03163314610d0e5760405162461bcd60e51b81526004016103cc906137e1565b610d186000612286565b565b6000806000836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8191906137fc565b6001600160a01b0316886001600160a01b03161480610e125750836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfd91906137fc565b6001600160a01b0316886001600160a01b0316145b610e2e5760405162461bcd60e51b81526004016103cc90613a41565b836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9091906137fc565b6001600160a01b0316876001600160a01b03161480610f215750836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ee8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0c91906137fc565b6001600160a01b0316876001600160a01b0316145b610f3d5760405162461bcd60e51b81526004016103cc90613a79565b866001600160a01b0316886001600160a01b031603610f6e5760405162461bcd60e51b81526004016103cc90613ab0565b600080856001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610faf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd39190613889565b506001600160701b031691506001600160701b03169150856001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611028573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104c91906137fc565b6001600160a01b03168a6001600160a01b03160361114e5761106e8288613911565b611078828a613911565b11611084576000611087565b60015b925061109688888484876122d6565b9450821561111a57600354604051630153543560e21b81526001600160a01b039091169063054d50d4906110d29088908690869060040161395a565b602060405180830381865afa1580156110ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111391906138da565b9350611234565b600354604051630153543560e21b81526001600160a01b039091169063054d50d4906110d29088908590879060040161395a565b6111588188613911565b611162838a613911565b1161116e576000611171565b60015b925061118088888385876122d6565b945082156111bc57600354604051630153543560e21b81526001600160a01b039091169063054d50d4906110d29088908590879060040161395a565b600354604051630153543560e21b81526001600160a01b039091169063054d50d4906111f09088908690869060040161395a565b602060405180830381865afa15801561120d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123191906138da565b93505b5050955095509592505050565b6002600154036112635760405162461bcd60e51b81526004016103cc906139ee565b600260015561127d6001600160a01b038516333086611880565b600061128b85858585611d99565b9050336001600160a01b0316836001600160a01b0316866001600160a01b03167fa71185a0ff368de4e9e445d8601c4fbd50d9b674e4e43f5f8feafb8d64a2e13e87856040516112dc9291906139fe565b60405180910390a4505060018055505050565b6002600154036113115760405162461bcd60e51b81526004016103cc906139ee565b600260015561132b6001600160a01b038916333089611880565b6113406001600160a01b038816333088611880565b60006113528989898989898989612674565b9050336001600160a01b0316886001600160a01b03168a6001600160a01b03167f4ff29158e89c3af93365bf0fa1d14c5768109fb139f24b97c8a7d510b2d5e3f6888b8b876040516113a79493929190613ac0565b60405180910390a450506001805550505050505050565b6002600154036113e05760405162461bcd60e51b81526004016103cc906139ee565b600260018190555460408051630d0e30db60e41b815290516001600160a01b039092169163d0e30db0913491600480830192600092919082900301818588803b15801561142c57600080fd5b505af1158015611440573d6000803e3d6000fd5b5061145c935050506001600160a01b0388169050333088611880565b60065460009061147b906001600160a01b031688348989898989612674565b9050336001600160a01b0316876001600160a01b031660006001600160a01b03167f4ff29158e89c3af93365bf0fa1d14c5768109fb139f24b97c8a7d510b2d5e3f688348b876040516114d19493929190613ac0565b60405180910390a45050600180555050505050565b6002600154036115085760405162461bcd60e51b81526004016103cc906139ee565b60026001556115226001600160a01b038516338686611880565b60065460009061153e9086906001600160a01b031685856118a7565b600254604051632e1a7d4d60e01b81529192506001600160a01b031690632e1a7d4d9061156f9084906004016132ef565b600060405180830381600087803b15801561158957600080fd5b505af115801561159d573d6000803e3d6000fd5b50506040805160008082526020820192839052935033925084916115c19190613b51565b60006040518083038185875af1925050503d80600081146115fe576040519150601f19603f3d011682016040523d82523d6000602084013e611603565b606091505b50509050806116245760405162461bcd60e51b81526004016103cc90613b86565b336001600160a01b031660006001600160a01b0316876001600160a01b03167f20ef8a4c975ec6c340089d8171a0f9c6a6324b11e3ecc4353155186f6c638c288886604051610bca9291906139fe565b6000546001600160a01b0316331461169e5760405162461bcd60e51b81526004016103cc906137e1565b6001600160a01b0381166116c45760405162461bcd60e51b81526004016103cc90613bdc565b6116cd81612286565b50565b6000806116de600286613946565b600354604051630153543560e21b81529192506000916001600160a01b039091169063054d50d4906117189085908990899060040161395a565b602060405180830381865afa158015611735573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175991906138da565b6003549091506000906001600160a01b031663ad615dec8461177b818a613bec565b611785868a613bff565b6040518463ffffffff1660e01b81526004016117a39392919061395a565b602060405180830381865afa1580156117c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e491906138da565b905061180e81836117f58680613911565b6117ff9190613911565b6118099190613946565b612e58565b6118189088613bff565b93505050505b9392505050565b61187b8363a9059cbb60e01b8484604051602401611844929190613c12565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612fd6565b505050565b6118a1846323b872dd60e01b85858560405160240161184493929190613c20565b50505050565b600080856001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190c91906137fc565b90506000866001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561194e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197291906137fc565b9050816001600160a01b0316866001600160a01b031614806119a55750806001600160a01b0316866001600160a01b0316145b6119c15760405162461bcd60e51b81526004016103cc90613848565b600080886001600160a01b03166389afcb44306040518263ffffffff1660e01b81526004016119f09190613596565b60408051808303816000875af1158015611a0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a329190613c3b565b915091506103e8821015611a585760405162461bcd60e51b81526004016103cc90613caf565b6103e8811015611a7a5760405162461bcd60e51b81526004016103cc90613d00565b6040805160028082526060820183526000926020830190803683370190505090508881600181518110611aaf57611aaf613d10565b6001600160a01b0392831660209182029290920101526000908a811690871603611b74578482600081518110611ae757611ae7613d10565b6001600160a01b0392831660209182029290920101526040516370a0823160e01b8152908616906370a0823190611b22903090600401613596565b602060405180830381865afa158015611b3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6391906138da565b9050611b6f8582613065565b611c10565b8582600081518110611b8857611b88613d10565b6001600160a01b0392831660209182029290920101526040516370a0823160e01b8152908716906370a0823190611bc3903090600401613596565b602060405180830381865afa158015611be0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0491906138da565b9050611c108682613065565b6003546040516338ed173960e01b81526001600160a01b03909116906338ed173990611c489084908d90879030904290600401613d83565b6000604051808303816000875af1158015611c67573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c8f9190810190613ec7565b506040516370a0823160e01b81526001600160a01b038b16906370a0823190611cbc903090600401613596565b602060405180830381865afa158015611cd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cfd91906138da565b8810611d1b5760405162461bcd60e51b81526004016103cc90613f2d565b6040516370a0823160e01b81526001600160a01b038b16906370a0823190611d47903090600401613596565b602060405180830381865afa158015611d64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8891906138da565b96505050505050505b949350505050565b60006103e8841015611dbd5760405162461bcd60e51b81526004016103cc90613f67565b6000836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611dfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e2191906137fc565b90506000846001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8791906137fc565b9050816001600160a01b0316876001600160a01b03161480611eba5750806001600160a01b0316876001600160a01b0316145b611ed65760405162461bcd60e51b81526004016103cc906139aa565b6040805160028082526060820183526000926020830190803683370190505090508781600081518110611f0b57611f0b613d10565b60200260200101906001600160a01b031690816001600160a01b0316815250506000806000886001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015611f6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f929190613889565b506001600160701b031691506001600160701b031691506103e88210158015611fbd57506103e88110155b611fd95760405162461bcd60e51b81526004016103cc90613fa3565b8a6001600160a01b0316866001600160a01b03160361205b57611ffd8a83836116d0565b9250848460018151811061201357612013613d10565b6001600160a01b03909216602092830291909101909101526004546120388484613946565b10156120565760405162461bcd60e51b81526004016103cc90613fe7565b6120bf565b6120668a82846116d0565b9250858460018151811061207c5761207c613d10565b6001600160a01b03909216602092830291909101909101526004546120a18483613946565b10156120bf5760405162461bcd60e51b81526004016103cc90613fe7565b50506120cb8982613065565b6003546040516338ed173960e01b81526000916001600160a01b0316906338ed1739906121049085908b90889030904290600401613d83565b6000604051808303816000875af1158015612123573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261214b9190810190613ec7565b9050896001600160a01b0316856001600160a01b031603612175576121708483613065565b61217f565b61217f8583613065565b60035483516001600160a01b039091169063e8e337009085906000906121a7576121a7613d10565b6020026020010151856001815181106121c2576121c2613d10565b6020026020010151846000815181106121dd576121dd613d10565b60200260200101518d6121f09190613bff565b8560018151811061220357612203613d10565b602002602001015160018033426040518963ffffffff1660e01b815260040161223398979695949392919061400c565b6060604051808303816000875af1158015612252573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122769190614083565b9c9b505050505050505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806122e38587613911565b6122ed8589613911565b116122f95760006122fc565b60015b9050821515811515146123215760405162461bcd60e51b81526004016103cc906140fd565b80156124ca576000600285612336888a613911565b6123409190613946565b61234a908a613bff565b6123549190613946565b600354604051630153543560e21b81529192506000916001600160a01b039091169063054d50d49061238e9085908b908b9060040161395a565b602060405180830381865afa1580156123ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123cf91906138da565b6003549091506000906001600160a01b031663ad615dec846123f1818c613bec565b6123fb868c613bff565b6040518463ffffffff1660e01b81526004016124199392919061395a565b602060405180830381865afa158015612436573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245a91906138da565b905060026124688389613bff565b612472858b613bec565b61247c908c613911565b6124869190613946565b612490908c613bff565b61249a9190613946565b92506124ab81836117f58680613911565b6124b6846002613911565b6124c09190613bff565b9450505050612669565b60006002866124d9878b613911565b6124e39190613946565b6124ed9089613bff565b6124f79190613946565b600354604051630153543560e21b81529192506000916001600160a01b039091169063054d50d4906125319085908a908c9060040161395a565b602060405180830381865afa15801561254e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061257291906138da565b6003549091506000906001600160a01b031663ad615dec84612594818b613bec565b61259e868d613bff565b6040518463ffffffff1660e01b81526004016125bc9392919061395a565b602060405180830381865afa1580156125d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125fd91906138da565b9050600261260b838a613bff565b612615858a613bec565b61261f908d613911565b6126299190613946565b612633908b613bff565b61263d9190613946565b925061264e81836117f58680613911565b612659846002613911565b6126639190613bff565b94505050505b505b95945050505050565b6000846001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126d891906137fc565b6001600160a01b0316896001600160a01b031614806127695750846001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015612730573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061275491906137fc565b6001600160a01b0316896001600160a01b0316145b6127855760405162461bcd60e51b81526004016103cc90613a41565b846001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156127c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127e791906137fc565b6001600160a01b0316886001600160a01b031614806128785750846001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561283f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061286391906137fc565b6001600160a01b0316886001600160a01b0316145b6128945760405162461bcd60e51b81526004016103cc90613a79565b876001600160a01b0316896001600160a01b0316036128c55760405162461bcd60e51b81526004016103cc90613ab0565b6000806000876001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015612908573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061292c9190613889565b506001600160701b031691506001600160701b031691506103e8821015801561295757506103e88110155b6129735760405162461bcd60e51b81526004016103cc90613fa3565b876001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129d591906137fc565b6001600160a01b03168c6001600160a01b031603612a2d576129fa8a8a8484896122d6565b600454909350612a0a8484613946565b1015612a285760405162461bcd60e51b81526004016103cc90613fe7565b612a68565b612a3a8a8a8385896122d6565b600454909350612a4a8483613946565b1015612a685760405162461bcd60e51b81526004016103cc90613fe7565b505084811115612a8a5760405162461bcd60e51b81526004016103cc90614141565b6040805160028082526060820183526000926020830190803683370190505090508315612b28578a81600081518110612ac557612ac5613d10565b60200260200101906001600160a01b031690816001600160a01b0316815250508981600181518110612af957612af9613d10565b60200260200101906001600160a01b031690816001600160a01b031681525050612b238b83613065565b612b9a565b8981600081518110612b3c57612b3c613d10565b60200260200101906001600160a01b031690816001600160a01b0316815250508a81600181518110612b7057612b70613d10565b60200260200101906001600160a01b031690816001600160a01b031681525050612b9a8a83613065565b6003546040516338ed173960e01b81526000916001600160a01b0316906338ed173990612bd39086908a90879030904290600401613d83565b6000604051808303816000875af1158015612bf2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612c1a9190810190613ec7565b90508415612d3857612c2c8b84613065565b60035482516001600160a01b039091169063e8e33700908490600090612c5457612c54613d10565b602002602001015184600181518110612c6f57612c6f613d10565b602002602001015184600081518110612c8a57612c8a613d10565b60200260200101518e612c9d9190613bff565b85600181518110612cb057612cb0613d10565b60200260200101518e612cc39190613bec565b60018033426040518963ffffffff1660e01b8152600401612ceb98979695949392919061400c565b6060604051808303816000875af1158015612d0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2e9190614083565b9550612e49915050565b612d428c84613065565b60035482516001600160a01b039091169063e8e33700908490600090612d6a57612d6a613d10565b602002602001015184600181518110612d8557612d85613d10565b602002602001015184600081518110612da057612da0613d10565b60200260200101518d612db39190613bff565b85600181518110612dc657612dc6613d10565b60200260200101518f612dd99190613bec565b60018033426040518963ffffffff1660e01b8152600401612e0198979695949392919061400c565b6060604051808303816000875af1158015612e20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e449190614083565b955050505b50505098975050505050505050565b600081600003612e6a57506000919050565b816001600160801b8210612e835760809190911c9060401b5b680100000000000000008210612e9e5760409190911c9060201b5b6401000000008210612eb55760209190911c9060101b5b620100008210612eca5760109190911c9060081b5b6101008210612ede5760089190911c9060041b5b60108210612ef15760049190911c9060021b5b60088210612efd5760011b5b6001612f098286613946565b612f139083613bec565b901c90506001612f238286613946565b612f2d9083613bec565b901c90506001612f3d8286613946565b612f479083613bec565b901c90506001612f578286613946565b612f619083613bec565b901c90506001612f718286613946565b612f7b9083613bec565b901c90506001612f8b8286613946565b612f959083613bec565b901c90506001612fa58286613946565b612faf9083613bec565b901c90506000612fbf8286613946565b9050808210612fce578061266b565b509392505050565b600061302b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661311c9092919063ffffffff16565b80519091501561187b5780806020019051810190613049919061415c565b61187b5760405162461bcd60e51b81526004016103cc906141c4565b600554604051636eb1769f60e11b815282916001600160a01b038086169263dd62ed3e9261309a9230929116906004016141d4565b602060405180830381865afa1580156130b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130db91906138da565b1015613118576005546130fc906001600160a01b038481169116600061312b565b600554613118906001600160a01b03848116911660001961312b565b5050565b6060611d9184846000856131df565b8015806131a45750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e9061316190309086906004016141d4565b602060405180830381865afa15801561317e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131a291906138da565b155b6131c05760405162461bcd60e51b81526004016103cc90614242565b61187b8363095ea7b360e01b8484604051602401611844929190613c12565b6060824710156132015760405162461bcd60e51b81526004016103cc90614295565b843b61321f5760405162461bcd60e51b81526004016103cc906142d9565b600080866001600160a01b0316858760405161323b9190613b51565b60006040518083038185875af1925050503d8060008114613278576040519150601f19603f3d011682016040523d82523d6000602084013e61327d565b606091505b509150915061328d828286613298565b979650505050505050565b606083156132a757508161181e565b8251156132b75782518084602001fd5b8160405162461bcd60e51b81526004016103cc919061431b565b634e487b7160e01b600052600160045260246000fd5b805b82525050565b602081016132fd82846132e7565b92915050565b805b81146116cd57600080fd5b80356132fd81613303565b60006020828403121561333057613330600080fd5b6000611d918484613310565b60006001600160a01b0382166132fd565b6133058161333c565b80356132fd8161334d565b60008060006060848603121561337957613379600080fd5b60006133858686613356565b935050602061339686828701613310565b92505060406133a786828701613356565b9150509250925092565b6132e98161333c565b606081016133c882866132e7565b6133d560208301856132e7565b611d9160408301846133b1565b600080604083850312156133f8576133f8600080fd5b60006134048585613356565b925050602061341585828601613310565b9150509250929050565b600080600080600060a0868803121561343a5761343a600080fd5b60006134468888613356565b955050602061345788828901613356565b945050604061346888828901613310565b935050606061347988828901613310565b925050608061348a88828901613310565b9150509295509295909350565b600080600080600060a086880312156134b2576134b2600080fd5b60006134be8888613356565b95505060206134cf88828901613356565b94505060406134e088828901613310565b93505060606134f188828901613310565b925050608061348a88828901613356565b8015156132e9565b6060810161351882866132e7565b61352560208301856132e7565b611d916040830184613502565b6000806000806080858703121561354b5761354b600080fd5b60006135578787613356565b945050602061356887828801613310565b935050604061357987828801613356565b925050606061358a87828801613310565b91505092959194509250565b602081016132fd82846133b1565b60006132fd6001600160a01b0383166135bb565b90565b6001600160a01b031690565b60006132fd826135a4565b60006132fd826135c7565b6132e9816135d2565b602081016132fd82846135dd565b801515613305565b80356132fd816135f4565b600080600080600080600080610100898b03121561362757613627600080fd5b60006136338b8b613356565b98505060206136448b828c01613356565b97505060406136558b828c01613310565b96505060606136668b828c01613310565b95505060806136778b828c01613356565b94505060a06136888b828c01613310565b93505060c06136998b828c01613310565b92505060e06136aa8b828c016135fc565b9150509295985092959890939650565b60008060008060008060c087890312156136d6576136d6600080fd5b60006136e28989613356565b96505060206136f389828a01613310565b955050604061370489828a01613356565b945050606061371589828a01613310565b935050608061372689828a01613310565b92505060a061373789828a016135fc565b9150509295509295509295565b6000806000806080858703121561375d5761375d600080fd5b60006137698787613356565b945050602061377a87828801613310565b935050604061357987828801613310565b6000602082840312156137a0576137a0600080fd5b6000611d918484613356565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815260005b5060200190565b602080825281016132fd816137ac565b80516132fd8161334d565b60006020828403121561381157613811600080fd5b6000611d9184846137f1565b601481526000602082017305a61703a20546f6b656e206e6f7420696e204c560641b815291506137da565b602080825281016132fd8161381d565b6001600160701b038116613305565b80516132fd81613858565b63ffffffff8116613305565b80516132fd81613872565b6000806000606084860312156138a1576138a1600080fd5b60006138ad8686613867565b93505060206138be86828701613867565b92505060406133a78682870161387e565b80516132fd81613303565b6000602082840312156138ef576138ef600080fd5b6000611d9184846138cf565b634e487b7160e01b600052601160045260246000fd5b818102808215838204851417613929576139296138fb565b5092915050565b634e487b7160e01b600052601260045260246000fd5b60008261395557613955613930565b500490565b6060810161396882866132e7565b61397560208301856132e7565b611d9160408301846132e7565b60118152600060208201705a61703a2057726f6e6720746f6b656e7360781b815291506137da565b602080825281016132fd81613982565b601f81526000602082017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00815291506137da565b602080825281016132fd816139ba565b60408101613a0c82856132e7565b61181e60208301846132e7565b601181526000602082017005a61703a2057726f6e6720746f6b656e3607c1b815291506137da565b602080825281016132fd81613a19565b60118152600060208201705a61703a2057726f6e6720746f6b656e3160781b815291506137da565b602080825281016132fd81613a51565b601081526000602082016f5a61703a2053616d6520746f6b656e7360801b815291506137da565b602080825281016132fd81613a89565b60808101613ace82876133b1565b613adb60208301866132e7565b613ae860408301856132e7565b61266b60608301846132e7565b634e487b7160e01b600052604160045260246000fd5b60005b83811015613b26578181015183820152602001613b0e565b50506000910152565b6000613b39825190565b613b47818560208601613b0b565b9290920192915050565b600061181e8284613b2f565b60128152600060208201711093908e881d1c985b9cd9995c8819985a5b60721b815291506137da565b602080825281016132fd81613b5d565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015291505b5060400190565b602080825281016132fd81613b96565b808201808211156132fd576132fd6138fb565b818103818111156132fd576132fd6138fb565b60408101613a0c82856133b1565b60608101613c2e82866133b1565b61397560208301856133b1565b60008060408385031215613c5157613c51600080fd5b6000613c5d85856138cf565b9250506020613415858286016138cf565b602481526000602082017f50616e63616b65526f757465723a20494e53554646494349454e545f415f414d81526313d5539560e21b60208201529150613bd5565b602080825281016132fd81613c6e565b602481526000602082017f50616e63616b65526f757465723a20494e53554646494349454e545f425f414d81526313d5539560e21b60208201529150613bd5565b602080825281016132fd81613cbf565b634e487b7160e01b600052603260045260246000fd5b6000613d3283836133b1565b505060200190565b6000613d44825190565b80845260209384019383018060005b83811015613d78578151613d678882613d26565b975060208301925050600101613d53565b509495945050505050565b60a08101613d9182886132e7565b613d9e60208301876132e7565b8181036040830152613db08186613d3a565b9050613dbf60608301856133b1565b613dcc60808301846132e7565b9695505050505050565b601f19601f830116810181811067ffffffffffffffff82111715613dfc57613dfc613af5565b6040525050565b6000613e0e60405190565b9050613e1a8282613dd6565b919050565b600067ffffffffffffffff821115613e3957613e39613af5565b5060209081020190565b6000613e56613e5184613e1f565b613e03565b83815290506020808201908402830185811115613e7557613e75600080fd5b835b81811015613e995780613e8a88826138cf565b84525060209283019201613e77565b5050509392505050565b600082601f830112613eb757613eb7600080fd5b8151611d91848260208601613e43565b600060208284031215613edc57613edc600080fd5b815167ffffffffffffffff811115613ef657613ef6600080fd5b611d9184828501613ea3565b60148152600060208201730c2dadeeadce840d2e640dcdee840cadcdeeaced60631b815291506137da565b602080825281016132fd81613f02565b60138152600060208201725a61703a20416d6f756e7420746f6f206c6f7760681b815291506137da565b602080825281016132fd81613f3d565b60158152600060208201745a61703a20526573657276657320746f6f206c6f7760581b815291506137da565b602080825281016132fd81613f77565b601f81526000602082017f5a61703a205175616e7469747920686967686572207468616e206c696d697400815291506137da565b602080825281016132fd81613fb3565b60006132fd6135b88381565b6132e981613ff7565b610100810161401b828b6133b1565b614028602083018a6133b1565b61403560408301896132e7565b61404260608301886132e7565b61404f6080830187614003565b61405c60a0830186614003565b61406960c08301856133b1565b61407660e08301846132e7565b9998505050505050505050565b60008060006060848603121561409b5761409b600080fd5b60006140a786866138cf565b93505060206140b8868287016138cf565b92505060406133a7868287016138cf565b601a81526000602082017f5a61703a2057726f6e6720747261646520646972656374696f6e000000000000815291506137da565b602080825281016132fd816140c9565b601c81526000602082017f5a61703a20416d6f756e7420746f207377617020746f6f206869676800000000815291506137da565b602080825281016132fd8161410d565b80516132fd816135f4565b60006020828403121561417157614171600080fd5b6000611d918484614151565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b60208201529150613bd5565b602080825281016132fd8161417d565b604081016141e282856133b1565b61181e60208301846133b1565b603681526000602082017f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f81527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60208201529150613bd5565b602080825281016132fd816141ef565b602681526000602082017f416464726573733a20696e73756666696369656e742062616c616e636520666f8152651c8818d85b1b60d21b60208201529150613bd5565b602080825281016132fd81614252565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000815291506137da565b602080825281016132fd816142a5565b60006142f3825190565b80845260208401935061430a818560208601613b0b565b601f01601f19169290920192915050565b6020808252810161181e81846142e956fea2646970667358221220885043b39cb60f44fd5a67ba4612c845812c21596c617c1732c88cea6dd9cb6d64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "recoverWrongTokens(address,uint256)": {
        "details": "This function is only callable by owner.",
        "params": {
          "_tokenAddress": ": the address of the token to withdraw (18 decimals)",
          "_tokenAmount": ": the number of token amount to withdraw"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateMaxZapInverseRatio(uint256)": {
        "details": "This function is only callable by owner.",
        "params": {
          "_maxZapInverseRatio": ": new inverse ratio"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "recoverWrongTokens(address,uint256)": {
        "notice": "It allows the owner to recover wrong tokens sent to the contract"
      },
      "updateMaxZapInverseRatio(uint256)": {
        "notice": "It allows the owner to change the risk parameter for quantities"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2592,
        "contract": "contracts/ThenaZap.sol:ThenaZap",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2700,
        "contract": "contracts/ThenaZap.sol:ThenaZap",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3822,
        "contract": "contracts/ThenaZap.sol:ThenaZap",
        "label": "WBNB",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IWETH)9645"
      },
      {
        "astId": 3825,
        "contract": "contracts/ThenaZap.sol:ThenaZap",
        "label": "pancakeRouter",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IPancakeRouter02)7207"
      },
      {
        "astId": 3837,
        "contract": "contracts/ThenaZap.sol:ThenaZap",
        "label": "maxZapReverseRatio",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3839,
        "contract": "contracts/ThenaZap.sol:ThenaZap",
        "label": "pancakeRouterAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 3841,
        "contract": "contracts/ThenaZap.sol:ThenaZap",
        "label": "WBNBAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IPancakeRouter02)7207": {
        "encoding": "inplace",
        "label": "contract IPancakeRouter02",
        "numberOfBytes": "20"
      },
      "t_contract(IWETH)9645": {
        "encoding": "inplace",
        "label": "contract IWETH",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}